tmp
ReturnStatement return VariableName readerVar Instanceof instanceof SimpleType BufferedReader SimpleType BufferedReader VariableName readerVar New new SimpleType BufferedReader VariableName readerVar
ReturnStatement return VariableName writerVar Instanceof instanceof SimpleType BufferedWriter SimpleType BufferedWriter VariableName writerVar New new SimpleType BufferedWriter VariableName writerVar
IfStatement if VariableName outputstreamVar Operator == NullLiteral null ThrowStatement throw New new SimpleType NullPointerException ReturnStatement return VariableName outputstreamVar Instanceof instanceof SimpleType BufferedOutputStream SimpleType BufferedOutputStream VariableName outputstreamVar New new SimpleType BufferedOutputStream VariableName outputstreamVar
IfStatement if VariableName inputstreamVar Operator == NullLiteral null ThrowStatement throw New new SimpleType NullPointerException ReturnStatement return VariableName inputstreamVar Instanceof instanceof SimpleType BufferedInputStream SimpleType BufferedInputStream VariableName inputstreamVar New new SimpleType BufferedInputStream VariableName inputstreamVar
ReturnStatement return VariableName mapVar MethodName get VariableName stringVar
ReturnStatement return VariableName listVar
VariableName booleanVar Operator = BooleanLiteral false MethodName notifyAll
Modifier final PrimitiveType int VariableName intVar NumberLiteral numberLiteral PrimitiveType int VariableName intVar SuperMethodInvocation super MethodName hashCode VariableName intVar Operator = VariableName intVar Operator * VariableName intVar Operator + VariableName partitionVar Operator == NullLiteral null NumberLiteral numberLiteral VariableName partitionVar MethodName hashCode ReturnStatement return VariableName intVar
EnhancedForStatement for SimpleType String VariableName stringVar VariableName string[]Var IfStatement if Operator ! VariableName zkclientVar MethodName exists VariableName path VariableName zkclientVar MethodName createPersistent VariableName path BooleanLiteral true
ThrowStatement throw New new SimpleType BeanInitializationException Name String MethodName format StringLiteral stringLiteral VariableName stringVar VariableName gemfirecacheVar
ReturnStatement return New new SimpleType SpringContextBootstrappingInitializer
ReturnStatement return VariableName parsercontextVar MethodName getRegistry
ReturnStatement return New new SimpleType BeanDefinitionRegistryPostProcessorSupport PrimitiveType void MethodName postProcessBeanDefinitionRegistry SimpleType BeanDefinitionRegistry VariableName beandefinitionregistryVar MethodName registerBeanDefinitions VariableName beandefinitionregistryVar
ReturnStatement return Name Optional MethodName ofNullable SimpleType T ThisExpression this VariableName abstractcacheconfigurationVar MethodName orElseThrow MethodName newIllegalStateException StringLiteral stringLiteral
ReturnStatement return ThisExpression this VariableName classloaderVar
ReturnStatement return Name Optional MethodName ofNullable ThisExpression this VariableName beanfactoryVar MethodName orElseThrow MethodName newIllegalStateException StringLiteral stringLiteral
ReturnStatement return ThisExpression this VariableName environmentVar
ReturnStatement return ThisExpression this VariableName evaluationcontextVar
ReturnStatement return ThisExpression this VariableName stringVar
ReturnStatement return ThisExpression this VariableName integerVar
ReturnStatement return ThisExpression this VariableName integerVar
ReturnStatement return ThisExpression this VariableName longVar
ReturnStatement return ThisExpression this VariableName booleanVar
ReturnStatement return ThisExpression this VariableName integerVar
ReturnStatement return ThisExpression this VariableName integerVar
ReturnStatement return ThisExpression this VariableName integerVar
ReturnStatement return ThisExpression this VariableName booleanVar
ReturnStatement return ThisExpression this VariableName longVar
ReturnStatement return ThisExpression this VariableName iterableVar
ReturnStatement return ThisExpression this VariableName iterableVar
ReturnStatement return ThisExpression this VariableName booleanVar
ReturnStatement return ThisExpression this VariableName integerVar
ReturnStatement return ThisExpression this VariableName booleanVar
ReturnStatement return ThisExpression this VariableName integerVar
ReturnStatement return ThisExpression this VariableName stringVar
ReturnStatement return ThisExpression this VariableName integerVar
ReturnStatement return ThisExpression this VariableName integerVar
ReturnStatement return ThisExpression this VariableName integerVar
ReturnStatement return ThisExpression this VariableName booleanVar
ReturnStatement return ThisExpression this VariableName integerVar
ReturnStatement return ThisExpression this VariableName integerVar
ReturnStatement return ThisExpression this VariableName booleanVar
ReturnStatement return ThisExpression this VariableName resourceVar
ReturnStatement return ThisExpression this VariableName booleanVar
ReturnStatement return ThisExpression this VariableName booleanVar
ReturnStatement return ThisExpression this VariableName floatVar
ReturnStatement return ThisExpression this VariableName dynamicregionsupportVar
ReturnStatement return ThisExpression this VariableName floatVar
ReturnStatement return ThisExpression this VariableName gatewayconflictresolverVar
ReturnStatement return MethodName nullSafeList ThisExpression this VariableName listVar
ReturnStatement return ThisExpression this VariableName stringVar
ReturnStatement return ThisExpression this VariableName booleanVar
ReturnStatement return ThisExpression this VariableName booleanVar
ReturnStatement return ThisExpression this VariableName booleanVar
ReturnStatement return ThisExpression this VariableName pdxserializerVar
ReturnStatement return MethodName nullSafeList ThisExpression this VariableName listVar
ReturnStatement return ThisExpression this VariableName transactionwriterVar
ReturnStatement return ThisExpression this VariableName booleanVar
ReturnStatement return Name Optional MethodName ofNullable ThisExpression this VariableName stringVar MethodName filter MethodName orElse VariableName CacheServer VariableName DEFAULT_BIND_ADDRESS
ReturnStatement return Name Optional MethodName ofNullable ThisExpression this VariableName stringVar MethodName filter MethodName orElse VariableName CacheServer VariableName DEFAULT_HOSTNAME_FOR_CLIENTS
ReturnStatement return MethodName nullSafeSet ThisExpression this VariableName setVar
ReturnStatement return Name Optional MethodName ofNullable ThisExpression this VariableName longVar MethodName orElse VariableName CacheServer VariableName DEFAULT_LOAD_POLL_INTERVAL
ReturnStatement return Name Optional MethodName ofNullable ThisExpression this VariableName integerVar MethodName orElse VariableName CacheServer VariableName DEFAULT_MAX_CONNECTIONS
ReturnStatement return Name Optional MethodName ofNullable ThisExpression this VariableName integerVar MethodName orElse VariableName CacheServer VariableName DEFAULT_MAXIMUM_MESSAGE_COUNT
ReturnStatement return Name Optional MethodName ofNullable ThisExpression this VariableName integerVar MethodName orElse VariableName CacheServer VariableName DEFAULT_MAX_THREADS
ReturnStatement return Name Optional MethodName ofNullable ThisExpression this VariableName integerVar MethodName orElse VariableName CacheServer VariableName DEFAULT_MAXIMUM_TIME_BETWEEN_PINGS
ReturnStatement return Name Optional MethodName ofNullable ThisExpression this VariableName integerVar MethodName orElse VariableName CacheServer VariableName DEFAULT_MESSAGE_TIME_TO_LIVE
ReturnStatement return Name Optional MethodName ofNullable ThisExpression this VariableName integerVar MethodName orElse VariableName CacheServer VariableName DEFAULT_PORT
ReturnStatement return Name Optional MethodName ofNullable ThisExpression this VariableName serverloadprobeVar MethodName orElse VariableName CacheServer VariableName DEFAULT_LOAD_PROBE
ReturnStatement return Name Optional MethodName ofNullable ThisExpression this VariableName integerVar MethodName orElse VariableName CacheServer VariableName DEFAULT_SOCKET_BUFFER_SIZE
ReturnStatement return Name Optional MethodName ofNullable ThisExpression this VariableName integerVar MethodName orElse VariableName ClientSubscriptionConfig VariableName DEFAULT_CAPACITY
ReturnStatement return ThisExpression this VariableName stringVar
ReturnStatement return Name Optional MethodName ofNullable ThisExpression this VariableName subscriptionevictionpolicyVar MethodName orElse VariableName SubscriptionEvictionPolicy VariableName DEFAULT
SimpleType Template VariableName templateVar VariableName mapVar MethodName get VariableName objectVar ReturnStatement return VariableName templateVar Operator != NullLiteral null VariableName templateVar MethodName expand MethodName getContext VariableName requestcontextVar VariableName objectVar NullLiteral null
SimpleType String VariableName stringVar Name MimeUtil MethodName createUniqueMessageId VariableName stringVar ReturnStatement return MethodName parse VariableName UnstructuredFieldImpl VariableName PARSER VariableName FieldName VariableName MESSAGE_ID VariableName stringVar
ThisExpression this VariableName bodyfactoryVar Operator = VariableName bodyfactoryVar ReturnStatement return ThisExpression this
ParameterizedType MultiValueMap VariableName multivaluemapVar New new ParameterizedType LinkedMultiValueMap VariableName multivaluemapVar MethodName set StringLiteral stringLiteral VariableName resourceVar ReturnStatement return VariableName graphapiVar MethodName publish StringLiteral stringLiteral StringLiteral stringLiteral VariableName multivaluemapVar
ParameterizedType MultiValueMap VariableName multivaluemapVar New new ParameterizedType LinkedMultiValueMap VariableName multivaluemapVar MethodName set StringLiteral stringLiteral VariableName resourceVar VariableName multivaluemapVar MethodName set StringLiteral stringLiteral VariableName stringVar ReturnStatement return VariableName graphapiVar MethodName publish StringLiteral stringLiteral StringLiteral stringLiteral VariableName multivaluemapVar
ParameterizedType MultiValueMap VariableName multivaluemapVar New new ParameterizedType LinkedMultiValueMap VariableName multivaluemapVar MethodName set StringLiteral stringLiteral VariableName resourceVar ReturnStatement return VariableName graphapiVar MethodName publish VariableName stringVar StringLiteral stringLiteral VariableName multivaluemapVar
ParameterizedType MultiValueMap VariableName multivaluemapVar New new ParameterizedType LinkedMultiValueMap VariableName multivaluemapVar MethodName set StringLiteral stringLiteral VariableName resourceVar VariableName multivaluemapVar MethodName set StringLiteral stringLiteral VariableName stringVar ReturnStatement return VariableName graphapiVar MethodName publish VariableName stringVar StringLiteral stringLiteral VariableName multivaluemapVar
ParameterizedType MultiValueMap VariableName multivaluemapVar New new ParameterizedType LinkedMultiValueMap VariableName multivaluemapVar MethodName set StringLiteral stringLiteral VariableName resourceVar ParameterizedType Map VariableName mapVar VariableName resttemplateVar MethodName postForObject StringLiteral stringLiteral VariableName multivaluemapVar TypeLiteral class ReturnStatement return SimpleType String VariableName mapVar MethodName get StringLiteral stringLiteral
ParameterizedType MultiValueMap VariableName multivaluemapVar New new ParameterizedType LinkedMultiValueMap VariableName multivaluemapVar MethodName set StringLiteral stringLiteral VariableName resourceVar VariableName multivaluemapVar MethodName set StringLiteral stringLiteral VariableName stringVar VariableName multivaluemapVar MethodName set StringLiteral stringLiteral VariableName stringVar ParameterizedType Map VariableName mapVar VariableName resttemplateVar MethodName postForObject StringLiteral stringLiteral VariableName multivaluemapVar TypeLiteral class ReturnStatement return SimpleType String VariableName mapVar MethodName get StringLiteral stringLiteral
SimpleType AbstractData VariableName abstractdataVar SimpleType AbstractData MethodName getData MethodName clone VariableName statestackVar MethodName push VariableName abstractdataVar
ReturnStatement return VariableName lengthVar
ReturnStatement return NumberLiteral numberLiteral
ReturnStatement return NumberLiteral numberLiteral
ReturnStatement return NumberLiteral numberLiteral
ReturnStatement return NumberLiteral numberLiteral
ReturnStatement return NumberLiteral numberLiteral
ReturnStatement return NumberLiteral numberLiteral
ReturnStatement return NumberLiteral numberLiteral
ReturnStatement return NumberLiteral numberLiteral
ReturnStatement return NumberLiteral numberLiteral
ReturnStatement return NumberLiteral numberLiteral
ReturnStatement return NumberLiteral numberLiteral
ReturnStatement return NumberLiteral numberLiteral
ReturnStatement return VariableName intVar
VariableName stringVar Operator += New new SimpleType String VariableName char[]Var VariableName intVar VariableName intVar
Name SwingUtilities MethodName invokeLater New new SimpleType ShowInfo
TryStatement try VariableName xmlizableVar MethodName toSAX VariableName handler CatchClause catch SimpleType SAXException VariableName saxexceptionVar ThrowStatement throw New new SimpleType IFException StringLiteral stringLiteral VariableName e
SimpleType RtfOpenGroupMark VariableName rtfopengroupmarkVar New new SimpleType RtfOpenGroupMark ThisExpression this VariableName writer VariableName rtfattributesVar
IfStatement if VariableName bytearrayoutputstreamVar Operator != NullLiteral null VariableName bytearrayoutputstreamVar MethodName close VariableName bytearrayoutputstreamVar Operator = NullLiteral null
ReturnStatement return VariableName whitespacemanagementpositionVar MethodName getKnuthList Operator != NullLiteral null
WhileStatement while VariableName intVar Operator < VariableName listVar MethodName size ThisExpression this VariableName listVar MethodName remove VariableName listVar MethodName size Operator - NumberLiteral numberLiteral IfStatement if Operator ! VariableName pagesequenceVar MethodName goToPreviousSimplePageMaster VariableName logVar MethodName warn StringLiteral stringLiteral
ReturnStatement return NullLiteral null
ReturnStatement return ThisExpression this VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return Name Boolean MethodName parseBoolean MethodName getProperty VariableName configurationpropertyVar
TryStatement try ReturnStatement return Name DeconstructedPrincipal MethodName valueOf VariableName stringVar MethodName getDefaultRealm CatchClause catch SimpleType IllegalArgumentException VariableName illegalargumentexceptionVar ThrowStatement throw New new SimpleType KerberosOperationException VariableName e MethodName getMessage VariableName e
VariableName setVar MethodName add VariableName stringVar
ParameterizedType Set VariableName setVar New new ParameterizedType HashSet EnhancedForStatement for SimpleType String VariableName stringVar VariableName setVar IfStatement if MethodName filterUnhealthHostItem VariableName hostname VariableName actionexecutioncontextVar VariableName requestresourcefilterVar VariableName setVar MethodName add VariableName hostname VariableName setVar MethodName removeAll VariableName setVar ReturnStatement return VariableName setVar
VariableName setVar MethodName add VariableName stringVar
VariableName setVar MethodName add VariableName stringVar
VariableName setVar MethodName add VariableName stringVar
VariableName setVar MethodName add VariableName stringVar
VariableName setVar MethodName add VariableName stringVar
VariableName setVar MethodName add VariableName stringVar
VariableName setVar MethodName add VariableName stringVar
SimpleType Long VariableName longVar Name Long MethodName valueOf VariableName longVar IfStatement if Operator ! VariableName mapVar MethodName containsKey VariableName longVar VariableName mapVar MethodName put VariableName longVar New new ParameterizedType HashMap ParameterizedType Map VariableName mapVar VariableName mapVar MethodName get VariableName longVar SimpleType AggregateSource VariableName aggregatesourceVar SimpleType AggregateSource VariableName alertdefinitionVar MethodName getSource VariableName mapVar MethodName put VariableName aggregatesourceVar MethodName getAlertName VariableName alertdefinitionVar
VariableName setVar MethodName add VariableName stringVar
VariableName setVar MethodName add VariableName stringVar
VariableName setVar MethodName add VariableName stringVar
ReturnStatement return VariableName booleanVar
VariableName setVar MethodName add VariableName stringVar
VariableName setVar MethodName add VariableName stringVar
VariableName setVar MethodName add VariableName stringVar
ReturnStatement return Name Response MethodName ok MethodName build
ReturnStatement return New new SimpleType LogsearchCorsFilter VariableName logsearchhttpheaderconfigVar
ReturnStatement return NullLiteral null
ReturnStatement return New new SimpleType SolrSchemaFieldDao
ReturnStatement return VariableName stringVar MethodName endsWith StringLiteral stringLiteral VariableName stringVar Operator + VariableName stringVar VariableName stringVar Operator + StringLiteral stringLiteral VariableName stringVar
PrimitiveType long VariableName longVar Name RamUsageEstimator MethodName shallowSizeOf ThisExpression this IfStatement if VariableName ternarytreenodeVar Operator != NullLiteral null VariableName longVar Operator += VariableName ternarytreenodeVar MethodName sizeInBytes ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
IfStatement if VariableName docidsetiteratorVar MethodName docID Operator != Operator - NumberLiteral numberLiteral ThrowStatement throw New new SimpleType IllegalStateException StringLiteral stringLiteral Operator + VariableName docidsetiteratorVar MethodName docID
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
IfStatement if VariableName intVar Operator - VariableName intVar Operator == VariableName intVar Operator - VariableName intVar WhileStatement while VariableName intVar Operator < VariableName intVar MethodName swap VariableName intVar Operator ++ VariableName intVar Operator ++ MethodName reverse VariableName intVar VariableName intVar MethodName reverse VariableName intVar VariableName intVar MethodName reverse VariableName intVar VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ThrowStatement throw New new SimpleType UnsupportedOperationException
ReturnStatement return New new SimpleType SegmentTermsEnum ThisExpression this MethodName computeBlockStats
ReturnStatement return VariableName atomicbooleanVar MethodName getAndSet BooleanLiteral false
ReturnStatement return Operator - NumberLiteral numberLiteral
ReturnStatement return VariableName atomiclongVar MethodName get
ReturnStatement return VariableName globalBufferedUpdates.bytesUsed MethodName get
ReturnStatement return Operator - NumberLiteral numberLiteral
ReturnStatement return PrimitiveType long VariableName ramfileVar MethodName numBuffers Operator * PrimitiveType long VariableName intVar
ReturnStatement return VariableName longVar
MethodName ensureOpen ReturnStatement return VariableName atomiclongVar MethodName get
ReturnStatement return VariableName nolockVar
ReturnStatement return NullLiteral null
ReturnStatement return StringLiteral stringLiteral Operator + VariableName expressionVar VariableName sourceText StringLiteral stringLiteral
SimpleType LineNumberReader VariableName linenumberreaderVar New new SimpleType LineNumberReader VariableName readerVar TryStatement try MethodName addInternal VariableName linenumberreaderVar CatchClause catch SimpleType IllegalArgumentException VariableName illegalargumentexceptionVar SimpleType ParseException VariableName parseexceptionVar New new SimpleType ParseException StringLiteral stringLiteral Operator + VariableName linenumberreaderVar MethodName getLineNumber NumberLiteral numberLiteral VariableName ex MethodName initCause VariableName e ThrowStatement throw VariableName ex VariableName linenumberreaderVar MethodName close
ReturnStatement return Operator - NumberLiteral numberLiteral
Modifier final PrimitiveType int VariableName intVar VariableName intVar Modifier final PrimitiveType int VariableName intVar VariableName intVar Modifier final PrimitiveType float VariableName floatVar VariableName floatVar ReturnStatement return PrimitiveType float NumberLiteral numberLiteral Operator / Name Math MethodName sqrt VariableName floatVar Operator * PrimitiveType float Name Math MethodName abs VariableName intVar Operator - VariableName intVar Operator + Name Math MethodName abs VariableName intVar Operator - VariableName intVar Operator - VariableName intVar Operator - VariableName intVar Operator + NumberLiteral numberLiteral
ReturnStatement return MethodName getClass MethodName getSimpleName Operator + StringLiteral stringLiteral VariableName shapefieldcacheproviderVar StringLiteral stringLiteral VariableName pointVar StringLiteral stringLiteral
ReturnStatement return StringLiteral stringLiteral Operator + VariableName bboxstrategyVar MethodName getFieldName StringLiteral stringLiteral
ReturnStatement return StringLiteral stringLiteral Operator + VariableName pointvectorstrategyVar StringLiteral stringLiteral VariableName pointVar StringLiteral stringLiteral
VariableName corecontainerVar MethodName shutdown
IfStatement if VariableName listVar MethodName isEmpty VariableName listVar Operator = VariableName listVar
ReturnStatement return StringLiteral stringLiteral Operator + VariableName pointvectorstrategyVar StringLiteral stringLiteral VariableName pointVar StringLiteral stringLiteral
ReturnStatement return StringLiteral stringLiteral Operator + VariableName bboxstrategyVar MethodName getFieldName StringLiteral stringLiteral
IfStatement if VariableName httpclientVar Operator != NullLiteral null Operator && VariableName booleanVar Name HttpClientUtil MethodName close VariableName httpclientVar
IfStatement if VariableName scheduledexecutorserviceVar Operator != NullLiteral null VariableName scheduledexecutorserviceVar MethodName shutdownNow IfStatement if VariableName booleanVar Name HttpClientUtil MethodName close VariableName httpclientVar
ThisExpression this VariableName mapVar MethodName put VariableName objectVar VariableName objectVar
ReturnStatement return ThisExpression this MethodName getBool VariableName HighlightParams VariableName FIELD_MATCH BooleanLiteral false
SynchronizedStatement synchronized MethodName getUpdateLock IfStatement if VariableName clusterstateVar Operator == NullLiteral null MethodName createClusterStateWatchersAndUpdate ReturnStatement return MethodName refreshCollectionList NullLiteral null MethodName refreshLiveNodes NullLiteral null MethodName refreshLegacyClusterState NullLiteral null ParameterizedType Collection VariableName collectionVar New new ParameterizedType ArrayList VariableName concurrenthashmapVar MethodName keySet ParameterizedType Set VariableName setVar New new ParameterizedType HashSet EnhancedForStatement for SimpleType String VariableName stringVar VariableName safeCopy SimpleType DocCollection VariableName doccollectionVar MethodName fetchCollectionState VariableName coll NullLiteral null IfStatement if MethodName updateWatchedCollection VariableName coll VariableName newState VariableName updatedCollections MethodName add VariableName coll MethodName constructState VariableName updatedCollections
SimpleType String VariableName stringVar StringLiteral stringLiteral Operator + VariableName userVar MethodName getId IfStatement if VariableName userVar MethodName getId Operator == NullLiteral null VariableName mapVar MethodName put VariableName userVar MethodName getLogin VariableName userVar VariableName stringVar Operator = VariableName userVar MethodName getLogin ReturnStatement return VariableName stringVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
TryStatement try SimpleType InputStream VariableName inputstreamVar New new SimpleType FileInputStream VariableName fileVar SimpleType BackupImport VariableName backupimportVar MethodName getApplicationContext MethodName getBean TypeLiteral class VariableName backupimportVar MethodName performImport VariableName is
IfStatement if VariableName listVar Operator == NullLiteral null VariableName listVar Operator = Name Collections MethodName singletonList VariableName tokenVar IfStatement if VariableName listVar MethodName size Operator == NumberLiteral numberLiteral ParameterizedType List VariableName listVar New new ParameterizedType ArrayList NumberLiteral numberLiteral VariableName l MethodName add VariableName listVar MethodName get NumberLiteral numberLiteral VariableName l MethodName add VariableName tokenVar VariableName listVar Operator = VariableName l MethodName checkSpan VariableName tokenVar
ReturnStatement return VariableName stringVar
ReturnStatement return MethodName initModel Name String MethodName format StringLiteral stringLiteral VariableName stringVar TypeLiteral class
ReturnStatement return MethodName initModel Name String MethodName format StringLiteral stringLiteral VariableName stringVar VariableName stringVar TypeLiteral class
ReturnStatement return MethodName initModel Name String MethodName format StringLiteral stringLiteral VariableName stringVar TypeLiteral class
ReturnStatement return MethodName initModel Name String MethodName format StringLiteral stringLiteral VariableName stringVar TypeLiteral class
ReturnStatement return NullLiteral null
SimpleType Context VariableName contextVar MethodName getContext IfStatement if VariableName contextVar Operator != NullLiteral null Operator && Operator ! VariableName contextVar MethodName getSwallowAbortedUploads VariableName requestVar MethodName action VariableName ActionCode VariableName DISABLE_SWALLOW_INPUT NullLiteral null
ThisExpression this VariableName eventsubtypeVar Operator = VariableName eventsubtypeVar
ReturnStatement return BooleanLiteral false
ReturnStatement return VariableName booleanVar
SimpleType NioReplicationTask VariableName nioreplicationtaskVar New new SimpleType NioReplicationTask ThisExpression this ThisExpression this VariableName nioreplicationtaskVar MethodName setUseBufferPool ThisExpression this MethodName getUseBufferPool VariableName nioreplicationtaskVar MethodName setRxBufSize MethodName getRxBufSize VariableName nioreplicationtaskVar MethodName setOptions MethodName getWorkerThreadOptions ReturnStatement return VariableName nioreplicationtaskVar
ReturnStatement return MethodName getReplicationThread
IfStatement if VariableName channelsenderVar Operator != NullLiteral null VariableName channelsenderVar MethodName heartbeat SuperMethodInvocation super MethodName heartbeat
VariableName threadlocalVar MethodName set VariableName Boolean VariableName TRUE
IfStatement if VariableName stringVar Operator == NullLiteral null ReturnStatement return NullLiteral null ReturnStatement return Name JarFactory MethodName newInstance VariableName urlVar
VariableName asyncchannelwrapperVar MethodName close
PrimitiveType long VariableName longVar VariableName longVar IfStatement if VariableName longVar Operator < NumberLiteral numberLiteral ReturnStatement return IfStatement if Name System MethodName currentTimeMillis Operator - VariableName longVar Operator > VariableName longVar SimpleType String VariableName stringVar VariableName stringmanagerVar MethodName getString StringLiteral stringLiteral MethodName doClose New new SimpleType CloseReason VariableName CloseCodes VariableName GOING_AWAY VariableName msg New new SimpleType CloseReason VariableName CloseCodes VariableName CLOSED_ABNORMALLY VariableName msg
ReturnStatement return NullLiteral null
ReturnStatement return NullLiteral null
ReturnStatement return VariableName booleanVar
IfStatement if VariableName connectionpoolVar Operator != NullLiteral null ReturnStatement return VariableName connectionpoolVar VariableName connectionpoolVar Operator = New new SimpleType ConnectionPool VariableName poolconfigurationVar ReturnStatement return VariableName connectionpoolVar
ReturnStatement return NumberLiteral numberLiteral Operator * PrimitiveType long VariableName intVar
IfStatement if Name System MethodName getenv StringLiteral stringLiteral Operator != NullLiteral null ReturnStatement return Name System MethodName getenv StringLiteral stringLiteral MethodName equals StringLiteral stringLiteral ReturnStatement return BooleanLiteral false
EnhancedForStatement for SimpleType SubSystemType VariableName subsystemtypeVar ThisExpression this VariableName setVar IfStatement if VariableName stringVar Operator == VariableName subsystemtypeVar ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
ParameterizedType Set VariableName setVar New new ParameterizedType HashSet ArrayType String[] VariableName string[]Var VariableName stringVar MethodName split StringLiteral stringLiteral EnhancedForStatement for SimpleType String VariableName stringVar VariableName string[]Var SimpleType SubSystemType VariableName subsystemtypeVar Name SubSystemType MethodName getSubSystem VariableName subSystem IfStatement if VariableName type Operator != NullLiteral null VariableName setVar MethodName add VariableName type ReturnStatement return VariableName setVar
SimpleType StringBuilder VariableName stringbuilderVar New new SimpleType StringBuilder IfStatement if VariableName setVar MethodName size Operator == NumberLiteral numberLiteral ReturnStatement return VariableName stringbuilderVar MethodName toString EnhancedForStatement for SimpleType SubSystemType VariableName subsystemtypeVar VariableName setVar VariableName stringbuilderVar MethodName append VariableName type MethodName name MethodName append StringLiteral stringLiteral ReturnStatement return VariableName stringbuilderVar MethodName toString MethodName substring NumberLiteral numberLiteral VariableName stringbuilderVar MethodName length Operator - NumberLiteral numberLiteral
SimpleType TupleImpl VariableName tupleimplVar New new SimpleType TupleImpl VariableName executorVar MethodName getWorkerTopologyContext New new SimpleType Values VariableName credentialsVar PrimitiveType int VariableName Constants VariableName SYSTEM_TASK_ID VariableName Constants VariableName CREDENTIALS_CHANGED_STREAM_ID ParameterizedType List VariableName listVar Name Lists MethodName newArrayList New new SimpleType AddressedTuple VariableName AddressedTuple VariableName BROADCAST_DEST VariableName tupleimplVar VariableName executorVar MethodName getReceiveQueue MethodName publish VariableName listVar
TryStatement try Modifier final ParameterizedType Map VariableName mapVar VariableName modelrunnerVar MethodName scoredTuplePerStream VariableName tupleVar Name LOG MethodName debug StringLiteral stringLiteral VariableName tupleVar VariableName mapVar IfStatement if VariableName mapVar Operator != NullLiteral null EnhancedForStatement for ParameterizedType Entry VariableName entryVar VariableName mapVar MethodName entrySet VariableName outputcollectorVar MethodName emit VariableName streamToTuple MethodName getKey VariableName tupleVar VariableName streamToTuple MethodName getValue VariableName outputcollectorVar MethodName ack VariableName tupleVar Name LOG MethodName debug StringLiteral stringLiteral VariableName tupleVar CatchClause catch SimpleType Exception VariableName exceptionVar VariableName outputcollectorVar MethodName reportError VariableName e VariableName outputcollectorVar MethodName fail VariableName tupleVar
TryStatement try ParameterizedType Collection VariableName collectionVar MethodName lookupValuesInEs VariableName tupleVar MethodName tryEmitAndAck VariableName collectionVar VariableName tupleVar CatchClause catch SimpleType Exception VariableName exceptionVar VariableName collector MethodName reportError VariableName e VariableName collector MethodName fail VariableName tupleVar
IfStatement if VariableName nimbusclientVar Operator != NullLiteral null VariableName nimbusclientVar MethodName close VariableName nimbusclientVar Operator = NullLiteral null
VariableName stringVar Operator = VariableName stringVar ReturnStatement return ThisExpression this
TryStatement try ParameterizedType List VariableName listVar VariableName jdbcmapperVar MethodName getColumns VariableName tupleVar ParameterizedType List VariableName listVar New new ParameterizedType ArrayList VariableName listVar MethodName add VariableName listVar IfStatement if Operator ! Name StringUtils MethodName isBlank VariableName stringVar ThisExpression this VariableName jdbcClient MethodName insert ThisExpression this VariableName stringVar VariableName listVar ThisExpression this VariableName jdbcClient MethodName executeInsertQuery ThisExpression this VariableName stringVar VariableName listVar ThisExpression this VariableName collector MethodName ack VariableName tupleVar CatchClause catch SimpleType Exception VariableName exceptionVar ThisExpression this VariableName collector MethodName reportError VariableName e ThisExpression this VariableName collector MethodName fail VariableName tupleVar
SimpleType HBMessage VariableName hbmessageVar NullLiteral null IfStatement if VariableName booleanVar PrimitiveType boolean VariableName booleanVar VariableName mapVar MethodName containsKey VariableName stringVar Name LOG MethodName debug StringLiteral stringLiteral VariableName stringVar VariableName itDoes VariableName hbmessageVar Operator = New new SimpleType HBMessage VariableName HBServerMessageType VariableName EXISTS_RESPONSE Name HBMessageData MethodName boolval VariableName itDoes VariableName hbmessageVar Operator = MethodName notAuthorized ReturnStatement return VariableName hbmessageVar
IfStatement if VariableName intVar Operator == VariableName intVar Operator || VariableName intVar Operator & VariableName intVar Operator != VariableName intVar ThrowStatement throw New new SimpleType IllegalArgumentException StringLiteral stringLiteral VariableName intVar Operator = VariableName intVar
ThrowStatement throw New new SimpleType BundleException StringLiteral stringLiteral
VariableName intVar Operator = VariableName intVar
SimpleType String VariableName stringVar VariableName artifactrepositoryVar MethodName getBasedir SimpleType String VariableName stringVar VariableName artifactrepositoryVar MethodName pathOf VariableName artifactVar ReturnStatement return MethodName toFileURI VariableName stringVar Operator + CharacterLiteral charLiteral VariableName stringVar
SimpleType DomainGripper VariableName domaingripperVar SimpleType DomainGripper VariableName threadlocalVar MethodName get IfStatement if VariableName domaingripperVar Operator == NullLiteral null VariableName domaingripperVar Operator = New new SimpleType DomainGripper VariableName threadlocalVar MethodName set VariableName domaingripperVar VariableName gripper.m_domains MethodName clear VariableName domaingripperVar VariableName accesscontrolcontextVar Operator = Name AccessController MethodName getContext SimpleType AccessControlContext VariableName accesscontrolcontextVar SimpleType AccessControlContext Name AccessController MethodName doPrivileged VariableName domaingripperVar VariableName domaingripperVar VariableName accesscontrolcontextVar Operator = NullLiteral null Name AccessController MethodName doPrivileged VariableName domaingripperVar VariableName accesscontrolcontextVar ReturnStatement return VariableName domaingripperVar VariableName listVar
MethodName ensureFactory ReturnStatement return MethodName getFactory
MethodName checkHasNoMethodRefs VariableName booleanVar Operator = BooleanLiteral true VariableName stringVar Operator = VariableName stringVar ReturnStatement return ThisExpression this
SuperMethodInvocation super MethodName setCallbacks VariableName objectVar VariableName stringVar NullLiteral null ReturnStatement return ThisExpression this
MethodName checkHasNoMethodRefs VariableName booleanVar Operator = BooleanLiteral true VariableName stringVar Operator = VariableName stringVar ReturnStatement return ThisExpression this
ReturnStatement return New new SimpleType ConfigurationException VariableName MemoryUsageConstants VariableName PROP_DUMP_THRESHOLD StringLiteral stringLiteral Operator + VariableName objectVar StringLiteral stringLiteral VariableName MemoryUsageConstants VariableName MIN_DUMP_THRESHOLD StringLiteral stringLiteral VariableName MemoryUsageConstants VariableName MAX_DUMP_THRESHOLD StringLiteral stringLiteral
VariableName converterVar Operator = VariableName converterVar ReturnStatement return ThisExpression this
VariableName parserVar Operator = VariableName parserVar ReturnStatement return ThisExpression this
VariableName converterVar Operator = VariableName converterVar ReturnStatement return ThisExpression this
VariableName parserVar Operator = VariableName parserVar ReturnStatement return ThisExpression this
SynchronizedStatement synchronized VariableName weakhashmapVar VariableName weakhashmapVar MethodName remove VariableName commandsessionimplVar
ReturnStatement return VariableName booleanVar
ReturnStatement return Operator ! VariableName booleanVar
SimpleType Principal VariableName principalVar MethodName getMainPrincipalOrThrow ParameterizedType Set VariableName setVar New new ParameterizedType TreeSet VariableName comparatorVar EnhancedForStatement for SimpleType Preference VariableName preferenceVar VariableName mapVar MethodName values IfStatement if MethodName principalsEqual VariableName principalVar VariableName preference MethodName getOwner VariableName setVar MethodName add VariableName preference ReturnStatement return VariableName setVar
ParameterizedType Set VariableName setVar MethodName getPrincipalsOrThrow ParameterizedType Set VariableName setVar New new ParameterizedType TreeSet VariableName comparatorVar EnhancedForStatement for SimpleType Preference VariableName preferenceVar VariableName mapVar MethodName values IfStatement if MethodName principalsContain VariableName setVar VariableName preference MethodName getOwner VariableName setVar MethodName add VariableName preference ContinueStatement continue Modifier final ParameterizedType Set VariableName setVar VariableName preference MethodName getVisibilityList IfStatement if VariableName visibilityList Operator != NullLiteral null EnhancedForStatement for SimpleType Principal VariableName principalVar VariableName visibilityList IfStatement if MethodName principalsContain VariableName setVar VariableName principal VariableName setVar MethodName add VariableName preference BreakStatement break ReturnStatement return VariableName setVar
SimpleType Principal VariableName principalVar MethodName getMainPrincipalOrThrow EnhancedForStatement for SimpleType Preference VariableName preferenceVar VariableName collectionVar IfStatement if VariableName preference MethodName getId Operator != NullLiteral null Operator && VariableName mapVar MethodName containsKey VariableName preference MethodName getId SimpleType Preference VariableName preferenceVar VariableName mapVar MethodName get VariableName preference MethodName getId IfStatement if Operator ! VariableName preference MethodName getType MethodName equals VariableName existingPreference MethodName getType Operator || Operator ! MethodName principalsEqual VariableName existingPreference MethodName getOwner VariableName principalVar ThrowStatement throw New new SimpleType IllegalArgumentException Name String MethodName format StringLiteral stringLiteral VariableName preference MethodName getId
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName managedattributeVar MethodName validValuePattern
IfStatement if VariableName notificationcheckVar MethodName isMessageSpecific Operator || VariableName long[]Var VariableName notificationcheckVar MethodName ordinal Operator < VariableName longVar IfStatement if VariableName notificationcheckVar MethodName notifyIfNecessary VariableName servermessageVar ThisExpression this VariableName queuenotificationlistenerVar VariableName long[]Var VariableName notificationcheckVar MethodName ordinal Operator = VariableName longVar
ReturnStatement return BooleanLiteral false
SimpleType AclAction VariableName aclactionVar New new SimpleType AclAction VariableName legacyoperationVar MethodName addRule VariableName integerVar VariableName stringVar VariableName ruleoutcomeVar VariableName aclactionVar
SimpleType AclAction VariableName aclactionVar New new SimpleType AclAction VariableName legacyoperationVar VariableName objecttypeVar VariableName objectpropertiesVar MethodName addRule VariableName integerVar VariableName stringVar VariableName ruleoutcomeVar VariableName aclactionVar
SimpleType AclAction VariableName aclactionVar New new SimpleType AclAction VariableName legacyoperationVar VariableName objecttypeVar VariableName aclrulepredicatesVar MethodName addRule VariableName integerVar VariableName stringVar VariableName ruleoutcomeVar VariableName aclactionVar
SimpleType MethodRegistry VariableName methodregistryVar VariableName amqpconnection_0_8Var MethodName getMethodRegistry SimpleType AMQMethodBody VariableName amqmethodbodyVar VariableName methodregistryVar MethodName createChannelFlowBody VariableName booleanVar VariableName amqpconnection_0_8Var MethodName writeFrame VariableName amqmethodbodyVar MethodName generateFrame VariableName intVar
IfStatement if VariableName mapVar MethodName containsKey VariableName stringVar TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName mapVar MethodName get VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ReturnStatement return VariableName intVar ReturnStatement return VariableName intVar
ReturnStatement return VariableName bdbconfigurationstoreVar MethodName getMessageStore
ReturnStatement return VariableName graphVar MethodName size
ThrowStatement throw New new SimpleType BrokerStoppedException ThisExpression this VariableName stringVar
SimpleType Destination VariableName destinationVar MethodName addDestination VariableName connectioncontextVar VariableName activemqdestinationVar BooleanLiteral false MethodName registerSync VariableName destinationVar VariableName transactionVar VariableName basecommandVar
VariableName concurrentmapVar MethodName put VariableName consumeridVar VariableName amqpsenderVar
VariableName concurrentmapVar MethodName remove VariableName consumeridVar
Name System MethodName setProperty StringLiteral stringLiteral VariableName mavenprojectVar MethodName getBuild MethodName getDirectory Operator + StringLiteral stringLiteral Name System MethodName setProperty StringLiteral stringLiteral VariableName mavenprojectVar MethodName getBuild MethodName getDirectory Operator + StringLiteral stringLiteral Name System MethodName setProperty StringLiteral stringLiteral StringLiteral stringLiteral Name System MethodName setProperty StringLiteral stringLiteral VariableName mavenprojectVar MethodName getBuild MethodName getDirectory Operator + StringLiteral stringLiteral Name System MethodName setProperty StringLiteral stringLiteral VariableName mavenprojectVar MethodName getBuild MethodName getDirectory Operator + StringLiteral stringLiteral Name System MethodName setProperty StringLiteral stringLiteral StringLiteral stringLiteral Name System MethodName getProperties MethodName putAll VariableName propertiesVar
ReturnStatement return VariableName databytearrayoutputstreamVar
IfStatement if VariableName listVar Operator == NullLiteral null Operator || VariableName listVar MethodName size Operator == NumberLiteral numberLiteral ReturnStatement return MethodName createMBeansObjectNameQuery VariableName mbeanserverconnectionVar MethodName query StringLiteral stringLiteral ReturnStatement return MethodName createMBeansObjectNameQuery VariableName mbeanserverconnectionVar MethodName query VariableName listVar
ReturnStatement return VariableName qosVar
ReturnStatement return VariableName booleanVar
ReturnStatement return BooleanLiteral false
IfStatement if Operator -- VariableName intVar Operator == NumberLiteral numberLiteral TryStatement try VariableName connectionhelperVar MethodName endBatch VariableName booleanVar CatchClause catch SimpleType SQLException VariableName sqlexceptionVar VariableName loggerVar MethodName error StringLiteral stringLiteral VariableName e
IfStatement if VariableName booleanVar MethodName delete BooleanLiteral true
VariableName intVar Operator ++
ReturnStatement return NumberLiteral numberLiteral Operator + VariableName internalvalue[]Var VariableName length Operator * NumberLiteral numberLiteral
MethodName getBuffer MethodName clear IfStatement if MethodName getTupleCount Operator > NumberLiteral numberLiteral VariableName iframewriterVar MethodName nextFrame MethodName getBuffer IfStatement if VariableName booleanVar VariableName iframeVar MethodName reset MethodName reset MethodName getBuffer BooleanLiteral true
IfStatement if MethodName getPlatformInfo MethodName isAlterTableForDropUsed MethodName writeTableAlterStmt VariableName tableVar MethodName print StringLiteral stringLiteral MethodName printIdentifier MethodName getIndexName VariableName indexVar IfStatement if Operator ! MethodName getPlatformInfo MethodName isAlterTableForDropUsed MethodName print StringLiteral stringLiteral MethodName printIdentifier MethodName getTableName VariableName tableVar MethodName printEndOfStatement
SimpleType String VariableName stringVar MethodName getForeignKeyName VariableName tableVar VariableName foreignkeyVar MethodName print StringLiteral stringLiteral MethodName printAlwaysSingleQuotedIdentifier VariableName stringVar MethodName println StringLiteral stringLiteral MethodName printIndent MethodName print StringLiteral stringLiteral MethodName printIdentifier MethodName getTableName VariableName tableVar MethodName print StringLiteral stringLiteral MethodName printIdentifier VariableName stringVar MethodName printEndOfStatement
MethodName print StringLiteral stringLiteral MethodName printIdentifier MethodName getTableName VariableName tableVar MethodName print StringLiteral stringLiteral MethodName printIdentifier MethodName getIndexName VariableName indexVar MethodName printEndOfStatement
MethodName print StringLiteral stringLiteral MethodName printIdentifier MethodName getTableName VariableName tableVar MethodName print StringLiteral stringLiteral MethodName printIdentifier MethodName getIndexName VariableName indexVar MethodName printEndOfStatement
SimpleType String VariableName stringVar MethodName getForeignKeyName VariableName tableVar VariableName foreignkeyVar MethodName print StringLiteral stringLiteral MethodName printAlwaysSingleQuotedIdentifier VariableName stringVar MethodName println StringLiteral stringLiteral MethodName printIndent MethodName print StringLiteral stringLiteral MethodName printIdentifier MethodName getTableName VariableName tableVar MethodName print StringLiteral stringLiteral MethodName printIdentifier VariableName stringVar MethodName printEndOfStatement
MethodName print MethodName getQuotationOnStatement
MethodName writeTableAlterStmt VariableName tableVar MethodName print StringLiteral stringLiteral MethodName printIdentifier MethodName getForeignKeyName VariableName tableVar VariableName foreignkeyVar MethodName printEndOfStatement IfStatement if VariableName foreignkeyVar MethodName isAutoIndexPresent MethodName writeTableAlterStmt VariableName tableVar MethodName print StringLiteral stringLiteral MethodName printIdentifier MethodName getForeignKeyName VariableName tableVar VariableName foreignkeyVar MethodName printEndOfStatement
SimpleType String VariableName stringVar VariableName indexVar MethodName getName IfStatement if VariableName stringVar Operator != NullLiteral null Operator && VariableName stringVar MethodName startsWith StringLiteral stringLiteral TryStatement try Name Long MethodName parseLong VariableName stringVar MethodName substring NumberLiteral numberLiteral ReturnStatement return BooleanLiteral true CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ReturnStatement return BooleanLiteral false
MethodName print StringLiteral stringLiteral MethodName printIdentifier MethodName getIndexName VariableName indexVar MethodName printEndOfStatement
MethodName print StringLiteral stringLiteral MethodName printIdentifier MethodName getIndexName VariableName indexVar MethodName printEndOfStatement
IfStatement if VariableName column[]Var VariableName length Operator > NumberLiteral numberLiteral Operator && MethodName shouldGeneratePrimaryKeys VariableName column[]Var MethodName print StringLiteral stringLiteral MethodName printlnIdentifier MethodName getTableName VariableName tableVar MethodName printIndent MethodName print StringLiteral stringLiteral MethodName printIdentifier MethodName getConstraintName NullLiteral null VariableName tableVar StringLiteral stringLiteral NullLiteral null MethodName print StringLiteral stringLiteral MethodName writePrimaryKeyStmt VariableName tableVar VariableName column[]Var MethodName printEndOfStatement
MethodName writeTableAlterStmt VariableName tableVar MethodName print StringLiteral stringLiteral MethodName printIdentifier MethodName getForeignKeyName VariableName tableVar VariableName foreignkeyVar MethodName printEndOfStatement
IfStatement if VariableName column[]Var VariableName length Operator > NumberLiteral numberLiteral Operator && MethodName shouldGeneratePrimaryKeys VariableName column[]Var MethodName print StringLiteral stringLiteral MethodName printlnIdentifier MethodName getTableName VariableName tableVar MethodName printIndent MethodName print StringLiteral stringLiteral MethodName writePrimaryKeyStmt VariableName tableVar VariableName column[]Var MethodName printEndOfStatement
MethodName writeTableAlterStmt VariableName tableVar MethodName print StringLiteral stringLiteral MethodName printIdentifier MethodName getForeignKeyName VariableName tableVar VariableName foreignkeyVar MethodName printEndOfStatement
MethodName print StringLiteral stringLiteral MethodName printIdentifier MethodName getIndexName VariableName indexVar MethodName printEndOfStatement
MethodName print StringLiteral stringLiteral MethodName printIdentifier MethodName getIndexName VariableName indexVar MethodName printEndOfStatement
MethodName print StringLiteral stringLiteral MethodName printIdentifier MethodName getIndexName VariableName indexVar MethodName printEndOfStatement
MethodName print StringLiteral stringLiteral MethodName printIdentifier MethodName getIndexName VariableName indexVar MethodName printEndOfStatement
MethodName print StringLiteral stringLiteral MethodName printIdentifier MethodName getIndexName VariableName indexVar MethodName printEndOfStatement
ThisExpression this VariableName managementcontextVar Operator = VariableName managementcontextVar
MethodName checkEnteringPhase NumberLiteral numberLiteral
ThisExpression this VariableName managementcontextVar Operator = VariableName managementcontextVar
ReturnStatement return Name ParseYamlInputs MethodName parseParameters VariableName listVar VariableName functionVar VariableName brooklynclassloadingcontextVar
ThisExpression this VariableName managementcontextVar Operator = VariableName managementcontextVar
ThisExpression this VariableName managementcontextVar Operator = VariableName managementcontextVar
SynchronizedStatement synchronized VariableName objectVar ReturnStatement return MethodName sensors MethodName get VariableName SEQUENCE_VALUE
ReturnStatement return New new SimpleType NotificationFilter PrimitiveType boolean MethodName isNotificationEnabled SimpleType Notification VariableName notificationVar ReturnStatement return VariableName notificationVar MethodName getType MethodName matches VariableName stringVar
VariableName mapVar MethodName put VariableName classVar MethodName getName VariableName classVar
SimpleType String VariableName stringVar Name System MethodName getProperty StringLiteral stringLiteral MethodName toLowerCase ReturnStatement return VariableName stringVar MethodName startsWith StringLiteral stringLiteral
ThisExpression this VariableName managementcontextVar Operator = VariableName managementcontextVar
ReturnStatement return Name Math MethodName sqrt MethodName innerProduct VariableName double[]Var VariableName double[]Var
ThisExpression this VariableName jmschannelfactorybeanVar MethodName setMessageConverter VariableName messageconverterVar ReturnStatement return MethodName _this
ThisExpression this VariableName target MethodName getListener MethodName setHeaderMapper VariableName jmsheadermapperVar ReturnStatement return MethodName _this
ThrowStatement throw New new SimpleType UnsupportedOperationException
ReturnStatement return Name Sftp MethodName outboundAdapter VariableName sessionfactoryVar
ReturnStatement return New new SimpleType OgmPersisterClassResolver
ReturnStatement return New new SimpleType NoopConnectionProvider
ReturnStatement return New new SimpleType OgmDialectFactory VariableName serviceregistryimplementorVar
ReturnStatement return New new SimpleType OgmSessionFactoryServiceRegistryFactoryImpl VariableName serviceregistryimplementorVar
ReturnStatement return New new SimpleType OgmJdbcServicesImpl
SimpleType Class VariableName classVar MethodName getType MethodName getSuperclass IfStatement if VariableName classVar Operator == NullLiteral null ReturnStatement return NullLiteral null ReturnStatement return MethodName inspect VariableName classVar
IfStatement if VariableName objectVar Operator == NullLiteral null ReturnStatement return NullLiteral null TryStatement try ReturnStatement return Name URLEncoder MethodName encode Name String MethodName valueOf VariableName objectVar StringLiteral stringLiteral CatchClause catch SimpleType UnsupportedEncodingException VariableName unsupportedencodingexceptionVar ReturnStatement return NullLiteral null
ReturnStatement return ThisExpression this VariableName listVar MethodName size
ReturnStatement return VariableName mapVar MethodName size
Name TUtil MethodName putToNestedMap VariableName mapVar VariableName vVar VariableName vVar VariableName eVar Name TUtil MethodName putToNestedMap VariableName mapVar VariableName vVar VariableName vVar VariableName eVar
IfStatement if VariableName mapVar MethodName containsKey VariableName vVar VariableName mapVar MethodName get VariableName vVar MethodName remove VariableName vVar IfStatement if VariableName mapVar MethodName get VariableName vVar MethodName isEmpty VariableName mapVar MethodName remove VariableName vVar VariableName mapVar MethodName get VariableName vVar MethodName remove VariableName vVar IfStatement if VariableName mapVar MethodName get VariableName vVar MethodName isEmpty VariableName mapVar MethodName remove VariableName vVar ThrowStatement throw New new SimpleType RuntimeException StringLiteral stringLiteral Operator + VariableName vVar StringLiteral stringLiteral VariableName vVar
ReturnStatement return VariableName mapVar MethodName containsKey VariableName vVar Operator && VariableName mapVar MethodName get VariableName vVar MethodName containsKey VariableName vVar
ReturnStatement return VariableName mapVar MethodName containsKey VariableName vVar Operator && VariableName mapVar MethodName get VariableName vVar MethodName containsKey VariableName vVar
ThisExpression this VariableName stringVar Operator = VariableName stringVar ThisExpression this VariableName booleanVar Operator = VariableName booleanVar
SimpleType Builder VariableName builderVar MethodName newProperty SimpleType Builder VariableName builderVar Name JoinEnforce MethodName newBuilder VariableName builderVar MethodName setPid VariableName intVar VariableName builderVar MethodName setAlgorithm VariableName joinalgorithmVar VariableName builderVar MethodName setType VariableName EnforceType VariableName JOIN VariableName builderVar MethodName setJoin VariableName builderVar MethodName build Name TUtil MethodName putToNestedList VariableName mapVar VariableName builderVar MethodName getType VariableName builderVar MethodName build
SimpleType Builder VariableName builderVar MethodName newProperty SimpleType Builder VariableName builderVar Name SortEnforce MethodName newBuilder VariableName builderVar MethodName setPid VariableName intVar VariableName builderVar MethodName setAlgorithm VariableName sortalgorithmVar VariableName builderVar MethodName setType VariableName EnforceType VariableName SORT VariableName builderVar MethodName setSort VariableName builderVar MethodName build Name TUtil MethodName putToNestedList VariableName mapVar VariableName builderVar MethodName getType VariableName builderVar MethodName build
IfStatement if Operator ! VariableName catalogserviceVar MethodName existsTable VariableName stringVar VariableName verificationstateVar MethodName addVerification Name String MethodName format StringLiteral stringLiteral VariableName stringVar ReturnStatement return BooleanLiteral false ReturnStatement return BooleanLiteral true
PrimitiveType int VariableName intVar VariableName integerVar Operator ++ ReturnStatement return VariableName charVar Operator + VariableName stringVar MethodName toLowerCase VariableName intVar Operator > NumberLiteral numberLiteral StringLiteral stringLiteral Operator + VariableName intVar StringLiteral stringLiteral
ReturnStatement return VariableName inetsocketaddressVar MethodName getAddress MethodName getHostAddress Operator + StringLiteral stringLiteral VariableName inetsocketaddressVar MethodName getPort
ReturnStatement return VariableName intVar
ArrayType Datum[] VariableName datum[]Var ArrayType Datum[] VariableName datum[]Var VariableName length ForStatement for PrimitiveType int VariableName intVar NumberLiteral numberLiteral VariableName i Operator < VariableName datum[]Var VariableName length VariableName i Operator ++ VariableName datum[]Var VariableName i Operator = MethodName get VariableName i ReturnStatement return VariableName datum[]Var
TryStatement try MethodName getProcessor MethodName process VariableName httpservletrequestVar VariableName httpservletresponseVar CatchClause catch SimpleType IOException VariableName ioexceptionVar ThrowStatement throw VariableName e CatchClause catch SimpleType ServletException VariableName servletexceptionVar ThrowStatement throw VariableName e CatchClause catch SimpleType RuntimeException VariableName runtimeexceptionVar ThrowStatement throw VariableName e CatchClause catch SimpleType Exception VariableName exceptionVar ThrowStatement throw New new SimpleType ServletException StringLiteral stringLiteral Operator + VariableName e VariableName e
SimpleType String VariableName stringVar VariableName endpoint MethodName getLocationURI VariableName componentcontextVar Operator = New new SimpleType EndpointComponentContext VariableName endpoint VariableName deliverychannelVar Operator = VariableName componentcontextVar MethodName getDeliveryChannel VariableName objectVar Operator = MethodName getServerManager MethodName createContext VariableName stringVar ThisExpression this
VariableName deliverychannelVar Operator = VariableName endpoint MethodName getServiceUnit MethodName getComponent MethodName getComponentContext MethodName getDeliveryChannel
ReturnStatement return VariableName tpermissionsupdateVar
ReturnStatement return VariableName tpathsupdateVar
SimpleType TAlterSentryRoleAddGroupsRequest VariableName taltersentryroleaddgroupsrequestVar New new SimpleType TAlterSentryRoleAddGroupsRequest VariableName taltersentryroleaddgroupsrequestVar MethodName setProtocol_version VariableName sentry_common_serviceConstants VariableName TSENTRY_SERVICE_V2 VariableName taltersentryroleaddgroupsrequestVar MethodName setRequestorUserName VariableName stringVar VariableName taltersentryroleaddgroupsrequestVar MethodName setRoleName VariableName stringVar VariableName taltersentryroleaddgroupsrequestVar MethodName setGroups VariableName setVar VariableName taltersentryroleaddgroupsrequestVar MethodName setComponent VariableName stringVar TryStatement try SimpleType TAlterSentryRoleAddGroupsResponse VariableName taltersentryroleaddgroupsresponseVar VariableName clientVar MethodName alter_sentry_role_add_groups VariableName taltersentryroleaddgroupsrequestVar Name Status MethodName throwIfNotOk VariableName taltersentryroleaddgroupsresponseVar MethodName getStatus CatchClause catch SimpleType TException VariableName texceptionVar ThrowStatement throw New new SimpleType SentryUserException VariableName stringVar VariableName e
SimpleType TAlterSentryRoleDeleteGroupsRequest VariableName taltersentryroledeletegroupsrequestVar New new SimpleType TAlterSentryRoleDeleteGroupsRequest VariableName taltersentryroledeletegroupsrequestVar MethodName setProtocol_version VariableName sentry_common_serviceConstants VariableName TSENTRY_SERVICE_V2 VariableName taltersentryroledeletegroupsrequestVar MethodName setRequestorUserName VariableName stringVar VariableName taltersentryroledeletegroupsrequestVar MethodName setRoleName VariableName stringVar VariableName taltersentryroledeletegroupsrequestVar MethodName setGroups VariableName setVar VariableName taltersentryroledeletegroupsrequestVar MethodName setComponent VariableName stringVar TryStatement try SimpleType TAlterSentryRoleDeleteGroupsResponse VariableName taltersentryroledeletegroupsresponseVar VariableName clientVar MethodName alter_sentry_role_delete_groups VariableName taltersentryroledeletegroupsrequestVar Name Status MethodName throwIfNotOk VariableName taltersentryroledeletegroupsresponseVar MethodName getStatus CatchClause catch SimpleType TException VariableName texceptionVar ThrowStatement throw New new SimpleType SentryUserException VariableName stringVar VariableName e
IfStatement if Operator ! MethodName hasSaveResultsToBundle ReturnStatement return NullLiteral null ReturnStatement return MethodName getOptionValue VariableName stringVar
SimpleType Type VariableName typeVar VariableName genericarraytypeVar MethodName getGenericComponentType ReturnStatement return MethodName createInfo VariableName typeVar
ReturnStatement return MethodName getNumberOfArguments Operator > NumberLiteral numberLiteral
ReturnStatement return New new SimpleType DefaultProjectionInformation VariableName classVar
ReturnStatement return Operator ! MethodName isTransient
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName EncryptionType VariableName DES_CBC_CRC
ReturnStatement return VariableName EncryptionType VariableName NULL
ReturnStatement return VariableName EncryptionType VariableName DES_CBC_MD5
TryStatement try SimpleType SecretKey VariableName secretkeyVar New new SimpleType SecretKeySpec VariableName byte[]Var StringLiteral stringLiteral SimpleType Mac VariableName macVar Name Mac MethodName getInstance StringLiteral stringLiteral VariableName macVar MethodName init VariableName secretkeyVar ReturnStatement return VariableName macVar MethodName doFinal VariableName byte[]Var CatchClause catch SimpleType GeneralSecurityException VariableName generalsecurityexceptionVar VariableName nsae MethodName printStackTrace ReturnStatement return NullLiteral null
ReturnStatement return VariableName decoderfactoryVar
IfStatement if VariableName string[]Var Operator == NullLiteral null Operator && MethodName getCategoryRestriction Operator != NullLiteral null SimpleType StringTokenizer VariableName stringtokenizerVar New new SimpleType StringTokenizer MethodName getCategoryRestriction StringLiteral stringLiteral VariableName string[]Var Operator = ArrayType String[] VariableName toker MethodName countTokens PrimitiveType int VariableName intVar NumberLiteral numberLiteral WhileStatement while VariableName toker MethodName hasMoreTokens VariableName string[]Var VariableName i Operator ++ Operator = VariableName toker MethodName nextToken ReturnStatement return VariableName string[]Var
ReturnStatement return VariableName booleanVar
PrimitiveType boolean VariableName booleanVar VariableName standardserviceregistrybuilderVar MethodName getSettings MethodName containsKey VariableName AvailableSettings VariableName JACC_ENABLED Modifier final SimpleType JaccService VariableName jaccserviceVar VariableName booleanVar New new SimpleType StandardJaccServiceImpl New new SimpleType DisabledJaccServiceImpl VariableName standardserviceregistrybuilderVar MethodName addService TypeLiteral class VariableName jaccserviceVar
VariableName metadatabuildingoptionsimplVar VariableName mappingDefaults VariableName stringVar Operator = VariableName stringVar ReturnStatement return ThisExpression this
VariableName metadatabuildingoptionsimplVar VariableName mappingDefaults VariableName stringVar Operator = VariableName stringVar ReturnStatement return ThisExpression this
ThisExpression this VariableName metadatabuildingoptionsimplVar VariableName implicitNamingStrategy Operator = VariableName implicitnamingstrategyVar ReturnStatement return ThisExpression this
ThisExpression this VariableName metadatabuildingoptionsimplVar VariableName physicalNamingStrategy Operator = VariableName physicalnamingstrategyVar ReturnStatement return ThisExpression this
ThisExpression this VariableName metadatabuildingoptionsimplVar VariableName sharedcachemodeVar Operator = VariableName sharedcachemodeVar ReturnStatement return ThisExpression this
ThisExpression this VariableName metadatabuildingoptionsimplVar VariableName mappingDefaults VariableName accesstypeVar Operator = VariableName accesstypeVar ReturnStatement return ThisExpression this
ThisExpression this VariableName metadatabuildingoptionsimplVar VariableName indexviewVar Operator = VariableName indexviewVar ReturnStatement return ThisExpression this
ThisExpression this VariableName metadatabuildingoptionsimplVar VariableName scanoptionsVar Operator = VariableName scanoptionsVar ReturnStatement return ThisExpression this
ThisExpression this VariableName metadatabuildingoptionsimplVar VariableName scanenvironmentVar Operator = VariableName scanenvironmentVar ReturnStatement return ThisExpression this
ThisExpression this VariableName metadatabuildingoptionsimplVar VariableName scannerSetting Operator = VariableName scannerVar ReturnStatement return ThisExpression this
ThisExpression this VariableName metadatabuildingoptionsimplVar VariableName archiveDescriptorFactory Operator = VariableName archivedescriptorfactoryVar ReturnStatement return ThisExpression this
VariableName metadatabuildingoptionsimplVar VariableName explicitDiscriminatorsForJoinedInheritanceSupported Operator = VariableName booleanVar ReturnStatement return ThisExpression this
VariableName metadatabuildingoptionsimplVar VariableName implicitDiscriminatorsForJoinedInheritanceSupported Operator = VariableName booleanVar ReturnStatement return ThisExpression this
VariableName metadatabuildingoptionsimplVar VariableName implicitlyForceDiscriminatorInSelect Operator = VariableName booleanVar ReturnStatement return ThisExpression this
VariableName metadatabuildingoptionsimplVar VariableName useNationalizedCharacterData Operator = VariableName booleanVar ReturnStatement return ThisExpression this
VariableName typecontributorVar MethodName contribute ThisExpression this VariableName metadatabuildingoptionsimplVar VariableName serviceRegistry ReturnStatement return ThisExpression this
IfStatement if VariableName metadatabuildingoptionsimplVar VariableName cacheRegionDefinitions Operator == NullLiteral null VariableName metadatabuildingoptionsimplVar VariableName cacheRegionDefinitions Operator = New new ParameterizedType ArrayList VariableName options.cacheRegionDefinitions MethodName add VariableName cacheregiondefinitionVar ReturnStatement return ThisExpression this
VariableName metadatabuildingoptionsimplVar VariableName classloaderVar Operator = VariableName classloaderVar ReturnStatement return ThisExpression this
IfStatement if VariableName listVar Operator == NullLiteral null VariableName listVar Operator = New new ParameterizedType ArrayList VariableName listVar MethodName add VariableName classloaderVar ReturnStatement return ThisExpression this
ThisExpression this VariableName strategyselectorbuilderVar MethodName addExplicitStrategyRegistration VariableName classVar VariableName classVar VariableName stringVar ReturnStatement return ThisExpression this
EnhancedForStatement for SimpleType StrategyRegistration VariableName strategyregistrationVar VariableName strategyregistrationproviderVar MethodName getStrategyRegistrations ThisExpression this VariableName strategyselectorbuilderVar MethodName addExplicitStrategyRegistration VariableName strategyRegistration ReturnStatement return ThisExpression this
ReturnStatement return VariableName sessionfactorybuilderVar
ReturnStatement return BooleanLiteral false
ReturnStatement return New new SimpleType QuerySyntaxException MethodName getOriginalMessage VariableName stringVar ThisExpression this
ReturnStatement return VariableName sharedsessionbuilderVar
ReturnStatement return VariableName sessionfactoryimplementorVar
ReturnStatement return VariableName sessionbuilderVar
ReturnStatement return New new SimpleType QueryParameterException SuperMethodInvocation super MethodName getOriginalMessage VariableName stringVar ThisExpression this
ThisExpression this VariableName booleanVar Operator = BooleanLiteral true ThisExpression this VariableName tVar Operator = VariableName tVar IfStatement if VariableName typeVar Operator == NullLiteral null ThisExpression this VariableName typeVar Operator = VariableName queryparameterbindingtyperesolverVar MethodName resolveParameterBindType VariableName tVar
ReturnStatement return BooleanLiteral false
ReturnStatement return BooleanLiteral false
ReturnStatement return StringLiteral stringLiteral
ReturnStatement return New new SimpleType QueryException MethodName getOriginalMessage VariableName stringVar ThisExpression this
VariableName booleanVar Operator = BooleanLiteral true ReturnStatement return ThisExpression this
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return StringLiteral stringLiteral
ReturnStatement return StringLiteral stringLiteral
SimpleType JSONObject VariableName jsonobjectVar NullLiteral null TryStatement try VariableName jsonobjectVar Operator = New new SimpleType JSONObject VariableName stringVar CatchClause catch SimpleType JSONException VariableName jsonexceptionVar ThrowStatement throw New new SimpleType MessageTransformationException VariableName e MethodName getMessage ReturnStatement return Name JSONFormatter MethodName fromJSON VariableName jsonobjectVar MethodName toString
SimpleType Gauge VariableName gaugeVar MethodName getOrCreate VariableName stringVar MethodName setGaugeValue VariableName gaugeVar VariableName longVar
SimpleType RichGauge VariableName richgaugeVar MethodName getOrCreate VariableName stringVar MethodName setRichGaugeValue VariableName richgaugeVar VariableName doubleVar VariableName doubleVar
MethodName getValueOperations MethodName set MethodName getMetricKey VariableName stringVar VariableName longVar
ReturnStatement return New new SimpleType StreamDefinitionResource VariableName streamdefinitionVar MethodName getName VariableName streamdefinitionVar MethodName getDefinition
ReturnStatement return New new SimpleType JobDefinition VariableName stringVar VariableName stringVar
ReturnStatement return New new SimpleType StreamDefinition VariableName stringVar VariableName stringVar
ReturnStatement return Name Paths MethodName build VariableName Paths VariableName MODULE_DEPLOYMENTS VariableName Paths VariableName ALLOCATED VariableName stringVar
SimpleType GeneralPath VariableName generalpathVar SimpleType GeneralPath VariableName generalpathVar MethodName clone MethodName fillPath VariableName intVar VariableName generalpathVar Operator = VariableName generalpathVar MethodName strokePath
ReturnStatement return VariableName listVar MethodName isEmpty
ReturnStatement return VariableName listVar MethodName isEmpty
IfStatement if VariableName floatVar Operator < NumberLiteral numberLiteral MethodName writeOperator StringLiteral stringLiteral IfStatement if Operator ! VariableName booleanVar MethodName stroke MethodName fillAndStroke
ReturnStatement return VariableName classVar MethodName cast VariableName mapVar MethodName get VariableName classVar
ReturnStatement return VariableName listVar MethodName iterator
ReturnStatement return VariableName booleanVar
VariableName morelikethisquerycontextVar MethodName setBoostTerms BooleanLiteral true VariableName morelikethisquerycontextVar MethodName setTermBoostFactor VariableName floatVar ReturnStatement return ThisExpression this
IfStatement if Operator ! MethodName isSpatialField VariableName stringVar ThrowStatement throw New new SimpleType AssertionFailure StringLiteral stringLiteral Operator + VariableName stringVar StringLiteral stringLiteral ReturnStatement return VariableName stringVar MethodName substring NumberLiteral numberLiteral VariableName stringVar MethodName indexOf VariableName stringVar
VariableName hsqueryVar MethodName getTimeoutManager MethodName start Modifier final ParameterizedType List VariableName listVar VariableName hsqueryVar MethodName queryEntityInfos SimpleType Loader VariableName loaderVar MethodName getLoader SimpleType List VariableName listVar VariableName loaderVar MethodName load VariableName listVar IfStatement if VariableName resulttransformerVar Operator == NullLiteral null Operator || VariableName loaderVar Instanceof instanceof SimpleType ProjectionLoader VariableName listVar Operator = VariableName resulttransformerVar MethodName transformList VariableName listVar VariableName hsqueryVar MethodName getTimeoutManager MethodName stop ReturnStatement return VariableName listVar
IfStatement if MethodName getLoader MethodName isSizeSafe ReturnStatement return VariableName hsqueryVar MethodName queryResultSize ThrowStatement throw VariableName logVar MethodName cannotGetResultSizeWithCriteriaAndRestriction VariableName criteriaVar MethodName toString
SimpleType ResourceDatabasePopulator VariableName resourcedatabasepopulatorVar New new SimpleType ResourceDatabasePopulator VariableName resourcedatabasepopulatorVar MethodName setScripts VariableName listVar MethodName toArray ArrayType Resource[] VariableName listVar MethodName size ReturnStatement return VariableName resourcedatabasepopulatorVar
ParameterizedType List VariableName listVar New new ParameterizedType ArrayList SimpleType WebExpressionVoter VariableName webexpressionvoterVar New new SimpleType WebExpressionVoter VariableName webexpressionvoterVar MethodName setExpressionHandler VariableName securityexpressionhandlerVar VariableName listVar MethodName add VariableName webexpressionvoterVar ReturnStatement return VariableName listVar
ParameterizedType List VariableName listVar New new ParameterizedType ArrayList VariableName listVar MethodName add New new SimpleType RoleVoter VariableName listVar MethodName add New new SimpleType AuthenticatedVoter ReturnStatement return VariableName listVar
ReturnStatement return VariableName booleanVar
SimpleType NodeState VariableName nodestateVar MethodName child VariableName nodestateVar Name PathUtils MethodName elements VariableName stringVar IfStatement if VariableName nodestateVar Operator == NullLiteral null Operator || Operator ! VariableName nodestateVar MethodName exists ReturnStatement return NumberLiteral numberLiteral IfStatement if Operator ! VariableName booleanVar PrimitiveType long VariableName longVar Name ApproximateCounter MethodName getCountSync VariableName nodestateVar IfStatement if VariableName syncCount Operator != Operator - NumberLiteral numberLiteral ReturnStatement return VariableName syncCount IfStatement if VariableName booleanVar ReturnStatement return MethodName getCombinedCount VariableName nodestateVar VariableName stringVar VariableName nodestateVar VariableName booleanVar ReturnStatement return MethodName getEstimatedNodeCountOld VariableName nodestateVar VariableName nodestateVar VariableName stringVar VariableName booleanVar
ReturnStatement return ThisExpression this
ReturnStatement return Name Collections MethodName emptySet
IfStatement if VariableName atomicreferenceVar MethodName get Operator == NullLiteral null Name LOG MethodName debug StringLiteral stringLiteral ReturnStatement return IfStatement if VariableName lockVar MethodName tryLock TryStatement try MethodName doFlush VariableName flusherVar VariableName lockVar MethodName unlock Name LOG MethodName debug StringLiteral stringLiteral
SimpleType TarWriter VariableName tarwriterVar VariableName tarwriterVar MethodName createNextGeneration IfStatement if VariableName tarwriterVar Operator == VariableName tarwriterVar ReturnStatement return VariableName nodeVar Operator = New new SimpleType Node Name TarReader MethodName open VariableName tarwriterVar MethodName getFile VariableName booleanVar VariableName iomonitorVar VariableName nodeVar VariableName tarwriterVar Operator = VariableName tarwriterVar
ReturnStatement return VariableName gcjournalVar MethodName read MethodName getRepoSize
IfStatement if Operator ! MethodName getGarbage MethodName exists Operator || Name FileUtils MethodName sizeOf MethodName getGarbage Operator == NumberLiteral numberLiteral Name FileUtils MethodName deleteDirectory VariableName fileVar
ReturnStatement return SimpleType PlanResult VariableName indexplanVar MethodName getAttribute VariableName stringVar
ReturnStatement return New new SimpleType MemoryNodeBuilder ThisExpression this
ThrowStatement throw MethodName unsupported
Modifier final SimpleType String VariableName stringVar MethodName getRelativeVersionHistoryPath VariableName stringVar Modifier final SimpleType NodeState VariableName nodestateVar MethodName getVersionHistoryNodeState VariableName nodestateVar VariableName stringVar Modifier final SimpleType Calendar VariableName calendarVar MethodName getVersionHistoryLastModified VariableName nodestateVar IfStatement if VariableName nodestateVar MethodName exists Operator && VariableName calendarVar MethodName after VariableName calendarVar Operator || VariableName calendarVar MethodName getTimeInMillis Operator == NumberLiteral numberLiteral Name NodeStateCopier MethodName builder MethodName include VariableName stringVar MethodName merge VariableName VERSION_STORE_PATH MethodName copy VariableName nodestateVar VariableName nodebuilderVar ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
ReturnStatement return VariableName booleanVar
ReturnStatement return ThisExpression this VariableName stringVar MethodName equals VariableName stringVar
ThisExpression this VariableName cleancommitlogserviceVar MethodName excuteDeleteFilesManualy
ReturnStatement return VariableName jwtaccesstokenconverterVar MethodName extractAccessToken VariableName stringVar VariableName jwtaccesstokenconverterVar MethodName decode VariableName stringVar
IfStatement if Operator ! VariableName expressiontreeVar Instanceof instanceof SimpleType AssignmentTree ReturnStatement return BooleanLiteral false SimpleType ExpressionTree VariableName expressiontreeVar SimpleType AssignmentTree VariableName expressiontreeVar MethodName getExpression ReturnStatement return VariableName expressiontreeVar Instanceof instanceof SimpleType NewArrayTree Operator && SimpleType NewArrayTree VariableName expressiontreeVar MethodName getType Operator == NullLiteral null
TryStatement try VariableName plugincachesyncutilVar MethodName handleCacheUpdate VariableName pathsupdateVar MethodName notifySentry VariableName pathsupdateVar CatchClause catch SimpleType SentryPluginException VariableName sentrypluginexceptionVar Name LOGGER MethodName error StringLiteral stringLiteral VariableName e
MethodName applyLocal VariableName pathsupdateVar MethodName notifySentry VariableName pathsupdateVar
ReturnStatement return VariableName tpermissionsupdateVar
ReturnStatement return VariableName tpathsupdateVar
ReturnStatement return VariableName jobconfVar MethodName getKeepTaskFilesPattern Operator != NullLiteral null Operator || VariableName jobconfVar MethodName getKeepFailedTaskFiles
ReturnStatement return BooleanLiteral true
ReturnStatement return VariableName codeVar Operator == VariableName Code VariableName OK
ReturnStatement return VariableName codeVar Operator == VariableName Code VariableName NODEEXISTS
ReturnStatement return VariableName codeVar Operator == VariableName Code VariableName NONODE
VariableName metricsregistryVar MethodName snapshot VariableName metricsrecordbuilderVar VariableName booleanVar
ReturnStatement return ThisExpression this VariableName stringVar
ReturnStatement return ThisExpression this VariableName stringVar
AssertStatement assert ThisExpression this VariableName object[]Var Operator != NullLiteral null StringLiteral stringLiteral AssertStatement assert VariableName intVar Operator >= NumberLiteral numberLiteral Operator && VariableName intVar Operator * NumberLiteral numberLiteral Operator + NumberLiteral numberLiteral Operator < VariableName object[]Var VariableName length StringLiteral stringLiteral SimpleType BlockInfo VariableName blockinfoVar SimpleType BlockInfo VariableName object[]Var VariableName intVar Operator * NumberLiteral numberLiteral Operator + NumberLiteral numberLiteral VariableName object[]Var VariableName intVar Operator * NumberLiteral numberLiteral Operator + NumberLiteral numberLiteral Operator = VariableName blockinfoVar ReturnStatement return VariableName blockinfoVar
AssertStatement assert ThisExpression this VariableName object[]Var Operator != NullLiteral null StringLiteral stringLiteral AssertStatement assert VariableName intVar Operator >= NumberLiteral numberLiteral Operator && VariableName intVar Operator * NumberLiteral numberLiteral Operator + NumberLiteral numberLiteral Operator < VariableName object[]Var VariableName length StringLiteral stringLiteral SimpleType BlockInfo VariableName blockinfoVar SimpleType BlockInfo VariableName object[]Var VariableName intVar Operator * NumberLiteral numberLiteral Operator + NumberLiteral numberLiteral VariableName object[]Var VariableName intVar Operator * NumberLiteral numberLiteral Operator + NumberLiteral numberLiteral Operator = VariableName blockinfoVar ReturnStatement return VariableName blockinfoVar
ReturnStatement return StringLiteral stringLiteral Operator + Name UUID MethodName randomUUID
MethodName setLayoutVersion VariableName propertiesVar VariableName storagedirectoryVar MethodName setNamespaceID VariableName propertiesVar VariableName storagedirectoryVar MethodName setcTime VariableName propertiesVar VariableName storagedirectoryVar SimpleType String VariableName stringVar VariableName propertiesVar MethodName getProperty StringLiteral stringLiteral MethodName setBlockPoolID VariableName storagedirectoryVar MethodName getRoot VariableName stringVar
IfStatement if VariableName logfilehandlerVar Operator != NullLiteral null TryStatement try VariableName verificationLog.logs MethodName roll CatchClause catch SimpleType IOException VariableName ioexceptionVar Name LOG MethodName warn StringLiteral stringLiteral VariableName ex VariableName logfilehandlerVar MethodName close
IfStatement if VariableName booleanVar Operator || VariableName exportedblockkeysVar Operator == NullLiteral null ReturnStatement return Name LOG MethodName info StringLiteral stringLiteral MethodName removeExpiredKeys ThisExpression this VariableName blockkeyVar Operator = VariableName exportedblockkeysVar MethodName getCurrentKey ArrayType BlockKey[] VariableName blockkey[]Var VariableName exportedblockkeysVar MethodName getAllKeys ForStatement for PrimitiveType int VariableName intVar NumberLiteral numberLiteral VariableName i Operator < VariableName blockkey[]Var VariableName length VariableName i Operator ++ IfStatement if VariableName blockkey[]Var VariableName i Operator == NullLiteral null ContinueStatement continue ThisExpression this VariableName mapVar MethodName put VariableName blockkey[]Var VariableName i MethodName getKeyId VariableName blockkey[]Var VariableName i
IfStatement if VariableName longVar Operator < NumberLiteral numberLiteral ThrowStatement throw New new SimpleType HadoopIllegalArgumentException VariableName longVar Operator + StringLiteral stringLiteral ThisExpression this VariableName longVar Operator = VariableName longVar Modifier final PrimitiveType long VariableName longVar VariableName longVar Operator / NumberLiteral numberLiteral ThisExpression this VariableName longVar Operator = VariableName longVar Operator < VariableName longVar VariableName longVar VariableName longVar
TryStatement try ReturnStatement return New new SimpleType BatchedCachePoolEntries VariableName clientnamenodeprotocolpbVar MethodName listCachePools NullLiteral null Name ListCachePoolsRequestProto MethodName newBuilder MethodName setPrevPoolName VariableName stringVar MethodName build CatchClause catch SimpleType ServiceException VariableName serviceexceptionVar ThrowStatement throw Name ProtobufHelper MethodName getRemoteException VariableName e
ReturnStatement return VariableName locatedblocksVar MethodName isUnderConstruction
IfStatement if VariableName mapVar Operator == NullLiteral null ReturnStatement return MethodName initServiceData ThisExpression this VariableName mapVar MethodName putAll VariableName mapVar
MethodName startRpcServer
MethodName stopRpcServer
ReturnStatement return VariableName booleanVar Operator && VariableName intVar Operator >= VariableName intVar
EnhancedForStatement for SimpleType HeldContainer VariableName heldcontainerVar VariableName mapVar MethodName values VariableName heldContainer MethodName resetLocalityMatchLevel SynchronizedStatement synchronized VariableName delayedcontainermanagerVar VariableName delayedcontainermanagerVar MethodName notify
VariableName threadVar MethodName start
VariableName threadVar Operator = New new SimpleType Thread New new SimpleType TezSubTaskRunner StringLiteral stringLiteral VariableName threadVar MethodName start
ParameterizedType List VariableName listVar MethodName createAuditEvents VariableName collectionVar EnhancedForStatement for SimpleType AuthzAuditEvent VariableName authzauditeventVar VariableName listVar MethodName addAuthzAuditEvent VariableName auditEvent
ReturnStatement return VariableName pcollectionVar MethodName apply StringLiteral stringLiteral Name MapElements MethodName via New new ParameterizedType SimpleFunction SimpleType V MethodName apply ParameterizedType KV VariableName kvVar ReturnStatement return VariableName kvVar MethodName getValue
ReturnStatement return VariableName pcollectionVar MethodName apply StringLiteral stringLiteral Name MapElements MethodName via New new ParameterizedType SimpleFunction SimpleType K MethodName apply ParameterizedType KV VariableName kvVar ReturnStatement return VariableName kvVar MethodName getKey
ReturnStatement return VariableName pcollectionVar MethodName apply StringLiteral stringLiteral Name ParDo MethodName of New new ParameterizedType AddTimestampsDoFn VariableName serializablefunctionVar VariableName durationVar
ReturnStatement return VariableName pcollectionVar MethodName apply StringLiteral stringLiteral Name MapElements MethodName via New new ParameterizedType SimpleFunction ParameterizedType KV MethodName apply ParameterizedType KV VariableName kvVar ReturnStatement return Name KV MethodName of VariableName kvVar MethodName getValue VariableName kvVar MethodName getKey
ReturnStatement return VariableName listVar MethodName size
ReturnStatement return VariableName listVar MethodName size
IfStatement if VariableName resourceidVar MethodName isDirectory ReturnStatement return StringLiteral stringLiteral ReturnStatement return MethodName firstNonNull VariableName resourceidVar MethodName getFilename StringLiteral stringLiteral
ReturnStatement return New new SimpleType SimpleQueryTransform VariableName stringVar
MethodName evaluateBundle VariableName appliedptransformVar VariableName committedbundleVar VariableName completioncallbackVar
ReturnStatement return Name Collections MethodName singletonList ThisExpression this
ReturnStatement return Name Collections MethodName singletonList ThisExpression this
ReturnStatement return Name Collections MethodName singletonList ThisExpression this
ParameterizedType WindowingStrategy VariableName windowingstrategyVar VariableName pcollectionVar MethodName getWindowingStrategy ReturnStatement return VariableName pcollectionVar MethodName apply New new ParameterizedType GroupByKeyOnly MethodName apply New new ParameterizedType SortValuesByTimestamp MethodName apply New new ParameterizedType GroupAlsoByWindow VariableName windowingstrategyVar MethodName setWindowingStrategyInternal VariableName groupbykeyVar MethodName updateWindowingStrategy VariableName windowingstrategyVar
ParameterizedType Set VariableName setVar New new ParameterizedType HashSet EnhancedForStatement for SimpleType W VariableName wVar VariableName collectionVar QualifiedType ReduceFn VariableName reducefnVar VariableName reducefncontextfactoryVar MethodName base VariableName window VariableName StateStyle VariableName DIRECT IfStatement if Operator ! VariableName triggerstatemachinerunnerVar MethodName isClosed VariableName directContext MethodName state VariableName setVar MethodName add VariableName window ReturnStatement return VariableName setVar
TryStatement try VariableName interpreteroutputVar MethodName setType VariableName InterpreterResult VariableName Type VariableName HTML VariableName interpreteroutputVar MethodName writeResource StringLiteral stringLiteral CatchClause catch SimpleType IOException VariableName ioexceptionVar VariableName loggerVar MethodName error StringLiteral stringLiteral VariableName e
ReturnStatement return VariableName gsonVar MethodName toJson ThisExpression this TypeLiteral class
SimpleType ClientUpgradeRequest VariableName clientupgraderequestVar New new SimpleType ClientUpgradeRequest VariableName clientupgraderequestVar MethodName setCookies Name Lists MethodName newArrayList New new SimpleType HttpCookie VariableName ZeppelinHubRepo VariableName TOKEN_HEADER VariableName stringVar ReturnStatement return VariableName clientupgraderequestVar
ReturnStatement return ThisExpression this VariableName stringVar Operator != NullLiteral null
ReturnStatement return VariableName gsonVar MethodName toJson ThisExpression this
Name Assert MethodName notNull VariableName kVar StringLiteral stringLiteral Name Assert MethodName notNull VariableName pointVar StringLiteral stringLiteral Name Assert MethodName notNull VariableName vVar StringLiteral stringLiteral ReturnStatement return MethodName createMono VariableName connection VariableName connection MethodName geoAdd MethodName rawKey VariableName kVar VariableName pointVar MethodName rawValue VariableName vVar
Name Assert MethodName notNull VariableName kVar StringLiteral stringLiteral Name Assert MethodName notNull VariableName geolocationVar StringLiteral stringLiteral ReturnStatement return MethodName createMono VariableName connection VariableName connection MethodName geoAdd MethodName rawKey VariableName kVar New new ParameterizedType GeoLocation MethodName rawValue VariableName geolocationVar MethodName getName VariableName geolocationVar MethodName getPoint
Name Assert MethodName notNull VariableName kVar StringLiteral stringLiteral Name Assert MethodName notNull VariableName mapVar StringLiteral stringLiteral ReturnStatement return MethodName createMono VariableName connection ParameterizedType Mono VariableName monoVar Name Flux MethodName fromIterable VariableName mapVar MethodName entrySet MethodName iterator MethodName map VariableName entry New new ParameterizedType GeoLocation MethodName rawValue VariableName entry MethodName getKey VariableName entry MethodName getValue MethodName collectList ReturnStatement return VariableName serializedList MethodName flatMap VariableName list VariableName connection MethodName geoAdd MethodName rawKey VariableName kVar VariableName list
Name Assert MethodName notNull VariableName kVar StringLiteral stringLiteral Name Assert MethodName notNull VariableName iterableVar StringLiteral stringLiteral ReturnStatement return MethodName createMono VariableName connection ParameterizedType Mono VariableName monoVar Name Flux MethodName fromIterable VariableName iterableVar MethodName map VariableName location New new ParameterizedType GeoLocation MethodName rawValue VariableName location MethodName getName VariableName location MethodName getPoint MethodName collectList ReturnStatement return VariableName serializedList MethodName flatMap VariableName list VariableName connection MethodName geoAdd MethodName rawKey VariableName kVar VariableName list
Name Assert MethodName notNull VariableName kVar StringLiteral stringLiteral Name Assert MethodName notNull VariableName publisherVar StringLiteral stringLiteral ReturnStatement return MethodName createFlux VariableName connection Name Flux MethodName from VariableName publisherVar MethodName map VariableName locationList VariableName locationList MethodName stream MethodName map VariableName location New new ParameterizedType GeoLocation MethodName rawValue VariableName location MethodName getName VariableName location MethodName getPoint MethodName collect Name Collectors MethodName toList MethodName flatMap VariableName list VariableName connection MethodName geoAdd MethodName rawKey VariableName kVar VariableName list
Name Assert MethodName notNull VariableName kVar StringLiteral stringLiteral Name Assert MethodName notNull VariableName vVar StringLiteral stringLiteral Name Assert MethodName notNull VariableName vVar StringLiteral stringLiteral ReturnStatement return MethodName createMono VariableName connection VariableName connection MethodName geoDist MethodName rawKey VariableName kVar MethodName rawValue VariableName vVar MethodName rawValue VariableName vVar
Name Assert MethodName notNull VariableName kVar StringLiteral stringLiteral Name Assert MethodName notNull VariableName vVar StringLiteral stringLiteral Name Assert MethodName notNull VariableName vVar StringLiteral stringLiteral Name Assert MethodName notNull VariableName metricVar StringLiteral stringLiteral ReturnStatement return MethodName createMono VariableName connection VariableName connection MethodName geoDist MethodName rawKey VariableName kVar MethodName rawValue VariableName vVar MethodName rawValue VariableName vVar VariableName metricVar
Name Assert MethodName notNull VariableName kVar StringLiteral stringLiteral Name Assert MethodName notNull VariableName vVar StringLiteral stringLiteral ReturnStatement return MethodName createMono VariableName connection VariableName connection MethodName geoHash MethodName rawKey VariableName kVar MethodName rawValue VariableName vVar
Name Assert MethodName notNull VariableName kVar StringLiteral stringLiteral Name Assert MethodName notEmpty VariableName vVar StringLiteral stringLiteral Name Assert MethodName noNullElements VariableName vVar StringLiteral stringLiteral ReturnStatement return MethodName createMono VariableName connection Name Flux MethodName fromArray VariableName vVar MethodName map MethodName collectList MethodName flatMap VariableName serialized VariableName connection MethodName geoHash MethodName rawKey VariableName kVar VariableName serialized
Name Assert MethodName notNull VariableName kVar StringLiteral stringLiteral Name Assert MethodName notNull VariableName vVar StringLiteral stringLiteral ReturnStatement return MethodName createMono VariableName connection VariableName connection MethodName geoPos MethodName rawKey VariableName kVar MethodName rawValue VariableName vVar
Name Assert MethodName notNull VariableName kVar StringLiteral stringLiteral Name Assert MethodName notEmpty VariableName vVar StringLiteral stringLiteral Name Assert MethodName noNullElements VariableName vVar StringLiteral stringLiteral ReturnStatement return MethodName createMono VariableName connection Name Flux MethodName fromArray VariableName vVar MethodName map MethodName collectList MethodName flatMap VariableName serialized VariableName connection MethodName geoPos MethodName rawKey VariableName kVar VariableName serialized
Name Assert MethodName notNull VariableName kVar StringLiteral stringLiteral Name Assert MethodName notNull VariableName circleVar StringLiteral stringLiteral ReturnStatement return MethodName createFlux VariableName connection VariableName connection MethodName geoRadius MethodName rawKey VariableName kVar VariableName circleVar MethodName map
Name Assert MethodName notNull VariableName kVar StringLiteral stringLiteral Name Assert MethodName notNull VariableName circleVar StringLiteral stringLiteral Name Assert MethodName notNull VariableName georadiuscommandargsVar StringLiteral stringLiteral ReturnStatement return MethodName createFlux VariableName connection VariableName connection MethodName geoRadius MethodName rawKey VariableName kVar VariableName circleVar VariableName georadiuscommandargsVar MethodName map
Name Assert MethodName notNull VariableName kVar StringLiteral stringLiteral Name Assert MethodName notNull VariableName vVar StringLiteral stringLiteral ReturnStatement return MethodName createFlux VariableName connection VariableName connection MethodName geoRadiusByMember MethodName rawKey VariableName kVar MethodName rawValue VariableName vVar New new SimpleType Distance VariableName doubleVar MethodName map
Name Assert MethodName notNull VariableName kVar StringLiteral stringLiteral Name Assert MethodName notNull VariableName vVar StringLiteral stringLiteral Name Assert MethodName notNull VariableName distanceVar StringLiteral stringLiteral ReturnStatement return MethodName createFlux VariableName connection VariableName connection MethodName geoRadiusByMember MethodName rawKey VariableName kVar MethodName rawValue VariableName vVar VariableName distanceVar MethodName map
Name Assert MethodName notNull VariableName kVar StringLiteral stringLiteral Name Assert MethodName notNull VariableName vVar StringLiteral stringLiteral Name Assert MethodName notNull VariableName distanceVar StringLiteral stringLiteral Name Assert MethodName notNull VariableName georadiuscommandargsVar StringLiteral stringLiteral ReturnStatement return MethodName createFlux VariableName connection VariableName connection MethodName geoRadiusByMember MethodName rawKey VariableName kVar MethodName rawValue VariableName vVar VariableName distanceVar VariableName georadiuscommandargsVar MethodName map
Name Assert MethodName notNull VariableName kVar StringLiteral stringLiteral Name Assert MethodName notEmpty VariableName vVar StringLiteral stringLiteral Name Assert MethodName noNullElements VariableName vVar StringLiteral stringLiteral ReturnStatement return VariableName reactiveredistemplateVar MethodName createMono VariableName connection Name Flux MethodName fromArray VariableName vVar MethodName map MethodName collectList MethodName flatMap VariableName serialized VariableName connection MethodName zSetCommands MethodName zRem MethodName rawKey VariableName kVar VariableName serialized
MethodName createOrUpdateIndexes VariableName objectVar VariableName iterableVar VariableName IndexWriteMode VariableName UPDATE
ArrayType byte[] VariableName byte[]Var MethodName rawKey VariableName kVar ArrayType byte[] VariableName byte[]Var MethodName rawValue VariableName mVar ReturnStatement return MethodName execute VariableName connection VariableName connection MethodName geoAdd VariableName byte[]Var VariableName pointVar VariableName byte[]Var BooleanLiteral true
ArrayType byte[] VariableName byte[]Var MethodName rawKey VariableName kVar ParameterizedType Map VariableName mapVar New new ParameterizedType HashMap EnhancedForStatement for SimpleType M VariableName mVar VariableName mapVar MethodName keySet ArrayType byte[] VariableName byte[]Var MethodName rawValue VariableName member VariableName mapVar MethodName put VariableName rawMember VariableName mapVar MethodName get VariableName member ReturnStatement return MethodName execute VariableName connection VariableName connection MethodName geoAdd VariableName byte[]Var VariableName mapVar BooleanLiteral true
ArrayType byte[] VariableName byte[]Var MethodName rawKey VariableName kVar ArrayType byte[] VariableName byte[]Var MethodName rawValue VariableName mVar ArrayType byte[] VariableName byte[]Var MethodName rawValue VariableName mVar ReturnStatement return MethodName execute VariableName connection VariableName connection MethodName geoDist VariableName byte[]Var VariableName byte[]Var VariableName byte[]Var BooleanLiteral true
ArrayType byte[] VariableName byte[]Var MethodName rawKey VariableName kVar ArrayType byte[] VariableName byte[]Var MethodName rawValue VariableName mVar ArrayType byte[] VariableName byte[]Var MethodName rawValue VariableName mVar ReturnStatement return MethodName execute VariableName connection VariableName connection MethodName geoDist VariableName byte[]Var VariableName byte[]Var VariableName byte[]Var VariableName metricVar BooleanLiteral true
ArrayType byte[] VariableName byte[]Var MethodName rawKey VariableName kVar ArrayType byte[][] VariableName byte[][]Var MethodName rawValues VariableName mVar ReturnStatement return MethodName execute VariableName connection VariableName connection MethodName geoHash VariableName byte[]Var VariableName byte[][]Var BooleanLiteral true
ArrayType byte[] VariableName byte[]Var MethodName rawKey VariableName kVar ArrayType byte[][] VariableName byte[][]Var MethodName rawValues VariableName mVar ReturnStatement return MethodName execute VariableName connection VariableName connection MethodName geoPos VariableName byte[]Var VariableName byte[][]Var BooleanLiteral true
ArrayType byte[] VariableName byte[]Var MethodName rawKey VariableName kVar ParameterizedType GeoResults VariableName georesultsVar MethodName execute VariableName connection VariableName connection MethodName geoRadius VariableName byte[]Var VariableName circleVar BooleanLiteral true ReturnStatement return MethodName deserializeGeoResults VariableName georesultsVar
ArrayType byte[] VariableName byte[]Var MethodName rawKey VariableName kVar ParameterizedType GeoResults VariableName georesultsVar MethodName execute VariableName connection VariableName connection MethodName geoRadius VariableName byte[]Var VariableName circleVar VariableName georadiuscommandargsVar BooleanLiteral true ReturnStatement return MethodName deserializeGeoResults VariableName georesultsVar
ArrayType byte[] VariableName byte[]Var MethodName rawKey VariableName kVar ArrayType byte[] VariableName byte[]Var MethodName rawValue VariableName mVar ParameterizedType GeoResults VariableName georesultsVar MethodName execute VariableName connection VariableName connection MethodName geoRadiusByMember VariableName byte[]Var VariableName byte[]Var VariableName doubleVar BooleanLiteral true ReturnStatement return MethodName deserializeGeoResults VariableName georesultsVar
ArrayType byte[] VariableName byte[]Var MethodName rawKey VariableName kVar ArrayType byte[] VariableName byte[]Var MethodName rawValue VariableName mVar ParameterizedType GeoResults VariableName georesultsVar MethodName execute VariableName connection VariableName connection MethodName geoRadiusByMember VariableName byte[]Var VariableName byte[]Var VariableName distanceVar BooleanLiteral true ReturnStatement return MethodName deserializeGeoResults VariableName georesultsVar
ArrayType byte[] VariableName byte[]Var MethodName rawKey VariableName kVar ArrayType byte[] VariableName byte[]Var MethodName rawValue VariableName mVar ParameterizedType GeoResults VariableName georesultsVar MethodName execute VariableName connection VariableName connection MethodName geoRadiusByMember VariableName byte[]Var VariableName byte[]Var VariableName distanceVar VariableName georadiuscommandargsVar BooleanLiteral true ReturnStatement return MethodName deserializeGeoResults VariableName georesultsVar
ArrayType byte[] VariableName byte[]Var MethodName rawKey VariableName kVar ArrayType byte[][] VariableName byte[][]Var MethodName rawValues VariableName mVar ReturnStatement return MethodName execute VariableName connection VariableName connection MethodName zRem VariableName byte[]Var VariableName byte[][]Var BooleanLiteral true
Name Assert MethodName notNull VariableName redisconnectionfactoryVar StringLiteral stringLiteral ReturnStatement return New new SimpleType RedisCacheManager New new SimpleType DefaultRedisCacheWriter VariableName redisconnectionfactoryVar Name RedisCacheConfiguration MethodName defaultCacheConfig
ReturnStatement return MethodName builder MethodName build
ReturnStatement return VariableName booleanVar
ReturnStatement return MethodName builder MethodName build
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
SimpleType ProjectionDefinitionConfiguration VariableName projectiondefinitionconfigurationVar New new SimpleType ProjectionDefinitionConfiguration EnhancedForStatement for ParameterizedType Class VariableName classVar MethodName getProjections MethodName repositories VariableName projectiondefinitionconfigurationVar MethodName addProjection VariableName projection SimpleType RepositoryRestConfiguration VariableName repositoryrestconfigurationVar New new SimpleType RepositoryRestConfiguration VariableName projectiondefinitionconfigurationVar MethodName metadataConfiguration MethodName enumTranslator VariableName repositoryrestconfigurerdelegateVar MethodName configureRepositoryRestConfiguration VariableName repositoryrestconfigurationVar ReturnStatement return VariableName repositoryrestconfigurationVar
SynchronizedStatement synchronized VariableName listVar VariableName listVar MethodName remove VariableName settingseditorlistenerVar
SynchronizedStatement synchronized VariableName listVar VariableName listVar MethodName remove VariableName ivyxmlpathlistenerVar
SynchronizedStatement synchronized VariableName listVar VariableName listVar MethodName remove VariableName conftablelistenerVar
IfStatement if VariableName serviceVar MethodName getToken Operator == NullLiteral null ReturnStatement return BooleanLiteral false ReturnStatement return BooleanLiteral true
ReturnStatement return Operator ! VariableName aerospikeclientVar MethodName isConnected
ThrowStatement throw New new SimpleType UnsupportedOperationException StringLiteral stringLiteral
ReturnStatement return BooleanLiteral false
ReturnStatement return VariableName couchdbconnectorVar Operator == NullLiteral null
ReturnStatement return VariableName redisconnectionVar Operator != NullLiteral null
ReturnStatement return VariableName jedisVar Operator != NullLiteral null Operator && VariableName jedisVar MethodName isConnected
TryStatement try VariableName mongoclientVar MethodName getConnector MethodName getDBPortPool VariableName mongoclientVar MethodName getAddress MethodName get MethodName ensureOpen CatchClause catch SimpleType Exception VariableName exceptionVar ReturnStatement return BooleanLiteral false ReturnStatement return BooleanLiteral true
TryStatement try ReturnStatement return Operator ! VariableName sessionVar MethodName isClosed CatchClause catch SimpleType DriverException VariableName driverexceptionVar ThrowStatement throw New new SimpleType RuntimeException StringLiteral stringLiteral VariableName ex
ThrowStatement throw New new SimpleType UnsupportedOperationException StringLiteral stringLiteral
ReturnStatement return BooleanLiteral false
ReturnStatement return StringLiteral stringLiteral Operator + VariableName integerVar
ReturnStatement return VariableName treemapVar MethodName entrySet
ReturnStatement return VariableName stringVar Operator + CharacterLiteral charLiteral Name System MethodName currentTimeMillis VariableName TMP_EXTENSION
VariableName cacheVar MethodName put VariableName objectVar VariableName objectVar
VariableName cacheVar MethodName asMap MethodName putAll VariableName mapVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return MethodName toBoolean VariableName objectVar VariableName Boolean VariableName FALSE VariableName Boolean VariableName TRUE
ThisExpression this VariableName charsetVar Operator = VariableName charsetVar ReturnStatement return ThisExpression this
SimpleType Throwable VariableName throwableVar VariableName exceptionVar MethodName getCause IfStatement if VariableName throwableVar Instanceof instanceof SimpleType JexlException ReturnStatement return SimpleType JexlException VariableName throwableVar IfStatement if VariableName throwableVar Instanceof instanceof SimpleType InterruptedException VariableName booleanVar Operator = BooleanLiteral true ReturnStatement return New new SimpleType Cancel VariableName jexlnodeVar ReturnStatement return New new SimpleType JexlException VariableName jexlnodeVar VariableName stringVar VariableName exceptionVar
ReturnStatement return VariableName method Operator == NullLiteral null NullLiteral null VariableName method MethodName invoke VariableName objectVar ArrayType Object[] NullLiteral null
ArrayType Object[] VariableName object[]Var ArrayInitializer arrayInitializer IfStatement if VariableName method Operator != NullLiteral null VariableName method MethodName invoke VariableName objectVar VariableName object[]Var ReturnStatement return VariableName objectVar
ReturnStatement return VariableName method Operator == NullLiteral null NullLiteral null VariableName method MethodName invoke VariableName objectVar ArrayType Object[] NullLiteral null
Modifier final ParameterizedType Map VariableName mapVar ParameterizedType Map VariableName objectVar ReturnStatement return VariableName mapVar MethodName get VariableName objectVar
ArrayType Object[] VariableName object[]Var ArrayInitializer arrayInitializer ReturnStatement return VariableName method Operator == NullLiteral null NullLiteral null VariableName method MethodName invoke VariableName objectVar VariableName object[]Var
Modifier final ParameterizedType Map VariableName mapVar ParameterizedType Map VariableName objectVar VariableName mapVar MethodName put VariableName objectVar VariableName objectVar ReturnStatement return VariableName objectVar
ReturnStatement return VariableName stringbuilderVar MethodName toString
ReturnStatement return Name FeatureMapUtil MethodName isFeatureMap SimpleType EStructuralFeature VariableName objectVar
MethodName createDocumentRoot
ReturnStatement return New new SimpleType KStreamFilterProcessor
ReturnStatement return New new SimpleType KStreamBranchProcessor
ReturnStatement return ThisExpression this VariableName patternVar
ReturnStatement return ThisExpression this VariableName subscriptionstateVar MethodName assignedPartitions
IfStatement if MethodName hasFatalError ReturnStatement return BooleanLiteral false ReturnStatement return Operator ! MethodName isTransactional Operator || VariableName setVar MethodName contains VariableName topicpartitionVar
ReturnStatement return VariableName stateVar Operator == VariableName State VariableName ABORTABLE_ERROR Operator || VariableName stateVar Operator == VariableName State VariableName FATAL_ERROR
ReturnStatement return VariableName produceridandepochVar
ParameterizedType Deque VariableName dequeVar VariableName mapVar MethodName get VariableName stringVar ReturnStatement return VariableName dequeVar Operator == NullLiteral null NumberLiteral numberLiteral VariableName dequeVar MethodName size
PrimitiveType int VariableName intVar NumberLiteral numberLiteral EnhancedForStatement for ParameterizedType Deque VariableName dequeVar ThisExpression this VariableName mapVar MethodName values VariableName intVar Operator += VariableName deque MethodName size ReturnStatement return VariableName intVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName mapVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName mapVar
ReturnStatement return VariableName mapVar
ReturnStatement return VariableName mapVar
ReturnStatement return VariableName mapVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName mapVar
ReturnStatement return VariableName kafkafutureVar MethodName thenApply New new ParameterizedType Function ParameterizedType Collection MethodName apply ParameterizedType Map VariableName mapVar ReturnStatement return VariableName mapVar MethodName values
ReturnStatement return VariableName mapVar
ReturnStatement return VariableName kafkafutureVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName resourcetypeVar MethodName isUnknown
ReturnStatement return New new SimpleType Quota VariableName doubleVar BooleanLiteral true
ReturnStatement return New new SimpleType Quota VariableName doubleVar BooleanLiteral false
ReturnStatement return VariableName memoryrecordsVar Operator != NullLiteral null VariableName memoryrecordsVar MethodName sizeInBytes MethodName estimatedBytesWritten
ReturnStatement return VariableName intVar Operator + Name DefaultRecord MethodName recordSizeUpperBound VariableName bytebufferVar VariableName bytebufferVar VariableName header[]Var
ReturnStatement return VariableName resourceVar MethodName isUnknown Operator || VariableName accesscontrolentryVar MethodName isUnknown
IfStatement if VariableName longVar Operator > VariableName Integer VariableName MAX_VALUE ReturnStatement return NumberLiteral numberLiteral Operator - Name Integer MethodName numberOfLeadingZeros PrimitiveType int VariableName longVar Operator >> NumberLiteral numberLiteral ReturnStatement return NumberLiteral numberLiteral Operator - Name Integer MethodName numberOfLeadingZeros PrimitiveType int VariableName longVar
ReturnStatement return New new SimpleType Quantifier VariableName consumingstrategyVar VariableName QuantifierProperty VariableName LOOPING
ReturnStatement return New new ParameterizedType FlinkKafkaConsumer011 VariableName stringVar VariableName deserializationschemaVar VariableName propertiesVar
ReturnStatement return New new ParameterizedType FlinkKafkaConsumer011 VariableName stringVar VariableName deserializationschemaVar VariableName propertiesVar
ReturnStatement return New new ParameterizedType FlinkKafkaConsumer011 VariableName stringVar VariableName deserializationschemaVar VariableName propertiesVar
ParameterizedType List VariableName listVar New new ParameterizedType ArrayList VariableName listVar MethodName size EnhancedForStatement for SimpleType KafkaTopicPartitionLeader VariableName kafkatopicpartitionleaderVar VariableName listVar VariableName listVar MethodName add VariableName ktpl MethodName getTopicPartition ReturnStatement return VariableName listVar
ReturnStatement return New new ParameterizedType FlinkKafkaConsumer010 VariableName stringVar VariableName deserializationschemaVar VariableName propertiesVar
ReturnStatement return New new ParameterizedType FlinkKafkaConsumer010 VariableName stringVar VariableName deserializationschemaVar VariableName propertiesVar
ReturnStatement return New new ParameterizedType FlinkKafkaConsumer010 VariableName stringVar VariableName deserializationschemaVar VariableName propertiesVar
PrimitiveType long VariableName longVar VariableName processingtimeserviceVar MethodName getCurrentProcessingTime MethodName checkForInactiveBuckets VariableName longVar VariableName processingtimeserviceVar MethodName registerTimer VariableName longVar Operator + VariableName longVar ThisExpression this
ReturnStatement return New new ParameterizedType FlinkKafkaConsumer08 VariableName stringVar VariableName deserializationschemaVar VariableName propertiesVar
SimpleType ZookeeperOffsetHandler VariableName zookeeperoffsethandlerVar ThisExpression this VariableName zookeeperoffsethandlerVar IfStatement if VariableName zookeeperoffsethandlerVar Operator != NullLiteral null TryStatement try VariableName zookeeperoffsethandlerVar MethodName prepareAndCommitOffsets VariableName mapVar VariableName kafkacommitcallbackVar MethodName onSuccess CatchClause catch SimpleType Exception VariableName exceptionVar IfStatement if VariableName booleanVar VariableName kafkacommitcallbackVar MethodName onException VariableName e ThrowStatement throw VariableName e ReturnStatement return EnhancedForStatement for ParameterizedType KafkaTopicPartitionState VariableName kafkatopicpartitionstateVar MethodName subscribedPartitionStates SimpleType Long VariableName longVar VariableName mapVar MethodName get VariableName partition MethodName getKafkaTopicPartition IfStatement if VariableName offset Operator != NullLiteral null VariableName partition MethodName setCommittedOffset VariableName offset
ReturnStatement return New new ParameterizedType FlinkKafkaConsumer08 VariableName stringVar VariableName deserializationschemaVar VariableName propertiesVar
ReturnStatement return New new ParameterizedType FlinkKafkaConsumer08 VariableName stringVar VariableName deserializationschemaVar VariableName propertiesVar
ReturnStatement return New new ParameterizedType FlinkKafkaConsumer09 VariableName stringVar VariableName deserializationschemaVar VariableName propertiesVar
ReturnStatement return New new ParameterizedType FlinkKafkaConsumer09 VariableName stringVar VariableName deserializationschemaVar VariableName propertiesVar
ReturnStatement return New new ParameterizedType FlinkKafkaConsumer09 VariableName stringVar VariableName deserializationschemaVar VariableName propertiesVar
SimpleType ExecutionEnvironmentFactory VariableName executionenvironmentfactoryVar New new SimpleType ExecutionEnvironmentFactory SimpleType ExecutionEnvironment MethodName createExecutionEnvironment ThrowStatement throw New new SimpleType UnsupportedOperationException StringLiteral stringLiteral Operator + StringLiteral stringLiteral MethodName initializeContextEnvironment VariableName executionenvironmentfactoryVar
EnhancedForStatement for ParameterizedType Class VariableName classVar VariableName classVar IfStatement if VariableName possibleTo MethodName equals VariableName basictypeinfoVar MethodName getTypeClass ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
ReturnStatement return VariableName booleanVar
VariableName slotsharinggroupassignmentVar MethodName releaseSimpleSlot VariableName simpleslotVar
ReturnStatement return VariableName iteratorVar
PrimitiveType long VariableName longVar VariableName userFunction MethodName getCurrentWatermark IfStatement if VariableName longVar Operator > VariableName longVar VariableName longVar Operator = VariableName longVar VariableName output MethodName emitWatermark New new SimpleType Watermark VariableName longVar PrimitiveType long VariableName longVar MethodName getProcessingTimeService MethodName getCurrentProcessingTime MethodName getProcessingTimeService MethodName registerTimer VariableName longVar Operator + VariableName longVar ThisExpression this
SimpleType Watermark VariableName watermarkVar VariableName userFunction MethodName getCurrentWatermark IfStatement if VariableName watermarkVar Operator != NullLiteral null Operator && VariableName watermarkVar MethodName getTimestamp Operator > VariableName longVar VariableName longVar Operator = VariableName watermarkVar MethodName getTimestamp VariableName output MethodName emitWatermark VariableName watermarkVar PrimitiveType long VariableName longVar MethodName getProcessingTimeService MethodName getCurrentProcessingTime MethodName getProcessingTimeService MethodName registerTimer VariableName longVar Operator + VariableName longVar ThisExpression this
IfStatement if Operator ! VariableName streamstatusVar MethodName equals ThisExpression this VariableName streamstatusVar ThisExpression this VariableName streamstatusVar Operator = VariableName streamstatusVar EnhancedForStatement for ParameterizedType RecordWriterOutput VariableName recordwriteroutputVar VariableName recordwriteroutputVar VariableName streamOutput MethodName emitStreamStatus VariableName streamstatusVar
VariableName completablefutureVar MethodName complete VariableName collectionVar
VariableName completablefutureVar MethodName completeExceptionally VariableName throwableVar
IfStatement if Operator ! VariableName ircconnectionVar MethodName isConnected VariableName ircconnectionVar MethodName connect
VariableName actioninvocationVar MethodName getInvocationContext MethodName setLocale VariableName localeVar
ReturnStatement return VariableName injectorVar
ReturnStatement return New new SimpleType ByteArrayInputStream VariableName byte[]Var
ReturnStatement return VariableName content
ThrowStatement throw New new SimpleType UnsupportedOperationException
ReturnStatement return MethodName toInputStream VariableName content
ReturnStatement return New new SimpleType ByteArrayInputStream VariableName content
IfStatement if VariableName stringVar Operator != NullLiteral null ReturnStatement return Name Strings2 MethodName toInputStream VariableName stringVar ReturnStatement return MethodName apply VariableName supplierVar MethodName get
ReturnStatement return MethodName createNewKeyPairInRegion VariableName regionandnameVar MethodName getRegion VariableName regionandnameVar MethodName getName
ThisExpression this VariableName queryParameters MethodName replaceValues StringLiteral stringLiteral Name ImmutableSet MethodName of VariableName stringVar ReturnStatement return ThisExpression this
ReturnStatement return New new SimpleType ConcreteBuilder
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName mapVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName ownerVar
ReturnStatement return VariableName locationVar
ReturnStatement return VariableName websiteVar
ReturnStatement return VariableName loggingVar
ReturnStatement return VariableName versioningVar
ReturnStatement return VariableName storageclassVar
ReturnStatement return New new SimpleType IdAndName VariableName stringVar VariableName stringVar
MethodName checkState Operator ! VariableName queryParameters MethodName containsKey VariableName IS_SANDBOX_KEY StringLiteral stringLiteral VariableName queryParameters MethodName put VariableName IS_SANDBOX_KEY StringLiteral stringLiteral ReturnStatement return ThisExpression this
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName uriVar
MethodName createPlacementGroupInRegion VariableName regionandnameVar MethodName getRegion VariableName regionandnameVar MethodName getName ReturnStatement return VariableName regionandnameVar MethodName getName
ParameterizedType Binding VariableName bindingVar VariableName injectorVar MethodName getExistingBinding Name Key MethodName get TypeLiteral class ReturnStatement return VariableName bindingVar Operator == NullLiteral null Name Optional MethodName absent Name Optional MethodName of VariableName bindingVar MethodName getProvider MethodName get
ReturnStatement return VariableName booleanVar
IfStatement if VariableName methodreferenceVar Operator != NullLiteral null VariableName methodreferenceVar MethodName emit VariableName stringbuilderVar
IfStatement if VariableName contextualVar Instanceof instanceof SimpleType Bean IfStatement if VariableName contextualVar Instanceof instanceof SimpleType AbstractOwbBean IfStatement if ParameterizedType AbstractOwbBean VariableName contextualVar MethodName isPassivationCapable ReturnStatement return ParameterizedType AbstractOwbBean VariableName contextualVar MethodName getId IfStatement if VariableName contextualVar Instanceof instanceof SimpleType PassivationCapable SimpleType PassivationCapable VariableName passivationcapableVar SimpleType PassivationCapable VariableName contextualVar ReturnStatement return VariableName pc MethodName getId IfStatement if VariableName contextualVar Instanceof instanceof SimpleType PassivationCapable Operator && VariableName contextualVar Instanceof instanceof SimpleType Serializable SimpleType PassivationCapable VariableName passivationcapableVar SimpleType PassivationCapable VariableName contextualVar ReturnStatement return VariableName pc MethodName getId ReturnStatement return NullLiteral null
ReturnStatement return MethodName getAnnotation VariableName annotation[]Var VariableName classVar Operator != NullLiteral null
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName stringVar Operator != NullLiteral null
ReturnStatement return VariableName stringVar Operator != NullLiteral null
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName stringVar Operator != NullLiteral null
ReturnStatement return VariableName stringVar Operator != NullLiteral null
ReturnStatement return VariableName booleanVar
ReturnStatement return MethodName getTargetStateResolver VariableName flowexecutionexceptionVar Operator != NullLiteral null
ReturnStatement return VariableName stringVar Operator != NullLiteral null
ReturnStatement return VariableName stringVar Operator == NullLiteral null
ReturnStatement return New new SimpleType DefaultMappingResults VariableName objectVar VariableName objectVar VariableName listVar
IfStatement if VariableName intVar Operator < VariableName intVar ThrowStatement throw New new SimpleType NumberIsTooLargeException VariableName LocalizedFormats VariableName LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT VariableName intVar VariableName intVar BooleanLiteral true ReturnStatement return MethodName cumulativeProbability VariableName intVar Operator - MethodName cumulativeProbability VariableName intVar
ThisExpression this VariableName datavaluedescriptorVar Operator = VariableName datavaluedescriptorVar ThisExpression this VariableName intVar Operator = VariableName intVar ThisExpression this VariableName stringVar Operator = VariableName stringVar
SimpleType TableDescriptor VariableName tabledescriptorVar VariableName datadictionaryVar MethodName getTableDescriptor VariableName uuidVar IfStatement if VariableName tabledescriptorVar Operator != NullLiteral null VariableName tabledescriptorVar MethodName setReferencedColumnMap New new SimpleType FormatableBitSet VariableName byte[]Var ReturnStatement return VariableName tabledescriptorVar
MethodName setupSessionContextMinion VariableName activationVar BooleanLiteral true VariableName booleanVar VariableName stringVar
Modifier final SimpleType Boolean VariableName booleanVar VariableName sqlsessioncontextVar MethodName isDeferred VariableName uuidVar Modifier final PrimitiveType boolean VariableName booleanVar Modifier final SimpleType DataDictionary VariableName datadictionaryVar MethodName getDataDictionary IfStatement if VariableName booleanVar Operator != NullLiteral null VariableName booleanVar Operator = VariableName booleanVar MethodName booleanValue Modifier final SimpleType ConstraintDescriptor VariableName constraintdescriptorVar VariableName datadictionaryVar MethodName getConstraintDescriptor VariableName uuidVar VariableName booleanVar Operator = VariableName conDesc MethodName initiallyDeferred ReturnStatement return VariableName booleanVar
VariableName frombasetableVar MethodName disableBulkFetch
IfStatement if VariableName sqlwarningVar Operator != NullLiteral null IfStatement if VariableName sqlwarningVar Operator == NullLiteral null VariableName sqlwarningVar Operator = VariableName sqlwarningVar VariableName sqlwarningVar MethodName setNextException VariableName sqlwarningVar
SynchronizedStatement synchronized VariableName objectVar IfStatement if VariableName SanityManager VariableName DEBUG Name SanityManager MethodName ASSERT VariableName longVar Operator > NumberLiteral numberLiteral StringLiteral stringLiteral VariableName longVar Operator -- IfStatement if VariableName booleanVar VariableName objectVar MethodName notifyAll
SynchronizedStatement synchronized VariableName objectVar VariableName booleanVar Operator = BooleanLiteral false VariableName objectVar MethodName notifyAll
MethodName switchLogFile
VariableName intVar Operator = VariableName intVar VariableName storagefileVar Operator = VariableName storagefileVar TryStatement try ReturnStatement return SimpleType StorageRandomAccessFile Name AccessController MethodName doPrivileged ThisExpression this CatchClause catch SimpleType PrivilegedActionException VariableName privilegedactionexceptionVar ThrowStatement throw SimpleType StandardException VariableName pae MethodName getException VariableName storagefileVar Operator = NullLiteral null
TryStatement try ReturnStatement return Name DOMUtil MethodName asIndentedXML VariableName abstractserviceendpointVar MethodName getAsReference NullLiteral null CatchClause catch SimpleType TransformerException VariableName transformerexceptionVar ReturnStatement return NullLiteral null
TryStatement try ReturnStatement return Name DOMUtil MethodName asXML VariableName registryVar MethodName getEndpointDescriptor VariableName abstractserviceendpointVar CatchClause catch SimpleType Exception VariableName exceptionVar ReturnStatement return NullLiteral null
SimpleType Param VariableName paramVar New new SimpleType Param IfStatement if VariableName listVar Operator == NullLiteral null VariableName listVar Operator = New new SimpleType ArrayList VariableName listVar MethodName add VariableName paramVar ReturnStatement return VariableName paramVar
ReturnStatement return VariableName booleanVar
SimpleType StringBuilder VariableName stringbuilderVar New new SimpleType StringBuilder VariableName stringbuilderVar MethodName append StringLiteral stringLiteral Operator + StringLiteral stringLiteral StringLiteral stringLiteral StringLiteral stringLiteral IfStatement if VariableName stringVar Operator != NullLiteral null VariableName stringbuilderVar MethodName append StringLiteral stringLiteral Operator + Name DrillStringUtils MethodName escapeSql VariableName stringVar StringLiteral stringLiteral IfStatement if VariableName patVar VariableName s Operator != NullLiteral null VariableName stringbuilderVar MethodName append StringLiteral stringLiteral Operator + Name DrillStringUtils MethodName escapeSql VariableName patVar VariableName s StringLiteral stringLiteral VariableName stringbuilderVar MethodName append StringLiteral stringLiteral ReturnStatement return MethodName s VariableName stringbuilderVar MethodName toString
SimpleType StringBuilder VariableName stringbuilderVar New new SimpleType StringBuilder VariableName stringbuilderVar MethodName append StringLiteral stringLiteral Operator + StringLiteral stringLiteral StringLiteral stringLiteral VariableName stringbuilderVar MethodName append StringLiteral stringLiteral ReturnStatement return MethodName s VariableName stringbuilderVar MethodName toString
IfStatement if MethodName isClosed ThrowStatement throw New new SimpleType AlreadyClosedSqlException StringLiteral stringLiteral
IfStatement if MethodName isClosed ThrowStatement throw New new SimpleType AlreadyClosedSqlException StringLiteral stringLiteral
IfStatement if MethodName getConnection MethodName isClosed ThrowStatement throw New new SimpleType AlreadyClosedSqlException StringLiteral stringLiteral
ReturnStatement return Name Boolean MethodName valueOf VariableName propertiesVar MethodName getProperty StringLiteral stringLiteral
ReturnStatement return Name Boolean MethodName valueOf VariableName propertiesVar MethodName getProperty StringLiteral stringLiteral
ReturnStatement return New new SimpleType JsonResult VariableName stringVar
SimpleType String VariableName stringVar VariableName stringVar Operator = VariableName stringbuilderVar MethodName append StringLiteral stringLiteral MethodName toString VariableName stringbuilderVar Operator = NullLiteral null ReturnStatement return VariableName stringVar
Modifier final ParameterizedType Collection VariableName collectionVar Name Collections2 MethodName filter VariableName options MethodName values VariableName predicateVar ReturnStatement return VariableName collectionVar
ReturnStatement return VariableName mapVar MethodName values
IfStatement if Operator ! VariableName booleanVar ReturnStatement return EnhancedForStatement for SimpleType T VariableName tVar VariableName t[]Var VariableName x MethodName clear
VariableName tVar MethodName clear
ReturnStatement return Name ServiceInstance MethodName builder MethodName name VariableName stringVar MethodName payload VariableName drillbitendpointVar MethodName build
ReturnStatement return Name ServiceDiscoveryBuilder MethodName builder TypeLiteral class MethodName basePath StringLiteral stringLiteral MethodName client VariableName curatorframeworkVar MethodName serializer VariableName DrillServiceInstanceHelper VariableName SERIALIZER MethodName build
IfStatement if VariableName datafilereaderVar Operator != NullLiteral null TryStatement try VariableName datafilereaderVar MethodName close CatchClause catch SimpleType IOException VariableName ioexceptionVar VariableName loggerVar MethodName warn StringLiteral stringLiteral VariableName e VariableName datafilereaderVar Operator = NullLiteral null
TryStatement try IfStatement if VariableName recordreaderVar Operator != NullLiteral null VariableName recordreaderVar MethodName close VariableName recordreaderVar Operator = NullLiteral null CatchClause catch SimpleType IOException VariableName ioexceptionVar VariableName loggerVar MethodName warn StringLiteral stringLiteral VariableName e
TryStatement try IfStatement if VariableName columnchunkincreadstoreVar Operator != NullLiteral null VariableName columnchunkincreadstoreVar MethodName close VariableName columnchunkincreadstoreVar Operator = NullLiteral null CatchClause catch SimpleType IOException VariableName ioexceptionVar VariableName loggerVar MethodName warn StringLiteral stringLiteral VariableName e
ReturnStatement return VariableName intVar
MethodName resetValues EnhancedForStatement for ParameterizedType VectorWrapper VariableName vectorwrapperVar VariableName vectorcontainerVar IfStatement if VariableName vw MethodName getValueVector Instanceof instanceof SimpleType BaseDataValueVector SimpleType BaseDataValueVector VariableName vw MethodName getValueVector MethodName reset
VariableName vectorcontainerVar MethodName zeroVectors IfStatement if VariableName selectionvector2Var Operator != NullLiteral null VariableName selectionvector2Var MethodName clear IfStatement if VariableName fsdataoutputstreamVar Operator != NullLiteral null VariableName fsdataoutputstreamVar MethodName close IfStatement if VariableName fsdatainputstreamVar Operator != NullLiteral null VariableName fsdatainputstreamVar MethodName close IfStatement if VariableName filesystemVar Operator != NullLiteral null Operator && VariableName filesystemVar MethodName exists VariableName pathVar VariableName filesystemVar MethodName delete VariableName pathVar BooleanLiteral false
Modifier final SimpleType SignalFragment VariableName signalfragmentVar New new SimpleType SignalFragment VariableName rpcoutcomelistenerVar VariableName fragmenthandleVar VariableName RpcType VariableName REQ_UNPAUSE_FRAGMENT VariableName controlconnectionmanagerVar MethodName runCommand VariableName signalfragmentVar
IfStatement if VariableName reltraitVar Instanceof instanceof SimpleType DrillDistributionTrait SimpleType DistributionType VariableName distributiontypeVar SimpleType DrillDistributionTrait VariableName reltraitVar MethodName getType IfStatement if VariableName requiredDist Operator == VariableName DistributionType VariableName drilldistributiontraitVar ReturnStatement return BooleanLiteral true IfStatement if ThisExpression this VariableName distributiontypeVar Operator == VariableName DistributionType VariableName HASH_DISTRIBUTED IfStatement if VariableName requiredDist Operator == VariableName DistributionType VariableName HASH_DISTRIBUTED ReturnStatement return ThisExpression this MethodName equals VariableName reltraitVar IfStatement if VariableName requiredDist Operator == VariableName DistributionType VariableName drilldistributiontraitVar ReturnStatement return BooleanLiteral true ReturnStatement return ThisExpression this MethodName equals VariableName reltraitVar
ReturnStatement return MethodName create NullLiteral null BooleanLiteral false
ReturnStatement return Name Collections MethodName newSetFromMap New new ParameterizedType IdentityHashMap
IfStatement if VariableName closureVar Operator == NullLiteral null ThrowStatement throw New new SimpleType NullPointerException StringLiteral stringLiteral IfStatement if VariableName iteratorVar Operator != NullLiteral null WhileStatement while VariableName iteratorVar MethodName hasNext Modifier final SimpleType E VariableName eVar VariableName iteratorVar MethodName next VariableName closureVar MethodName execute VariableName element
EnhancedForStatement for SimpleType HistoryJobEntityCreationListener VariableName historyjobentitycreationlistenerVar VariableName vectorVar VariableName l MethodName jobEntityCreated VariableName jobbaseapientityVar
ThisExpression this VariableName contextVar Operator = VariableName contextVar
IfStatement if MethodName getWebView Operator != NullLiteral null MethodName getWebView MethodName removeAllViews MethodName getWebView MethodName destroy VariableName webviewVar Operator = NullLiteral null
ReturnStatement return MethodName getInstance MethodName isLayerTypeEnabled
ThisExpression this VariableName listVar Operator = VariableName listVar
SimpleType StringBuilder VariableName stringbuilderVar New new SimpleType StringBuilder EnhancedForStatement for SimpleType Line VariableName lineVar VariableName listVar VariableName stringbuilderVar MethodName append VariableName currentLine MethodName toString ReturnStatement return VariableName stringbuilderVar MethodName toString
SimpleType EdmMultiplicity VariableName edmmultiplicityVar MethodName mapMultiplicity VariableName edmnavigationpropertyVar MethodName toMultiplicity Modifier final PrimitiveType boolean VariableName booleanVar VariableName fieldVar MethodName getType MethodName isArray Operator || TypeLiteral class MethodName isAssignableFrom VariableName fieldVar MethodName getType IfStatement if VariableName edmmultiplicityVar Operator == VariableName EdmMultiplicity VariableName ONE Operator && VariableName booleanVar ReturnStatement return VariableName EdmMultiplicity VariableName MANY ReturnStatement return VariableName edmmultiplicityVar
IfStatement if VariableName int[]Var VariableName length Operator == NumberLiteral numberLiteral ReturnStatement return MethodName of VariableName intVar Modifier final ArrayType int[] VariableName int[]Var Name Arrays MethodName copyOf ThisExpression this VariableName int[]Var VariableName int[]Var VariableName length Operator + NumberLiteral numberLiteral VariableName int[]Var VariableName int[]Var VariableName length Operator = VariableName intVar ReturnStatement return New new SimpleType ImmutableIntList VariableName int[]Var
Modifier final ParameterizedType Builder VariableName builderVar Name ImmutableMultimap MethodName builder EnhancedForStatement for SimpleType Method VariableName methodVar VariableName classVar MethodName getMethods Modifier final SimpleType String VariableName stringVar VariableName method MethodName getName IfStatement if VariableName method MethodName getDeclaringClass Operator == TypeLiteral class Operator || VariableName methodName MethodName equals StringLiteral stringLiteral ContinueStatement continue IfStatement if TypeLiteral class MethodName isAssignableFrom VariableName method MethodName getReturnType Modifier final SimpleType TableMacro VariableName tablemacroVar New new SimpleType MethodTableMacro ThisExpression this VariableName method VariableName builderVar MethodName put VariableName methodName VariableName tableMacro ReturnStatement return VariableName builderVar MethodName build
ReturnStatement return ThisExpression this Operator == VariableName reltraitVar Operator || VariableName reltraitVar Instanceof instanceof SimpleType RelCollationImpl Operator && Name Util MethodName startsWith VariableName immutablelistVar SimpleType RelCollationImpl VariableName reltraitVar VariableName immutablelistVar
ReturnStatement return VariableName booleanVar
MethodName log VariableName System VariableName out StringLiteral stringLiteral VariableName stringVar VariableName throwableVar
MethodName removeShutdownHook IfStatement if ThisExpression this VariableName launcherVar Operator != NullLiteral null MethodName info StringLiteral stringLiteral NullLiteral null ThisExpression this VariableName launcherVar MethodName stop ThisExpression this VariableName launcherVar Operator = NullLiteral null IfStatement if ThisExpression this VariableName loaderVar Operator != NullLiteral null ThisExpression this VariableName loaderVar MethodName cleanupVM ThisExpression this VariableName loaderVar Operator = NullLiteral null ThisExpression this VariableName booleanVar Operator = BooleanLiteral false
SimpleType Resource VariableName resourceVar VariableName resourceVar MethodName getChild VariableName stringVar IfStatement if VariableName resourceVar Operator == NullLiteral null ReturnStatement return BooleanLiteral false IfStatement if VariableName stringVar Operator == NullLiteral null ReturnStatement return BooleanLiteral true ReturnStatement return MethodName isEqualToValue VariableName resourceVar
ReturnStatement return VariableName treeproviderVar MethodName listChildren VariableName tVar MethodName hasNext
EnhancedForStatement for SimpleType T VariableName tVar VariableName iterableVar IfStatement if VariableName treeproviderVar MethodName sameElement VariableName t VariableName tVar ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
ParameterizedType Iterator VariableName iteratorVar MethodName apply Name IteratorUtils MethodName singleElementIterator Name Option MethodName of VariableName tVar NumberLiteral numberLiteral ReturnStatement return New new ParameterizedType EmptyElementFilter VariableName iteratorVar MethodName hasNext
SimpleType PipeBuilder VariableName pipebuilderVar New new SimpleType PipeBuilderImpl VariableName resourceresolverVar ThisExpression this ReturnStatement return VariableName pipebuilderVar
ReturnStatement return MethodName pipe VariableName FilterPipe VariableName RESOURCE_TYPE MethodName conf VariableName objectVar
EnhancedForStatement for SimpleType String VariableName stringVar VariableName setVar PrimitiveType boolean VariableName booleanVar VariableName schedulerVar MethodName unschedule VariableName jobName VariableName loggerVar MethodName info StringLiteral stringLiteral VariableName jobName VariableName result
ReturnStatement return Name XSSSupport MethodName encode VariableName stringVar Name XSSSupport MethodName getEncodingMode VariableName stringVar
VariableName threadlocalVar MethodName set VariableName resourceresolverVar
IfStatement if VariableName intVar Operator >= NumberLiteral numberLiteral Operator && VariableName intVar Operator < VariableName object[]Var VariableName length ReturnStatement return VariableName runtimeobjectmodelVar MethodName toString VariableName object[]Var VariableName intVar ReturnStatement return StringLiteral stringLiteral
ArrayType Object[] VariableName object[]Var VariableName scriptableVar MethodName getIds ParameterizedType Set VariableName setVar New new ParameterizedType HashSet EnhancedForStatement for SimpleType Object VariableName objectVar VariableName object[]Var IfStatement if VariableName property Instanceof instanceof SimpleType String VariableName setVar MethodName add SimpleType String VariableName property ReturnStatement return VariableName setVar
ArrayType byte[] VariableName byte[]Var MethodName fromIdentityEncodedString VariableName stringVar ReturnStatement return New new SimpleType ByteArrayInputStream VariableName byte[]Var
ReturnStatement return ThisExpression this VariableName booleanVar
Modifier final SimpleType Session VariableName sessionVar ThisExpression this VariableName slingrepositoryVar MethodName loginAdministrative NullLiteral null IfStatement if VariableName sessionVar MethodName getUserID MethodName equals ThisExpression this VariableName stringVar ReturnStatement return VariableName sessionVar TryStatement try ReturnStatement return VariableName sessionVar MethodName impersonate New new SimpleType SimpleCredentials ThisExpression this VariableName stringVar ArrayType char[] NumberLiteral numberLiteral VariableName sessionVar MethodName logout
ThisExpression this VariableName booleanVar Operator = BooleanLiteral true
ThisExpression this VariableName providercontextVar Operator = VariableName providercontextVar
ThisExpression this VariableName providercontextVar Operator = NullLiteral null
ReturnStatement return MethodName get VariableName healthcheckmetadataVar VariableName longVar
ParameterizedType Reference VariableName referenceVar VariableName referencequeueVar MethodName poll WhileStatement while VariableName referenceVar Operator != NullLiteral null VariableName log MethodName debug StringLiteral stringLiteral VariableName referenceVar MethodName toString SimpleType DisposalCallbackRegistryImpl VariableName disposalcallbackregistryimplVar VariableName concurrentmapVar MethodName remove VariableName referenceVar VariableName registry MethodName onDisposed VariableName referenceVar Operator = VariableName referencequeueVar MethodName poll
EnhancedForStatement for Modifier final SimpleType Feature VariableName featureVar ThisExpression this VariableName listVar IfStatement if VariableName stringVar MethodName equals VariableName f MethodName getName ReturnStatement return VariableName f ReturnStatement return NullLiteral null
ReturnStatement return New new SimpleType RepositoryImpl VariableName repositoryinfoVar VariableName eventadminVar
IfStatement if Name ProjectHelper MethodName isContentProject VariableName iprojectVar SimpleType IFolder VariableName ifolderVar Name ProjectUtil MethodName getSyncDirectory VariableName iprojectVar IfStatement if VariableName syncDir Operator != NullLiteral null SimpleType IFolder VariableName ifolderVar VariableName syncDir MethodName getParent MethodName getFolder New new SimpleType Path VariableName stringVar IfStatement if VariableName metaInfFolder MethodName exists ReturnStatement return New new SimpleType FileVaultMetaInfRootFolder VariableName metaInfFolder ReturnStatement return NullLiteral null
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName stringVar
TryStatement try MethodName checkAddProjectGroupNotifierAuthorization MethodName getProjectGroupName CatchClause catch SimpleType AuthorizationRequiredException VariableName authorizationrequiredexceptionVar MethodName addActionError VariableName authzE MethodName getMessage ReturnStatement return VariableName REQUIRES_AUTHORIZATION ReturnStatement return VariableName INPUT
TryStatement try MethodName checkAddProjectNotifierAuthorization MethodName getProjectGroupName CatchClause catch SimpleType AuthorizationRequiredException VariableName authorizationrequiredexceptionVar MethodName addActionError VariableName authzE MethodName getMessage ReturnStatement return VariableName REQUIRES_AUTHORIZATION ReturnStatement return VariableName INPUT
TryStatement try MethodName checkAddProjectGroupAuthorization ReturnStatement return VariableName INPUT CatchClause catch SimpleType AuthorizationRequiredException VariableName authorizationrequiredexceptionVar MethodName addActionError VariableName authzE MethodName getMessage ReturnStatement return VariableName REQUIRES_AUTHORIZATION
ReturnStatement return New new SimpleType IntHashSetIterator
ReturnStatement return New new SimpleType IntBitSetIterator
ReturnStatement return ThisExpression this VariableName casimplVar
VariableName featurestructureselectionproviderVar MethodName setSelection MethodName getDocument MethodName getSelectedAnnotations
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
PrimitiveType int VariableName intVar MethodName pos VariableName intVar PrimitiveType int VariableName intVar MethodName size VariableName intVar PrimitiveType int VariableName intVar Name Arrays MethodName binarySearch VariableName int[]Var VariableName intVar VariableName intVar Operator + VariableName intVar VariableName intVar IfStatement if VariableName intVar Operator >= NumberLiteral numberLiteral ReturnStatement return VariableName intVar Operator < VariableName intVar Operator + VariableName intVar VariableName intVar Operator - NumberLiteral numberLiteral VariableName intVar Operator = Name Math MethodName abs VariableName intVar Operator + NumberLiteral numberLiteral ReturnStatement return VariableName intVar Operator < VariableName intVar Operator + VariableName intVar VariableName intVar Operator - NumberLiteral numberLiteral
PrimitiveType int VariableName intVar MethodName pos VariableName intVar PrimitiveType int VariableName intVar MethodName size VariableName intVar PrimitiveType int VariableName intVar Name Arrays MethodName binarySearch VariableName int[]Var VariableName intVar VariableName intVar Operator + VariableName intVar VariableName intVar IfStatement if VariableName intVar Operator >= NumberLiteral numberLiteral ReturnStatement return VariableName intVar Operator < VariableName intVar Operator + VariableName intVar VariableName intVar Operator - NumberLiteral numberLiteral VariableName intVar Operator = Name Math MethodName abs VariableName intVar Operator + NumberLiteral numberLiteral ReturnStatement return VariableName intVar Operator < VariableName intVar Operator + VariableName intVar VariableName intVar Operator - NumberLiteral numberLiteral
ReturnStatement return VariableName frameobjectVar
ReturnStatement return VariableName matrixobjectVar
SimpleType TaskInProgress VariableName taskinprogressVar VariableName mapVar MethodName get VariableName taskattemptidVar IfStatement if VariableName taskinprogressVar Operator != NullLiteral null VariableName taskinprogressVar MethodName reportDiagnosticInfo VariableName stringVar Name LOG MethodName warn StringLiteral stringLiteral Operator + VariableName taskattemptidVar StringLiteral stringLiteral
Name LOG MethodName fatal StringLiteral stringLiteral Operator + VariableName taskattemptidVar StringLiteral stringLiteral VariableName stringVar SimpleType TaskInProgress VariableName taskinprogressVar VariableName mapVar MethodName get VariableName taskattemptidVar VariableName taskinprogressVar MethodName reportDiagnosticInfo StringLiteral stringLiteral Operator + VariableName stringVar MethodName purgeTask VariableName taskinprogressVar BooleanLiteral true
IfStatement if VariableName jobinprogressVar Operator != NullLiteral null MethodName unreserveSlots VariableName TaskType VariableName MAP VariableName jobinprogressVar IfStatement if VariableName jobinprogressVar Operator != NullLiteral null MethodName unreserveSlots VariableName TaskType VariableName REDUCE VariableName jobinprogressVar
IfStatement if VariableName listVar MethodName isEmpty ReturnStatement return BooleanLiteral false IfStatement if VariableName listVar MethodName isEmpty ReturnStatement return BooleanLiteral true EnhancedForStatement for SimpleType String VariableName stringVar VariableName listVar IfStatement if Operator ! VariableName listVar MethodName contains VariableName tag ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
ParameterizedType List VariableName listVar New new ParameterizedType ArrayList EnhancedForStatement for SimpleType String VariableName stringVar VariableName listVar VariableName listVar MethodName add New new SimpleType ClusterMerlin VariableName clusterString ReturnStatement return VariableName listVar
ReturnStatement return MethodName fromString MethodName getEntityType MethodName toString
SimpleType Properties VariableName propertiesVar New new SimpleType Properties ParameterizedType Map VariableName mapVar New new ParameterizedType HashMap VariableName mapVar MethodName put StringLiteral stringLiteral VariableName clusterVar MethodName getColo VariableName mapVar MethodName put StringLiteral stringLiteral VariableName clusterVar MethodName getName IfStatement if VariableName clusterVar MethodName getProperties Operator != NullLiteral null EnhancedForStatement for SimpleType Property VariableName propertyVar VariableName clusterVar MethodName getProperties MethodName getProperties VariableName mapVar MethodName put VariableName property MethodName getName VariableName property MethodName getValue VariableName propertiesVar MethodName put StringLiteral stringLiteral VariableName mapVar ReturnStatement return VariableName propertiesVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ArrayType byte[] VariableName byte[]Var ArrayType byte[] VariableName cellVar MethodName getRowLength MethodName copyRowTo VariableName cellVar VariableName byte[]Var NumberLiteral numberLiteral ReturnStatement return VariableName byte[]Var
ArrayType byte[] VariableName byte[]Var ArrayType byte[] VariableName cellVar MethodName getFamilyLength MethodName copyFamilyTo VariableName cellVar VariableName byte[]Var NumberLiteral numberLiteral ReturnStatement return VariableName byte[]Var
ArrayType byte[] VariableName byte[]Var ArrayType byte[] VariableName cellVar MethodName getQualifierLength MethodName copyQualifierTo VariableName cellVar VariableName byte[]Var NumberLiteral numberLiteral ReturnStatement return VariableName byte[]Var
ArrayType byte[] VariableName byte[]Var ArrayType byte[] VariableName cellVar MethodName getValueLength MethodName copyValueTo VariableName cellVar VariableName byte[]Var NumberLiteral numberLiteral ReturnStatement return VariableName byte[]Var
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
IfStatement if VariableName quorumpeerconfigVar MethodName isDistributed SimpleType QuorumPeerMain VariableName quorumpeermainVar New new SimpleType QuorumPeerMain VariableName qp MethodName runFromConfig VariableName quorumpeerconfigVar SimpleType ZooKeeperServerMain VariableName zookeeperservermainVar New new SimpleType ZooKeeperServerMain SimpleType ServerConfig VariableName serverconfigVar New new SimpleType ServerConfig VariableName serverConfig MethodName readFrom VariableName quorumpeerconfigVar VariableName zk MethodName runFromConfig VariableName serverConfig
SimpleType Builder VariableName builderVar Name ZooKeeperProtos.ClusterUp MethodName newBuilder VariableName builderVar MethodName setStartDate New new SimpleType Date MethodName toString ReturnStatement return Name ProtobufUtil MethodName prependPBMagic VariableName builderVar MethodName build MethodName toByteArray
ReturnStatement return MethodName setSplitOrMergeOn VariableName booleanVar VariableName MasterSwitchType VariableName MERGE
ReturnStatement return MethodName setSplitOrMergeOn VariableName booleanVar VariableName MasterSwitchType VariableName SPLIT
ReturnStatement return ThisExpression this MethodName newMasterCaller MethodName action VariableName controller VariableName stub ThisExpression this MethodName call VariableName controller VariableName stub Name RequestConverter MethodName buildSetBalancerRunningRequest VariableName booleanVar BooleanLiteral true VariableName s VariableName c VariableName req VariableName done VariableName s MethodName setBalancerRunning VariableName c VariableName req VariableName done VariableName resp VariableName resp MethodName getPrevBalanceValue MethodName call
ReturnStatement return ThisExpression this MethodName newMasterCaller MethodName action VariableName controller VariableName stub ThisExpression this MethodName call VariableName controller VariableName stub Name RequestConverter MethodName buildSetNormalizerRunningRequest VariableName booleanVar VariableName s VariableName c VariableName req VariableName done VariableName s MethodName setNormalizerRunning VariableName c VariableName req VariableName done VariableName resp VariableName resp MethodName getPrevNormalizerValue MethodName call
ReturnStatement return ThisExpression this MethodName newMasterCaller MethodName action VariableName controller VariableName stub ThisExpression this MethodName call VariableName controller VariableName stub Name RequestConverter MethodName buildSetCleanerChoreRunningRequest VariableName booleanVar VariableName s VariableName c VariableName req VariableName done VariableName s MethodName setCleanerChoreRunning VariableName c VariableName req VariableName done VariableName resp VariableName resp MethodName getPrevValue MethodName call
ReturnStatement return ThisExpression this MethodName newMasterCaller MethodName action VariableName controller VariableName stub ThisExpression this MethodName call VariableName controller VariableName stub Name RequestConverter MethodName buildEnableCatalogJanitorRequest VariableName booleanVar VariableName s VariableName c VariableName req VariableName done VariableName s MethodName enableCatalogJanitor VariableName c VariableName req VariableName done VariableName resp VariableName resp MethodName getPrevValue MethodName call
ReturnStatement return New new SimpleType ModifyableTableDescriptor VariableName modifyabletabledescriptorVar
ReturnStatement return MethodName getTableDescriptor VariableName tablenameVar MethodName getConnection VariableName rpcretryingcallerfactoryVar VariableName rpccontrollerfactoryVar VariableName intVar VariableName intVar
ReturnStatement return MethodName executeCallable New new ParameterizedType MasterCallable MethodName getConnection MethodName getRpcControllerFactory SimpleType Boolean MethodName rpcCall SimpleType SetBalancerRunningRequest VariableName setbalancerrunningrequestVar Name RequestConverter MethodName buildSetBalancerRunningRequest VariableName booleanVar VariableName booleanVar ReturnStatement return VariableName master MethodName setBalancerRunning MethodName getRpcController VariableName setbalancerrunningrequestVar MethodName getPrevBalanceValue
ReturnStatement return MethodName executeCallable New new ParameterizedType MasterCallable MethodName getConnection MethodName getRpcControllerFactory SimpleType Boolean MethodName rpcCall SimpleType SetNormalizerRunningRequest VariableName setnormalizerrunningrequestVar Name RequestConverter MethodName buildSetNormalizerRunningRequest VariableName booleanVar ReturnStatement return VariableName master MethodName setNormalizerRunning MethodName getRpcController VariableName setnormalizerrunningrequestVar MethodName getPrevNormalizerValue
ReturnStatement return MethodName executeCallable New new ParameterizedType MasterCallable MethodName getConnection MethodName getRpcControllerFactory SimpleType Boolean MethodName rpcCall ReturnStatement return VariableName master MethodName enableCatalogJanitor MethodName getRpcController Name RequestConverter MethodName buildEnableCatalogJanitorRequest VariableName booleanVar MethodName getPrevValue
ReturnStatement return MethodName executeCallable New new ParameterizedType MasterCallable MethodName getConnection MethodName getRpcControllerFactory SimpleType Boolean MethodName rpcCall ReturnStatement return VariableName master MethodName setCleanerChoreRunning MethodName getRpcController Name RequestConverter MethodName buildSetCleanerChoreRunningRequest VariableName booleanVar MethodName getPrevValue
MethodName asyncSnapshot Name ProtobufUtil MethodName createHBaseProtosSnapshotDesc VariableName snapshotdescriptionVar
SimpleType ColumnFamilyDescriptorBuilder VariableName columnfamilydescriptorbuilderVar Name ColumnFamilyDescriptorBuilder MethodName newBuilder VariableName columnfamilyschemaVar MethodName getName MethodName toByteArray VariableName columnfamilyschemaVar MethodName getAttributesList MethodName forEach VariableName a VariableName columnfamilydescriptorbuilderVar MethodName setValue VariableName a MethodName getFirst MethodName toByteArray VariableName a MethodName getSecond MethodName toByteArray VariableName columnfamilyschemaVar MethodName getConfigurationList MethodName forEach VariableName a VariableName columnfamilydescriptorbuilderVar MethodName setConfiguration VariableName a MethodName getName VariableName a MethodName getValue ReturnStatement return VariableName columnfamilydescriptorbuilderVar MethodName build
VariableName booleanVar Operator = BooleanLiteral true
ReturnStatement return VariableName cellVar MethodName getValueLength Operator > VariableName Bytes VariableName SIZEOF_INT
ReturnStatement return VariableName fairqueueVar MethodName hasRunnables Operator || VariableName fairqueueVar MethodName hasRunnables
EnhancedForStatement for SimpleType HStoreFile VariableName hstorefileVar ThisExpression this VariableName storeengineVar MethodName getStoreFileManager MethodName getStorefiles IfStatement if VariableName sf MethodName getReader Operator == NullLiteral null Name LOG MethodName debug StringLiteral stringLiteral Operator + VariableName sf StringLiteral stringLiteral ReturnStatement return BooleanLiteral false ReturnStatement return VariableName storeengineVar MethodName getCompactionPolicy MethodName shouldPerformMajorCompaction ThisExpression this VariableName storeengineVar MethodName getStoreFileManager MethodName getStorefiles
ReturnStatement return ThisExpression this VariableName mapVar MethodName size
ReturnStatement return VariableName nextstateVar Operator == VariableName NextState VariableName SIZE_LIMIT_REACHED_MID_ROW Operator || VariableName nextstateVar Operator == VariableName NextState VariableName TIME_LIMIT_REACHED_MID_ROW Operator || VariableName nextstateVar Operator == VariableName NextState VariableName BATCH_LIMIT_REACHED
ReturnStatement return MethodName getCurrentSize
IfStatement if VariableName intVar Operator != VariableName intVar Operator + MethodName totalChecksumBytes ThrowStatement throw New new SimpleType IOException StringLiteral stringLiteral Operator + StringLiteral stringLiteral Operator + VariableName intVar StringLiteral stringLiteral StringLiteral stringLiteral VariableName intVar StringLiteral stringLiteral MethodName totalChecksumBytes
Name LOG MethodName debug StringLiteral stringLiteral Operator + VariableName stringVar SimpleType String VariableName stringVar Name ZKUtil MethodName getNodeName VariableName stringVar ThisExpression this VariableName procedurememberVar MethodName receivedReachedGlobalBarrier VariableName stringVar
ThisExpression this VariableName mapVar Operator = Name Collections MethodName unmodifiableMap VariableName mapVar ThisExpression this VariableName mapVar Operator = Name Collections MethodName unmodifiableMap VariableName mapVar
ReturnStatement return Name Integer MethodName toString VariableName intVar
SimpleType StringBuilder VariableName stringbuilderVar New new SimpleType StringBuilder VariableName stringbuilderVar MethodName append StringLiteral stringLiteral PrimitiveType int VariableName intVar NumberLiteral numberLiteral WhileStatement while VariableName intVar Operator < VariableName stringVar MethodName length PrimitiveType char VariableName charVar VariableName stringVar MethodName charAt VariableName intVar Operator ++ IfStatement if VariableName x Operator == CharacterLiteral charLiteral Operator || VariableName x Operator == CharacterLiteral charLiteral VariableName stringbuilderVar MethodName append CharacterLiteral charLiteral VariableName stringbuilderVar MethodName append VariableName x VariableName stringbuilderVar MethodName append StringLiteral stringLiteral ReturnStatement return VariableName stringbuilderVar MethodName toString
ReturnStatement return New new SimpleType Double VariableName doubleVar MethodName toString
SimpleType StringBuilder VariableName stringbuilderVar New new SimpleType StringBuilder VariableName stringbuilderVar MethodName append StringLiteral stringLiteral PrimitiveType int VariableName intVar NumberLiteral numberLiteral WhileStatement while VariableName intVar Operator < VariableName stringVar MethodName length PrimitiveType char VariableName charVar VariableName stringVar MethodName charAt VariableName intVar Operator ++ IfStatement if VariableName x Operator == CharacterLiteral charLiteral Operator || VariableName x Operator == CharacterLiteral charLiteral VariableName stringbuilderVar MethodName append CharacterLiteral charLiteral VariableName stringbuilderVar MethodName append VariableName x VariableName stringbuilderVar MethodName append StringLiteral stringLiteral ReturnStatement return VariableName stringbuilderVar MethodName toString
IfStatement if VariableName booleanVar ReturnStatement return StringLiteral stringLiteral ReturnStatement return StringLiteral stringLiteral
SimpleType HashMap VariableName hashmapVar New new SimpleType HashMap VariableName hashmapVar MethodName put VariableName stringVar MethodName needPriorityToString VariableName intVar VariableName hashmapVar MethodName put VariableName stringVar NullLiteral null VariableName hashmapVar MethodName put VariableName stringVar VariableName doubleVar SimpleType ArrayList VariableName arraylistVar New new SimpleType ArrayList SimpleType String VariableName stringVar MethodName buildConjunctionClause VariableName arraylistVar ArrayType ClauseDescription[] ArrayInitializer arrayInitializer MethodName performUpdate VariableName hashmapVar StringLiteral stringLiteral Operator + VariableName stringVar VariableName arraylistVar NullLiteral null MethodName noteModifications NumberLiteral numberLiteral NumberLiteral numberLiteral NumberLiteral numberLiteral
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
IfStatement if ThisExpression this VariableName listVar MethodName size Operator < NumberLiteral numberLiteral ReturnStatement return NullLiteral null SimpleType Message VariableName messageVar MethodName assembleMessage SimpleType MessageBatch VariableName messagebatchVar New new SimpleType MessageBatch ThisExpression this VariableName stringVar ThisExpression this VariableName stringVar VariableName messageVar ThisExpression this VariableName listVar MethodName clear ThisExpression this VariableName intVar Operator = NumberLiteral numberLiteral ThisExpression this VariableName stringVar Operator = NullLiteral null ThisExpression this VariableName stringVar Operator = NullLiteral null ReturnStatement return VariableName messagebatchVar
MethodName flush
Name Assert MethodName notNull VariableName objectVar StringLiteral stringLiteral ThisExpression this VariableName objectVar Operator = VariableName objectVar
ThisExpression this VariableName booleanVar Operator = BooleanLiteral true ReturnStatement return ThisExpression this
ParameterizedType Map VariableName mapVar ThisExpression this VariableName mapVar IfStatement if VariableName mapVar Operator != NullLiteral null VariableName mapVar MethodName put VariableName stringVar VariableName objectVar VariableName mapVar Operator = New new ParameterizedType HashMap VariableName mapVar MethodName put VariableName stringVar VariableName objectVar ThisExpression this VariableName mapVar Operator = VariableName mapVar
ReturnStatement return New new SimpleType APIInfo Name String MethodName format VariableName apiinfoVar MethodName getPath VariableName stringVar VariableName apiinfoVar MethodName getMethod VariableName apiinfoVar MethodName getExpectedStatus
IfStatement if Name StringUtils MethodName isEmpty VariableName stringVar ReturnStatement return NullLiteral null ReturnStatement return VariableName stringVar MethodName toLowerCase MethodName trim
ReturnStatement return VariableName pathVar MethodName toString
SimpleType String VariableName stringVar VariableName servicegroupcontextVar MethodName getId VariableName hashtableVar MethodName put VariableName stringVar VariableName servicegroupcontextVar VariableName servicegroupcontextVar MethodName touch VariableName servicegroupcontextVar MethodName setParent ThisExpression this MethodName cleanupServiceGroupContexts
VariableName stringVar Operator = VariableName stringVar MethodName toLowerCase VariableName stringVar Operator = VariableName stringVar MethodName toLowerCase IfStatement if VariableName stringVar MethodName endsWith StringLiteral stringLiteral Operator || VariableName stringVar MethodName endsWith StringLiteral stringLiteral VariableName stringVar Operator = VariableName stringVar MethodName substring NumberLiteral numberLiteral VariableName stringVar MethodName length Operator - NumberLiteral numberLiteral IfStatement if VariableName stringVar MethodName endsWith StringLiteral stringLiteral Operator || VariableName stringVar MethodName endsWith StringLiteral stringLiteral VariableName stringVar Operator = VariableName stringVar MethodName substring NumberLiteral numberLiteral VariableName stringVar MethodName length Operator - NumberLiteral numberLiteral ReturnStatement return VariableName stringVar MethodName equals VariableName stringVar
ThisExpression this VariableName listVar Operator = VariableName listVar
SimpleType PrintWriter VariableName printwriterVar New new SimpleType PrintWriter VariableName httpservletresponseVar MethodName getOutputStream VariableName printwriterVar MethodName println StringLiteral stringLiteral Operator + StringLiteral stringLiteral VariableName printwriterVar MethodName flush VariableName httpservletresponseVar MethodName setStatus VariableName HttpServletResponse VariableName SC_ACCEPTED
Name MustUnderstandUtils MethodName markUnderstoodHeaderParameters VariableName messagecontextVar ReturnStatement return VariableName InvocationResponse VariableName CONTINUE
SimpleType String VariableName stringVar VariableName httpservletrequestVar MethodName getParameter StringLiteral stringLiteral SimpleType String VariableName stringVar VariableName httpservletrequestVar MethodName getParameter StringLiteral stringLiteral SimpleType ServiceGroupContext VariableName servicegroupcontextVar VariableName configurationcontextVar MethodName getServiceGroupContext VariableName stringVar VariableName httpservletrequestVar MethodName getSession MethodName setAttribute StringLiteral stringLiteral VariableName servicegroupcontextVar VariableName httpservletrequestVar MethodName getSession MethodName setAttribute StringLiteral stringLiteral VariableName stringVar VariableName httpservletrequestVar MethodName getSession MethodName setAttribute StringLiteral stringLiteral VariableName configurationcontextVar ReturnStatement return New new SimpleType View StringLiteral stringLiteral
ReturnStatement return ThisExpression this VariableName booleanVar
VariableName manager.spillables MethodName clear VariableName spillablememorymanagerVar VariableName longVar Operator = NumberLiteral numberLiteral
VariableName threadlocalVar Operator = New new ParameterizedType ThreadLocal SimpleType UDFContext MethodName initialValue ReturnStatement return New new SimpleType UDFContext
ReturnStatement return New new SimpleType POSplit New new SimpleType OperatorKey VariableName stringVar VariableName nodeidgeneratorVar MethodName getNextNodeId VariableName stringVar
SimpleType SparkOperator VariableName sparkoperatorVar NullLiteral null IfStatement if VariableName sparkoperator[]Var VariableName length Operator == NumberLiteral numberLiteral VariableName sparkoperatorVar Operator = VariableName sparkoperator[]Var NumberLiteral numberLiteral VariableName sparkoperatorVar Operator = MethodName merge VariableName sparkoperator[]Var VariableName sparkOp.physicalPlan MethodName addAsLeaf VariableName physicaloperatorVar VariableName sparkoperatorVar Operator = VariableName sparkoperatorVar
ThisExpression this VariableName stringVar Operator = VariableName stringVar ReturnStatement return ThisExpression this
ReturnStatement return VariableName chararraybufferVar MethodName toString
MethodName setInputMode ReturnStatement return ThisExpression this VariableName bytebufferVar MethodName remaining
IfStatement if Operator ! VariableName mavenexecutionresultVar MethodName getExceptions MethodName contains VariableName throwableVar VariableName mavenexecutionresultVar MethodName addException VariableName throwableVar ReturnStatement return VariableName mavenexecutionresultVar
ThisExpression this VariableName listVar MethodName put VariableName stringVar VariableName listVar
IfStatement if VariableName stringVar MethodName startsWith StringLiteral stringLiteral ThisExpression this VariableName stringVar Operator = VariableName stringVar SimpleType String VariableName stringVar VariableName httpservletrequestVar MethodName getContextPath PrimitiveType int VariableName intVar VariableName contextPath MethodName length Operator + VariableName stringVar MethodName length NumberLiteral numberLiteral SimpleType StringBuilder VariableName stringbuilderVar New new SimpleType StringBuilder VariableName len VariableName sb MethodName append VariableName contextPath VariableName sb MethodName append CharacterLiteral charLiteral VariableName sb MethodName append VariableName stringVar ThisExpression this VariableName stringVar Operator = VariableName sb MethodName toString ReturnStatement return ThisExpression this
IfStatement if MethodName checkForCachedAuthentication VariableName requestVar VariableName httpservletresponseVar BooleanLiteral true IfStatement if VariableName cache VariableName requestVar MethodName getSessionInternal BooleanLiteral true MethodName setPrincipal VariableName requestVar MethodName getUserPrincipal ReturnStatement return BooleanLiteral true IfStatement if VariableName containerLog MethodName isDebugEnabled VariableName containerLog MethodName debug StringLiteral stringLiteral ReturnStatement return BooleanLiteral true
ReturnStatement return NullLiteral null
SimpleType Context VariableName contextVar MethodName getContext IfStatement if VariableName contextVar Operator != NullLiteral null Operator && Operator ! VariableName contextVar MethodName getSwallowAbortedUploads VariableName requestVar MethodName action VariableName ActionCode VariableName DISABLE_SWALLOW_INPUT NullLiteral null
ReturnStatement return BooleanLiteral false
ReturnStatement return VariableName booleanVar
SimpleType NioReplicationTask VariableName nioreplicationtaskVar New new SimpleType NioReplicationTask ThisExpression this ThisExpression this VariableName nioreplicationtaskVar MethodName setUseBufferPool ThisExpression this MethodName getUseBufferPool VariableName nioreplicationtaskVar MethodName setRxBufSize MethodName getRxBufSize VariableName nioreplicationtaskVar MethodName setOptions MethodName getWorkerThreadOptions ReturnStatement return VariableName nioreplicationtaskVar
ReturnStatement return MethodName getReplicationThread
IfStatement if VariableName channelsenderVar Operator != NullLiteral null VariableName channelsenderVar MethodName heartbeat SuperMethodInvocation super MethodName heartbeat
VariableName threadlocalVar MethodName set VariableName Boolean VariableName TRUE
ReturnStatement return NullLiteral null
MethodName stateChange VariableName State VariableName IDLE VariableName State VariableName RESERVED_LOCAL
MethodName stateChange VariableName State VariableName OPEN VariableName State VariableName HALF_CLOSED_LOCAL MethodName stateChange VariableName State VariableName HALF_CLOSED_REMOTE VariableName State VariableName CLOSED_TX
MethodName stateChange VariableName State VariableName OPEN VariableName State VariableName HALF_CLOSED_REMOTE MethodName stateChange VariableName State VariableName HALF_CLOSED_LOCAL VariableName State VariableName CLOSED_RX
IfStatement if VariableName stringVar Operator == NullLiteral null ReturnStatement return NullLiteral null ReturnStatement return Name JarFactory MethodName newInstance VariableName urlVar
VariableName asyncchannelwrapperVar MethodName close
SwitchStatement switch VariableName intVar SwitchCase case VariableName PAGE_SCOPE ReturnStatement return Name Collections MethodName enumeration VariableName hashmapVar MethodName keySet SwitchCase case VariableName REQUEST_SCOPE ReturnStatement return VariableName servletrequestVar MethodName getAttributeNames SwitchCase case VariableName SESSION_SCOPE IfStatement if VariableName httpsessionVar Operator == NullLiteral null ThrowStatement throw New new SimpleType IllegalStateException Name Localizer MethodName getMessage StringLiteral stringLiteral ReturnStatement return VariableName httpsessionVar MethodName getAttributeNames SwitchCase case VariableName APPLICATION_SCOPE ReturnStatement return VariableName servletcontextVar MethodName getAttributeNames SwitchCase default ThrowStatement throw New new SimpleType IllegalArgumentException StringLiteral stringLiteral
ReturnStatement return NullLiteral null
ReturnStatement return NullLiteral null
ReturnStatement return NullLiteral null
ReturnStatement return VariableName booleanVar
IfStatement if VariableName connectionpoolVar Operator != NullLiteral null ReturnStatement return VariableName connectionpoolVar VariableName connectionpoolVar Operator = New new SimpleType ConnectionPool VariableName poolconfigurationVar ReturnStatement return VariableName connectionpoolVar
VariableName jsfoperationsVar MethodName generateAll VariableName javapackageVar
VariableName solroperationsVar MethodName addSearch VariableName javatypeVar
VariableName solroperationsVar MethodName addAll
VariableName solroperationsVar MethodName setupConfig VariableName stringVar
ReturnStatement return VariableName childlistVar
ReturnStatement return VariableName cloudcontrollerservicestubVar MethodName updateKubernetesCluster VariableName kubernetesclusterVar
ReturnStatement return VariableName cloudcontrollerservicestubVar MethodName addKubernetesCluster VariableName kubernetesclusterVar
ReturnStatement return VariableName cloudcontrollerservicestubVar MethodName addKubernetesHost VariableName stringVar VariableName kuberneteshostVar
ReturnStatement return VariableName autoscalerservicestubVar MethodName addAutoScalingPolicy VariableName autoscalepolicyVar
ReturnStatement return Name String MethodName format StringLiteral stringLiteral VariableName stringVar VariableName portmappingVar MethodName getProtocol VariableName portmappingVar MethodName getPort
ReturnStatement return Name String MethodName format StringLiteral stringLiteral VariableName portmappingVar MethodName getProtocol VariableName portmappingVar MethodName getPort
VariableName restclientVar MethodName deployEntity VariableName stringVar VariableName stringVar StringLiteral stringLiteral
VariableName restclientVar MethodName deployEntity VariableName stringVar VariableName stringVar StringLiteral stringLiteral
VariableName restclientVar MethodName deployEntity VariableName stringVar VariableName stringVar StringLiteral stringLiteral
VariableName restclientVar MethodName deployEntity VariableName stringVar VariableName stringVar StringLiteral stringLiteral
SimpleType CloudControllerServiceClient VariableName cloudcontrollerserviceclientVar MethodName getCloudControllerServiceClient IfStatement if VariableName cloudcontrollerserviceclientVar Operator != NullLiteral null TryStatement try ReturnStatement return VariableName cloudcontrollerserviceclientVar MethodName undeployKubernetesHost VariableName stringVar CatchClause catch SimpleType RemoteException VariableName remoteexceptionVar VariableName logVar MethodName error VariableName e MethodName getMessage VariableName e ThrowStatement throw New new SimpleType RestAPIException VariableName e MethodName getMessage VariableName e CatchClause catch SimpleType CloudControllerServiceNonExistingKubernetesHostExceptionException VariableName cloudcontrollerservicenonexistingkuberneteshostexceptionexceptionVar SimpleType String VariableName stringVar VariableName e MethodName getFaultMessage MethodName getNonExistingKubernetesHostException MethodName getMessage VariableName logVar MethodName error VariableName message VariableName e ThrowStatement throw New new SimpleType RestAPIException VariableName message VariableName e ReturnStatement return BooleanLiteral false
ReturnStatement return VariableName booleanVar
ReturnStatement return New new SimpleType JCasIterable VariableName collectionreaderdescriptionVar VariableName analysisenginedescriptionVar
VariableName terminal MethodName writer MethodName println VariableName attributedcharsequenceVar MethodName toAnsi VariableName terminal VariableName terminal MethodName writer MethodName flush
ParameterizedType Collection VariableName collectionVar VariableName applicationcontextVar MethodName getBeansOfType TypeLiteral class MethodName values ParameterizedType Collection VariableName collectionVar VariableName applicationcontextVar MethodName getBeansOfType TypeLiteral class MethodName values ParameterizedType Collection VariableName collectionVar VariableName applicationcontextVar MethodName getBeansOfType TypeLiteral class MethodName values SimpleType DefaultConversionService VariableName defaultconversionserviceVar New new SimpleType DefaultConversionService EnhancedForStatement for SimpleType Converter VariableName converterVar VariableName collectionVar VariableName defaultconversionserviceVar MethodName addConverter VariableName converter EnhancedForStatement for SimpleType GenericConverter VariableName genericconverterVar VariableName collectionVar VariableName defaultconversionserviceVar MethodName addConverter VariableName genericConverter EnhancedForStatement for SimpleType ConverterFactory VariableName converterfactoryVar VariableName collectionVar VariableName defaultconversionserviceVar MethodName addConverterFactory VariableName converterFactory ReturnStatement return VariableName defaultconversionserviceVar
ReturnStatement return ThisExpression this VariableName booleanVar
ReturnStatement return ThisExpression this VariableName booleanVar
ReturnStatement return New new SimpleType SequenceHash VariableName environmentVar
ReturnStatement return New new SimpleType SimpleNumber VariableName numberVar
ReturnStatement return VariableName objectVar Instanceof instanceof SimpleType SettingExpression SimpleType SettingExpression VariableName objectVar MethodName eval VariableName objectVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar VariableName TemplateBooleanModel VariableName TRUE VariableName TemplateBooleanModel VariableName FALSE
ReturnStatement return New new SimpleType ClassIntrospectorBuilder ThisExpression this
VariableName booleanVar Operator = BooleanLiteral true
ReturnStatement return Name Configuration MethodName getDefaultTemplateExceptionHandler VariableName versionVar
ReturnStatement return Name Configuration MethodName getDefaultLogTemplateExceptions VariableName versionVar
MethodName rebalanceStorageCluster VariableName stringVar VariableName stringVar VariableName intVar VariableName stringVar
SimpleType ResourceAssignment VariableName resourceassignmentVar New new SimpleType ResourceAssignment VariableName stringVar ParameterizedType Set VariableName setVar VariableName currentstateoutputVar MethodName getCurrentStateMappedPartitions VariableName stringVar EnhancedForStatement for SimpleType Partition VariableName partitionVar VariableName setVar ParameterizedType Map VariableName mapVar VariableName currentstateoutputVar MethodName getCurrentStateMap VariableName stringVar VariableName partition ParameterizedType Map VariableName mapVar Name Maps MethodName newHashMap EnhancedForStatement for SimpleType String VariableName stringVar VariableName currentStateMap MethodName keySet VariableName replicaMap MethodName put VariableName instanceName Name HelixDefinedState.DROPPED MethodName toString VariableName resourceassignmentVar MethodName addReplicaMap VariableName partition VariableName replicaMap ReturnStatement return VariableName resourceassignmentVar
VariableName loggerVar MethodName info StringLiteral stringLiteral
IfStatement if ThisExpression this VariableName nmrVar Operator == NullLiteral null ThrowStatement throw New new SimpleType IllegalArgumentException StringLiteral stringLiteral IfStatement if ThisExpression this VariableName bundlecontextVar Operator == NullLiteral null ThrowStatement throw New new SimpleType IllegalArgumentException StringLiteral stringLiteral ThisExpression this VariableName endpointregistryVar Operator = New new SimpleType RegistryWrapper VariableName nmrVar MethodName getEndpointRegistry VariableName bundlecontextVar
VariableName servicetrackerVar Operator = New new SimpleType ServiceTracker VariableName bundlecontextVar VariableName classVar MethodName getName ThisExpression this VariableName servicetrackerVar MethodName open
ThisExpression this VariableName managementstrategyVar Operator = VariableName managementstrategyVar
Modifier final SimpleType TableDesc VariableName tabledescVar VariableName catalogserviceVar MethodName getTableDesc VariableName stringVar IfStatement if VariableName tabledescVar MethodName getPartitionMethod MethodName getExpressionSchema MethodName contains VariableName stringVar ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
ReturnStatement return BooleanLiteral false
ReturnStatement return VariableName mapVar MethodName remove VariableName stringVar
ReturnStatement return VariableName intVar
SimpleType StringBuilder VariableName stringbuilderVar New new SimpleType StringBuilder IfStatement if VariableName booleanVar MethodName appendByCase VariableName stringbuilderVar VariableName identifierpolicyVar MethodName storesQuotedIdentifierAs VariableName stringbuilderVar MethodName insert NumberLiteral numberLiteral VariableName identifierpolicyVar MethodName getIdentifierQuoteString VariableName stringbuilderVar MethodName append VariableName identifierpolicyVar MethodName getIdentifierQuoteString MethodName appendByCase VariableName stringbuilderVar VariableName identifierpolicyVar MethodName storesUnquotedIdentifierAs ReturnStatement return VariableName stringbuilderVar MethodName toString
SimpleType StringBuilder VariableName stringbuilderVar New new SimpleType StringBuilder IfStatement if VariableName booleanVar MethodName appendByCase VariableName stringbuilderVar VariableName identifierpolicyVar MethodName storesQuotedIdentifierAs MethodName appendByCase VariableName stringbuilderVar VariableName identifierpolicyVar MethodName storesUnquotedIdentifierAs ReturnStatement return VariableName stringbuilderVar MethodName toString
ThisExpression this MethodName put VariableName intVar VariableName tupleVar MethodName asDatum VariableName intVar
ThrowStatement throw New new SimpleType UnsupportedOperationException
SimpleType TimeMeta VariableName timemetaVar New new SimpleType TimeMeta Name DateTimeUtil MethodName toJulianTimeMeta VariableName longVar VariableName timemetaVar ReturnStatement return VariableName timemetaVar
SimpleType TimeMeta VariableName timemetaVar New new SimpleType TimeMeta Name DateTimeUtil MethodName date2j VariableName longVar VariableName timemetaVar ReturnStatement return VariableName timemetaVar
ThrowStatement throw New new SimpleType TajoRuntimeException New new SimpleType UnsupportedException
ThrowStatement throw New new SimpleType TajoRuntimeException New new SimpleType UnsupportedException
ThisExpression this MethodName put VariableName intVar VariableName tupleVar MethodName asDatum VariableName intVar
ReturnStatement return VariableName listVar MethodName get VariableName intVar
ThisExpression this MethodName put VariableName intVar VariableName tupleVar MethodName asDatum VariableName intVar
ArrayType Datum[] VariableName datum[]Var ArrayType Datum[] VariableName datum[]Var VariableName length ForStatement for PrimitiveType int VariableName intVar NumberLiteral numberLiteral VariableName i Operator < VariableName datum[]Var VariableName length VariableName i Operator ++ VariableName datum[]Var VariableName i Operator = MethodName get VariableName i ReturnStatement return VariableName datum[]Var
ThrowStatement throw New new SimpleType TajoRuntimeException New new SimpleType UnsupportedException
ReturnStatement return New new SimpleType NettyWebSocketTransportHandler
ReturnStatement return New new SimpleType NettyTcpTransportHandler
ReturnStatement return ThisExpression this VariableName jmsconsumerinfoVar MethodName isNoLocal
MethodName getEndpoint MethodName close
IfStatement if MethodName getResourceInfo MethodName isDurable MethodName getEndpoint MethodName detach MethodName getEndpoint MethodName close
ThisExpression this VariableName localeresolverVar Operator = VariableName localeresolverVar ReturnStatement return ThisExpression this
ThisExpression this VariableName messageinterpolatorVar Operator = VariableName messageinterpolatorVar ReturnStatement return ThisExpression this
ThisExpression this VariableName messageresolverVar Operator = VariableName messageresolverVar ReturnStatement return ThisExpression this
ForStatement for ParameterizedType Class VariableName classVar VariableName classVar VariableName c Operator != NullLiteral null Operator && VariableName c Operator != TypeLiteral class VariableName c Operator = VariableName c MethodName getSuperclass TryStatement try ReturnStatement return VariableName c MethodName getDeclaredField VariableName stringVar CatchClause catch SimpleType NoSuchFieldException VariableName nosuchfieldexceptionVar ReturnStatement return NullLiteral null
EnhancedForStatement for SimpleType Annotation VariableName annotationVar VariableName processannotatedtypeVar MethodName getAnnotatedType MethodName getAnnotations IfStatement if VariableName annotation MethodName annotationType MethodName isAnnotationPresent TypeLiteral class ReturnStatement return VariableName annotation MethodName annotationType ReturnStatement return NullLiteral null
ReturnStatement return ThisExpression this VariableName stringVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName oVar
ReturnStatement return VariableName hasnameVar MethodName getName
ReturnStatement return ThisExpression this VariableName booleanVar
ReturnStatement return ThisExpression this VariableName booleanVar
EnhancedForStatement for SimpleType Dependency VariableName dependencyVar VariableName listVar MethodName checkForMatch VariableName dependency
ReturnStatement return Name SystemUtils MethodName isJavaVersionAtLeast VariableName floatVar
ReturnStatement return Name SystemUtils MethodName isJavaVersionAtLeast VariableName intVar
VariableName gbeaninstancestateVar MethodName fail
MethodName start VariableName bundlecontextVar
MethodName stop VariableName bundlecontextVar
ReturnStatement return MethodName getPropertyAsBoolean VariableName stringVar
ReturnStatement return MethodName getAuthObjects MethodName size
ReturnStatement return SimpleType TestElement MethodName getUserObject
VariableName loggerVar MethodName info StringLiteral stringLiteral MethodName checkOwner StringLiteral stringLiteral VariableName jmeterengineVar MethodName runTest
IfStatement if VariableName jmeterengineVar Operator != NullLiteral null VariableName loggerVar MethodName info StringLiteral stringLiteral MethodName checkOwner StringLiteral stringLiteral VariableName jmeterengineVar MethodName reset VariableName loggerVar MethodName warn StringLiteral stringLiteral
IfStatement if VariableName booleanVar VariableName loggerVar MethodName info StringLiteral stringLiteral VariableName loggerVar MethodName info StringLiteral stringLiteral VariableName jmeterengineVar MethodName stopTest VariableName booleanVar VariableName loggerVar MethodName info StringLiteral stringLiteral
ReturnStatement return MethodName getPropertyAsBoolean VariableName stringVar
ReturnStatement return VariableName stringVar MethodName trim MethodName replaceAll StringLiteral stringLiteral StringLiteral stringLiteral MethodName replaceAll StringLiteral stringLiteral StringLiteral stringLiteral MethodName replaceAll StringLiteral stringLiteral StringLiteral stringLiteral
ReturnStatement return MethodName getPropertyAsBoolean VariableName stringVar
ReturnStatement return Name Iterators MethodName toString Name Iterators MethodName transform VariableName collectionVar MethodName iterator
ReturnStatement return Name Iterators MethodName toString Name Iterators MethodName transform VariableName collectionVar MethodName iterator
ReturnStatement return Name Iterators MethodName toString Name Iterators MethodName transform VariableName collectionVar MethodName iterator
ReturnStatement return New new SimpleType BytesBuilder
ReturnStatement return New new SimpleType BytesBuilder VariableName intVar
ReturnStatement return NullLiteral null
ReturnStatement return ThisExpression this VariableName stringVar
SimpleType String VariableName stringVar MethodName normalize StringLiteral stringLiteral Operator + VariableName iduccworkjobVar MethodName getDuccId MethodName getFriendly SimpleType String VariableName stringVar VariableName stringVar Operator + VariableName File VariableName separator VariableName stringVar StringLiteral stringLiteral VariableName stringVar SimpleType FileOutputStream VariableName fileoutputstreamVar NullLiteral null SimpleType ObjectOutputStream VariableName objectoutputstreamVar NullLiteral null VariableName fileoutputstreamVar Operator = New new SimpleType FileOutputStream VariableName stringVar VariableName objectoutputstreamVar Operator = New new SimpleType ObjectOutputStream VariableName fileoutputstreamVar VariableName objectoutputstreamVar MethodName writeObject VariableName iduccworkjobVar VariableName objectoutputstreamVar MethodName close
SimpleType String VariableName stringVar MethodName normalize StringLiteral stringLiteral Operator + VariableName iduccworkreservationVar MethodName getDuccId MethodName getFriendly SimpleType String VariableName stringVar VariableName stringVar Operator + VariableName File VariableName separator VariableName stringVar StringLiteral stringLiteral VariableName stringVar SimpleType FileOutputStream VariableName fileoutputstreamVar NullLiteral null SimpleType ObjectOutputStream VariableName objectoutputstreamVar NullLiteral null VariableName fileoutputstreamVar Operator = New new SimpleType FileOutputStream VariableName stringVar VariableName objectoutputstreamVar Operator = New new SimpleType ObjectOutputStream VariableName fileoutputstreamVar VariableName objectoutputstreamVar MethodName writeObject VariableName iduccworkreservationVar VariableName objectoutputstreamVar MethodName close
VariableName booleanVar Operator = BooleanLiteral true
MethodName stop BooleanLiteral true
EnhancedForStatement for SimpleType PagingStore VariableName pagingstoreVar VariableName concurrentmapVar MethodName values SimpleType AddressSettings VariableName addresssettingsVar ThisExpression this VariableName hierarchicalrepositoryVar MethodName getMatch VariableName store MethodName getAddress MethodName toString VariableName store MethodName applySetting VariableName settings
TryStatement try IfStatement if VariableName loggerVar MethodName isDebugEnabled VariableName loggerVar MethodName debug StringLiteral stringLiteral Operator + VariableName simplestringVar TryStatement try VariableName activemqserverVar MethodName destroyQueue VariableName simplestringVar NullLiteral null BooleanLiteral false CatchClause catch SimpleType ActiveMQException VariableName activemqexceptionVar Name ActiveMQServerLogger.LOGGER MethodName errorOnDeletingQueue VariableName simplestringVar MethodName toString VariableName e CatchClause catch SimpleType Exception VariableName exceptionVar Name ActiveMQServerLogger.LOGGER MethodName errorRemovingTempQueue VariableName e VariableName simplestringVar
ReturnStatement return VariableName concurrentmapVar MethodName putIfAbsent VariableName addressinfoVar MethodName getName VariableName addressinfoVar Operator == NullLiteral null
ReturnStatement return VariableName booleanVar Operator != NullLiteral null VariableName booleanVar VariableName AddressSettings VariableName booleanVar
ReturnStatement return VariableName booleanVar
IfStatement if MethodName checkForCachedAuthentication VariableName requestVar VariableName httpservletresponseVar BooleanLiteral true IfStatement if VariableName cache VariableName requestVar MethodName getSessionInternal BooleanLiteral true MethodName setPrincipal VariableName requestVar MethodName getUserPrincipal ReturnStatement return BooleanLiteral true IfStatement if VariableName containerLog MethodName isDebugEnabled VariableName containerLog MethodName debug StringLiteral stringLiteral ReturnStatement return BooleanLiteral true
ReturnStatement return NullLiteral null
SimpleType Context VariableName contextVar MethodName getContext IfStatement if VariableName contextVar Operator != NullLiteral null Operator && Operator ! VariableName contextVar MethodName getSwallowAbortedUploads VariableName requestVar MethodName action VariableName ActionCode VariableName DISABLE_SWALLOW_INPUT NullLiteral null
ReturnStatement return BooleanLiteral false
ReturnStatement return VariableName booleanVar
SimpleType NioReplicationTask VariableName nioreplicationtaskVar New new SimpleType NioReplicationTask ThisExpression this ThisExpression this VariableName nioreplicationtaskVar MethodName setUseBufferPool ThisExpression this MethodName getUseBufferPool VariableName nioreplicationtaskVar MethodName setRxBufSize MethodName getRxBufSize VariableName nioreplicationtaskVar MethodName setOptions MethodName getWorkerThreadOptions ReturnStatement return VariableName nioreplicationtaskVar
ReturnStatement return MethodName getReplicationThread
IfStatement if VariableName channelsenderVar Operator != NullLiteral null VariableName channelsenderVar MethodName heartbeat SuperMethodInvocation super MethodName heartbeat
VariableName threadlocalVar MethodName set VariableName Boolean VariableName TRUE
ReturnStatement return NullLiteral null
MethodName stateChange VariableName State VariableName IDLE VariableName State VariableName RESERVED_LOCAL
MethodName stateChange VariableName State VariableName OPEN VariableName State VariableName HALF_CLOSED_LOCAL MethodName stateChange VariableName State VariableName HALF_CLOSED_REMOTE VariableName State VariableName CLOSED_TX
MethodName stateChange VariableName State VariableName OPEN VariableName State VariableName HALF_CLOSED_REMOTE MethodName stateChange VariableName State VariableName HALF_CLOSED_LOCAL VariableName State VariableName CLOSED_RX
IfStatement if VariableName stringVar Operator == NullLiteral null ReturnStatement return NullLiteral null ReturnStatement return Name JarFactory MethodName newInstance VariableName urlVar
VariableName asyncchannelwrapperVar MethodName close
ReturnStatement return NullLiteral null
ReturnStatement return NullLiteral null
ReturnStatement return VariableName booleanVar
IfStatement if VariableName connectionpoolVar Operator != NullLiteral null ReturnStatement return VariableName connectionpoolVar VariableName connectionpoolVar Operator = New new SimpleType ConnectionPool VariableName poolconfigurationVar ReturnStatement return VariableName connectionpoolVar
TryStatement try ReturnStatement return Name Optional MethodName of VariableName factoryVar MethodName fromString VariableName mailboxcreationidVar MethodName getCreationId CatchClause catch SimpleType Exception VariableName exceptionVar ReturnStatement return Name Optional MethodName empty
IfStatement if MethodName containsMailboxNotOwn VariableName creationmessageentryVar MethodName getValue MethodName getMailboxIds VariableName mailboxsessionVar ThrowStatement throw New new SimpleType MailboxNotOwnedException
IfStatement if Operator ! VariableName optionalVar MethodName isPresent VariableName operationVar MethodName perform ReturnStatement return VariableName optionalVar
ReturnStatement return MethodName builder MethodName build
ReturnStatement return VariableName uuidVar
ReturnStatement return VariableName listVar MethodName stream MethodName map
ParameterizedType Map VariableName mapVar Name Maps MethodName newHashMap VariableName mapVar IfStatement if VariableName sessionVar MethodName isAuthenticated VariableName mapVar MethodName put VariableName Capabilities VariableName OWNER VariableName sessionVar MethodName getUser ReturnStatement return VariableName mapVar
Name Preconditions MethodName checkNotNull VariableName indexnameVar ThisExpression this VariableName indexnameVar Operator = VariableName indexnameVar ReturnStatement return ThisExpression this
ReturnStatement return VariableName stringVar Operator + StringLiteral stringLiteral VariableName stringVar StringLiteral stringLiteral VariableName stringVar
ReturnStatement return VariableName authenticatorVar MethodName isAuthentic VariableName stringVar VariableName stringVar
ReturnStatement return VariableName booleanVar
PrimitiveType int VariableName intVar NumberLiteral numberLiteral EnhancedForStatement for SimpleType RemoteRunFactory VariableName remoterunfactoryVar VariableName mapVar MethodName values VariableName intVar Operator += VariableName rrf MethodName countOperatingRuns ReturnStatement return VariableName intVar
ReturnStatement return MethodName getFactory MethodName countOperatingRuns
MethodName installAsInstance NullLiteral null TryStatement try IfStatement if VariableName bouncycastleproviderVar Operator != NullLiteral null MethodName removeProvider VariableName bouncycastleproviderVar MethodName getName CatchClause catch SimpleType SecurityException VariableName securityexceptionVar MethodName log MethodName warn StringLiteral stringLiteral Operator + StringLiteral stringLiteral VariableName e
ReturnStatement return ParameterizedType List MethodName namedQuery StringLiteral stringLiteral MethodName execute
ReturnStatement return MethodName opt
ThisExpression this VariableName stringVar Operator = VariableName stringVar ReturnStatement return ThisExpression this
SynchronizedStatement synchronized VariableName hashbimapVar EnhancedForStatement for SimpleType ClusterNode VariableName clusternodeVar VariableName clusterVar MethodName getPhysicalCluster MethodName getNodes SimpleType Integer VariableName integerVar VariableName clusterNode MethodName getPartition VariableName hashbimapVar MethodName forcePut VariableName partition VariableName clusterNode
ReturnStatement return VariableName curatorframeworkimplVar
ReturnStatement return VariableName listenercontainerVar
ReturnStatement return New new SimpleType ZPathImpl VariableName listVar Name NodeName MethodName nameFrom VariableName objectVar
ReturnStatement return VariableName modeledcacheimplVar
ReturnStatement return New new ParameterizedType ModelSpecImpl VariableName zpathVar VariableName modelserializerVar VariableName createmodeVar VariableName listVar VariableName setVar VariableName setVar VariableName longVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName booleanVar
VariableName mapVar MethodName remove VariableName stringVar
ReturnStatement return MethodName createGroovyMap VariableName processcontextVar NullLiteral null
VariableName reentrantlockVar MethodName lock TryStatement try VariableName eventstateVar VariableName hasClusterStateChanged Operator = BooleanLiteral true MethodName notifyWmThreadUnderLock VariableName reentrantlockVar MethodName unlock
ReturnStatement return VariableName javapairrddVar MethodName mapPartitionsToPair VariableName hivemapfunctionVar
ReturnStatement return VariableName hashtableimplementationtypeVar
ReturnStatement return VariableName hashtablekindVar
ReturnStatement return VariableName hashtablekeytypeVar
ReturnStatement return VariableName booleanVar
ReturnStatement return ThisExpression this VariableName booleanVar
ReturnStatement return VariableName booleanVar
MethodName unlockBuffer SimpleType LlapDataBuffer VariableName memorybufferVar BooleanLiteral true
EnhancedForStatement for SimpleType MemoryBuffer VariableName memorybufferVar VariableName listVar MethodName unlockBuffer SimpleType LlapDataBuffer VariableName b BooleanLiteral true
ReturnStatement return MethodName lockBuffer SimpleType LlapDataBuffer VariableName memorybufferVar BooleanLiteral false
SimpleType String VariableName stringVar NullLiteral null SimpleType FileChecksum VariableName filechecksumVar VariableName filesystemVar MethodName getFileChecksum VariableName pathVar IfStatement if VariableName filechecksumVar Operator != NullLiteral null VariableName stringVar Operator = Name StringUtils MethodName byteToHexString VariableName filechecksumVar MethodName getBytes NumberLiteral numberLiteral VariableName filechecksumVar MethodName getLength ReturnStatement return VariableName stringVar
IfStatement if VariableName tVar Operator == NullLiteral null Operator || VariableName t[]Var VariableName length Operator == NumberLiteral numberLiteral ReturnStatement return BooleanLiteral false VariableName poolobjecthelperVar MethodName resetBeforeOffer VariableName tVar ReturnStatement return MethodName offerImpl VariableName tVar
Name LOG MethodName error StringLiteral stringLiteral ThrowStatement throw New new SimpleType SerDeException StringLiteral stringLiteral
ReturnStatement return BooleanLiteral true
ReturnStatement return BooleanLiteral false
IfStatement if VariableName bytearrayrefVar Operator == NullLiteral null VariableName bytearrayrefVar Operator = New new SimpleType ByteArrayRef SimpleType BinaryComparable VariableName binarycomparableVar SimpleType BinaryComparable VariableName writableVar VariableName bytearrayrefVar MethodName setData VariableName binarycomparableVar MethodName getBytes VariableName lazystructVar MethodName init VariableName bytearrayrefVar NumberLiteral numberLiteral VariableName binarycomparableVar MethodName getLength VariableName booleanVar Operator = BooleanLiteral false VariableName booleanVar Operator = BooleanLiteral true ReturnStatement return VariableName lazystructVar
ParameterizedType Map VariableName mapVar VariableName shellcontextVar MethodName getParameters IfStatement if VariableName mapVar MethodName containsKey StringLiteral stringLiteral ReturnStatement return BooleanLiteral false ReturnStatement return BooleanLiteral true
ReturnStatement return VariableName projectoperationsVar MethodName isFocusedProjectAvailable
ReturnStatement return VariableName jpaentitymetadataVar
SimpleType String VariableName stringVar VariableName projectsettingsserviceVar MethodName getProperty VariableName stringVar IfStatement if VariableName stringVar Operator != NullLiteral null Operator && VariableName stringVar MethodName equals StringLiteral stringLiteral ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
Modifier final SimpleType Property VariableName propertyVar VariableName statementVar MethodName getPredicate IfStatement if VariableName propertyVar MethodName getNameSpace MethodName equals Name RDF MethodName getURI Operator && VariableName propertyVar MethodName getLocalName MethodName startsWith StringLiteral stringLiteral TryStatement try Name Integer MethodName parseInt VariableName propertyVar MethodName getLocalName MethodName substring NumberLiteral numberLiteral ReturnStatement return BooleanLiteral true CatchClause catch Modifier final SimpleType NumberFormatException VariableName numberformatexceptionVar ReturnStatement return BooleanLiteral false
PrimitiveType boolean VariableName booleanVar VariableName tVar MethodName isInTransaction IfStatement if Operator ! VariableName booleanVar VariableName tVar MethodName begin VariableName ReadWrite VariableName READ TryStatement try SimpleType X VariableName xVar VariableName supplierVar MethodName get IfStatement if Operator ! VariableName booleanVar VariableName tVar MethodName end ReturnStatement return VariableName xVar CatchClause catch SimpleType Throwable VariableName throwableVar MethodName onThrowable VariableName th VariableName tVar ThrowStatement throw VariableName th
IfStatement if VariableName prefixmapVar Operator == NullLiteral null ReturnStatement return NullLiteral null ParameterizedType Pair VariableName pairVar VariableName prefixmapVar MethodName abbrev VariableName stringVar IfStatement if VariableName pairVar Operator == NullLiteral null ReturnStatement return NullLiteral null ReturnStatement return New new SimpleType RDF_PrefixName VariableName pairVar MethodName getLeft VariableName pairVar MethodName getRight
IfStatement if VariableName writergraphriotVar Operator != NullLiteral null ReturnStatement return VariableName writergraphriotVar IfStatement if VariableName stringVar Operator == NullLiteral null ThrowStatement throw New new SimpleType IllegalArgumentException StringLiteral stringLiteral SimpleType RDFFormat VariableName rdfformatVar Name RDFWriterRegistry MethodName getFormatForJenaWriter VariableName stringVar IfStatement if VariableName rdfformatVar Operator != NullLiteral null ReturnStatement return Name RDFDataMgr MethodName createGraphWriter VariableName rdfformatVar SimpleType Lang VariableName langVar Name RDFLanguages MethodName nameToLang VariableName stringVar IfStatement if VariableName langVar Operator != NullLiteral null ReturnStatement return Name RDFDataMgr MethodName createGraphWriter VariableName langVar ThrowStatement throw New new SimpleType RiotException StringLiteral stringLiteral Operator + VariableName stringVar StringLiteral stringLiteral
ReturnStatement return VariableName booleanVar
MethodName emit VariableName nodeVar VariableName nodeVar VariableName nodeVar
Name Objects MethodName requireNonNull VariableName langVar ReturnStatement return VariableName registry MethodName get VariableName langVar
ParameterizedType List VariableName listVar New new ParameterizedType ArrayList IfStatement if Operator ! Name Var MethodName isVar VariableName nodeVar ThrowStatement throw New new SimpleType ARQInternalErrorException StringLiteral stringLiteral SimpleType Var VariableName varVar Name Var MethodName alloc VariableName nodeVar ForStatement for VariableName iteratorVar MethodName hasNext SimpleType Node VariableName nodeVar VariableName iteratorVar MethodName next VariableName listVar MethodName add Name BindingFactory MethodName binding VariableName bindingVar VariableName varVar VariableName n ReturnStatement return New new SimpleType QueryIterPlainWrapper VariableName listVar MethodName iterator VariableName executioncontextVar
ParameterizedType Iterator VariableName iteratorVar Name PathEval MethodName eval VariableName graphVar VariableName nodeVar VariableName pathVar VariableName executioncontextVar MethodName getContext PrimitiveType int VariableName intVar NumberLiteral numberLiteral ForStatement for VariableName iteratorVar MethodName hasNext SimpleType Node VariableName nodeVar VariableName iteratorVar MethodName next IfStatement if VariableName n MethodName sameValueAs VariableName nodeVar VariableName intVar Operator ++ ReturnStatement return New new SimpleType QueryIterYieldN VariableName intVar VariableName bindingVar VariableName executioncontextVar
IfStatement if VariableName opVar Instanceof instanceof SimpleType OpFilter ReturnStatement return SimpleType OpFilter VariableName opVar ReturnStatement return New new SimpleType OpFilter VariableName opVar
IfStatement if Operator ! VariableName nodeVar MethodName isBlank ReturnStatement return VariableName nodeVar SimpleType Node VariableName nodeVar VariableName mapVar MethodName get VariableName nodeVar IfStatement if VariableName nodeVar Operator == NullLiteral null SimpleType Var VariableName varVar VariableName varallocVar MethodName allocVar VariableName mapVar MethodName put VariableName nodeVar VariableName v VariableName nodeVar Operator = VariableName v ReturnStatement return VariableName nodeVar
MethodName acquireWriterLock BooleanLiteral true
IfStatement if VariableName booleanVar ReturnStatement return MethodName acceptAdditionaOther VariableName tVar ReturnStatement return MethodName acceptOtherAdditional VariableName tVar
VariableName longVar Operator ++
TryStatement try VariableName writerVar MethodName write VariableName stringVar CatchClause catch SimpleType IOException VariableName ioexceptionVar Name IO MethodName exception VariableName ex
TryStatement try VariableName writerVar MethodName write VariableName char[]Var CatchClause catch SimpleType IOException VariableName ioexceptionVar Name IO MethodName exception VariableName ex
IfStatement if Operator ! VariableName booleanVar ReturnStatement return IfStatement if VariableName itemVar Operator == NullLiteral null Name System.err MethodName println StringLiteral stringLiteral ThrowStatement throw New new SimpleType TerminationException NumberLiteral numberLiteral MethodName divider SimpleType IndentedWriter VariableName indentedwriterVar New new SimpleType IndentedWriter VariableName System VariableName indentedwriterVar VariableName booleanVar SimpleType PrefixMapping VariableName prefixmappingVar NullLiteral null SimpleType SerializationContext VariableName serializationcontextVar New new SimpleType SerializationContext VariableName prefixmappingVar Name ItemWriter MethodName write VariableName indentedwriterVar VariableName itemVar VariableName serializationcontextVar VariableName indentedwriterVar MethodName ensureStartOfLine VariableName indentedwriterVar MethodName flush
ReturnStatement return MethodName getTransactionHandler MethodName calculate VariableName supplierVar
IfStatement if Operator ! VariableName booleanVar Operator && VariableName stringVar Operator != NullLiteral null VariableName indentedwriterVar MethodName print VariableName stringVar VariableName booleanVar Operator = BooleanLiteral false VariableName printableVar MethodName output VariableName indentedwriterVar
ReturnStatement return New new SimpleType GraphSDB VariableName storeVar VariableName nodeVar
IfStatement if Operator ! VariableName service.endpoints MethodName contains VariableName stringVar ReturnStatement return BooleanLiteral false VariableName sparql_servletbaseVar MethodName executeLifecycle VariableName httpactionVar ReturnStatement return BooleanLiteral true
WhileStatement while VariableName datasetgraphVar Instanceof instanceof SimpleType DatasetGraphWrapper VariableName datasetgraphVar Operator = SimpleType DatasetGraphWrapper VariableName datasetgraphVar MethodName getWrapped ReturnStatement return VariableName datasetgraphVar
PrimitiveType boolean VariableName booleanVar Operator ! VariableName setVar MethodName contains VariableName tVar IfStatement if VariableName booleanVar VariableName setVar MethodName add VariableName tVar ReturnStatement return VariableName booleanVar
SimpleType String VariableName stringVar VariableName commandlineVar MethodName toString PrimitiveType int VariableName intVar VariableName stringVar MethodName indexOf CharacterLiteral charLiteral IfStatement if VariableName intVar Operator > NumberLiteral numberLiteral VariableName stringVar Operator = VariableName stringVar MethodName replaceAll StringLiteral stringLiteral StringLiteral stringLiteral ReturnStatement return VariableName stringVar
SimpleType File VariableName fileVar MethodName getSettingsFile IfStatement if VariableName fileVar MethodName exists SimpleType SvnXpp3Reader VariableName svnxpp3readerVar New new SimpleType SvnXpp3Reader TryStatement try ReturnStatement return VariableName reader MethodName read Name ReaderFactory MethodName newXmlReader VariableName fileVar CatchClause catch SimpleType FileNotFoundException VariableName filenotfoundexceptionVar CatchClause catch SimpleType IOException VariableName ioexceptionVar CatchClause catch SimpleType XmlPullParserException VariableName xmlpullparserexceptionVar SimpleType String VariableName stringVar VariableName fileVar MethodName getAbsolutePath Operator + StringLiteral stringLiteral VariableName e MethodName getMessage Name System.err MethodName println VariableName message ReturnStatement return New new SimpleType Settings
VariableName longVar Operator = VariableName contextVar MethodName getLong StringLiteral stringLiteral Operator - NumberLiteral numberLiteral VariableName longVar Operator = VariableName contextVar MethodName getLong StringLiteral stringLiteral Operator - NumberLiteral numberLiteral VariableName intVar Operator = VariableName contextVar MethodName getInteger StringLiteral stringLiteral NumberLiteral numberLiteral PrimitiveType int VariableName intVar VariableName contextVar MethodName getInteger StringLiteral stringLiteral NumberLiteral numberLiteral MethodName prepEventData VariableName intVar
ReturnStatement return VariableName booleanVar
PrimitiveType int VariableName intVar VariableName stringVar MethodName indexOf CharacterLiteral charLiteral IfStatement if VariableName intVar Operator == Operator - NumberLiteral numberLiteral ReturnStatement return VariableName stringVar ReturnStatement return VariableName stringVar MethodName substring NumberLiteral numberLiteral VariableName intVar
ReturnStatement return VariableName operationVar MethodName getResponse MethodName getHeaders MethodName keySet
ReturnStatement return VariableName operationVar MethodName getRequest MethodName getHeaders MethodName keySet
ReturnStatement return VariableName floatVar
ReturnStatement return New new SimpleType DefaultOptionBuilder MethodName withLongName VariableName stringVar MethodName withRequired BooleanLiteral false MethodName withArgument New new SimpleType ArgumentBuilder MethodName withName VariableName stringVar MethodName withMinimum NumberLiteral numberLiteral MethodName withMaximum NumberLiteral numberLiteral MethodName create MethodName withDescription StringLiteral stringLiteral MethodName withShortName VariableName stringVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName doubleVar
ReturnStatement return Name Math MethodName sqrt VariableName doubleVar
IfStatement if VariableName intVar Operator < NumberLiteral numberLiteral Operator || VariableName intVar Operator >= MethodName rowSize ThrowStatement throw New new SimpleType IndexException VariableName intVar MethodName rowSize ReturnStatement return New new SimpleType DenseVector VariableName double[][]Var VariableName intVar BooleanLiteral true
IfStatement if VariableName intVar Operator == VariableName LOCK_NONE ReturnStatement return WhileStatement while VariableName openjpastatemanagerVar MethodName getOwner Operator != NullLiteral null VariableName openjpastatemanagerVar Operator = VariableName openjpastatemanagerVar MethodName getOwner PrimitiveType int VariableName intVar MethodName getLockLevel VariableName openjpastatemanagerVar IfStatement if Operator ! VariableName openjpastatemanagerVar MethodName isPersistent Operator || VariableName openjpastatemanagerVar MethodName isNew VariableName intVar Operator <= VariableName intVar ReturnStatement return TryStatement try MethodName lockInternal VariableName openjpastatemanagerVar VariableName intVar VariableName intVar VariableName objectVar VariableName booleanVar CatchClause catch SimpleType RuntimeException VariableName runtimeexceptionVar MethodName setLockLevel VariableName openjpastatemanagerVar VariableName intVar ThrowStatement throw VariableName re
ReturnStatement return VariableName booleanVar
IfStatement if VariableName metadatafactoryVar Operator == NullLiteral null SimpleType MetaDataFactory VariableName metadatafactoryVar VariableName openjpaconfigurationVar MethodName newMetaDataFactoryInstance IfStatement if VariableName mdf Operator == NullLiteral null ThrowStatement throw New new SimpleType MetaDataException VariableName localizerVar MethodName get StringLiteral stringLiteral MethodName setMetaDataFactory VariableName mdf
ReturnStatement return New new SimpleType Not ThisExpression this MethodName markNegated
Name System.err MethodName println VariableName stringVar
SimpleType DBDictionary VariableName dbdictionaryVar VariableName jdbcconfigurationVar MethodName getDBDictionaryInstance SimpleType PreparedStatement VariableName preparedstatementVar NullLiteral null PrimitiveType int VariableName intVar Operator - NumberLiteral numberLiteral TryStatement try VariableName preparedstatementVar Operator = VariableName connectionVar MethodName prepareStatement VariableName stringVar VariableName dbdictionaryVar MethodName setTimeouts VariableName preparedstatementVar VariableName jdbcconfigurationVar BooleanLiteral false VariableName intVar Operator = VariableName preparedstatementVar MethodName executeUpdate CatchClause catch SimpleType Exception VariableName exceptionVar IfStatement if VariableName preparedstatementVar Operator != NullLiteral null TryStatement try VariableName preparedstatementVar MethodName close CatchClause catch SimpleType SQLException VariableName sqlexceptionVar ReturnStatement return VariableName intVar
IfStatement if ThisExpression this VariableName amqptemplateVar Instanceof instanceof SimpleType Lifecycle SimpleType Lifecycle ThisExpression this VariableName amqptemplateVar MethodName stop
Name Assert MethodName notNull VariableName levelVar StringLiteral stringLiteral ThisExpression this VariableName levelVar Operator = VariableName levelVar
ReturnStatement return ThisExpression this VariableName messagesourceVar MethodName receive
ThisExpression this VariableName intVar Operator = VariableName intVar ReturnStatement return ThisExpression this
ThisExpression this VariableName comparatorVar Operator = VariableName comparatorVar ReturnStatement return ThisExpression this
ReturnStatement return ThisExpression this VariableName booleanVar
Name Assert MethodName notNull VariableName expressionVar StringLiteral stringLiteral ThisExpression this VariableName expressionVar Operator = VariableName expressionVar
ThisExpression this VariableName filelistfilterVar Operator = VariableName filelistfilterVar
ThisExpression this VariableName filelistfilterVar Operator = VariableName filelistfilterVar
Name Assert MethodName notNull VariableName webservicetemplateVar StringLiteral stringLiteral ThisExpression this VariableName webservicetemplateVar Operator = VariableName webservicetemplateVar ThisExpression this VariableName booleanVar Operator = BooleanLiteral true
VariableName ftpsclientVar MethodName execPBSZ NumberLiteral numberLiteral VariableName ftpsclientVar MethodName execPROT ThisExpression this VariableName stringVar
VariableName listVar MethodName add VariableName scalarmodelsubscriberVar
PrimitiveType int VariableName intVar VariableName Integer VariableName MIN_VALUE EnhancedForStatement for SimpleType T VariableName tVar VariableName classVar MethodName getEnumConstants Modifier final PrimitiveType int VariableName intVar VariableName e MethodName name MethodName length Modifier final PrimitiveType int VariableName intVar VariableName e MethodName toString MethodName length VariableName intVar Operator = Name Math MethodName max VariableName intVar Name Math MethodName max VariableName nameLength VariableName toStringLength ReturnStatement return VariableName intVar
Modifier final SimpleType RecreatableDomainObject VariableName recreatabledomainobjectVar SimpleType RecreatableDomainObject VariableName objectVar VariableName recreatabledomainobjectVar MethodName __isis_recreate VariableName stringVar
Modifier final SimpleType ViewModel VariableName viewmodelVar SimpleType ViewModel VariableName objectVar VariableName viewmodelVar MethodName viewModelInit VariableName stringVar
ReturnStatement return VariableName objectmemberVar MethodName getIdentifier MethodName toClassAndNameIdentityString
ThisExpression this VariableName subclasslistVar MethodName addSubclass VariableName objectspecificationVar
ReturnStatement return VariableName objectspecificationVar MethodName getObjectActions VariableName ActionType VariableName ALL VariableName Contributed VariableName INCLUDED Name Filters MethodName any
Modifier final SimpleType Object VariableName objectVar Name JDOHelper MethodName getObjectId VariableName persistableVar IfStatement if VariableName objectVar Instanceof instanceof SimpleType DatastoreId Modifier final SimpleType DatastoreId VariableName datastoreidVar SimpleType DatastoreId VariableName objectVar Modifier final SimpleType Object VariableName objectVar VariableName datastoreId MethodName getKeyAsObject ReturnStatement return VariableName id Operator != NullLiteral null Operator && VariableName id Instanceof instanceof SimpleType Long SimpleType Long VariableName id NullLiteral null ReturnStatement return NullLiteral null
Modifier final ParameterizedType Class VariableName classVar VariableName persistableVar MethodName getClass Modifier final SimpleType String VariableName stringVar VariableName classVar MethodName getName Modifier final SimpleType TypeMetadata VariableName typemetadataVar MethodName getPersistenceManagerFactory MethodName getMetadata VariableName stringVar Modifier final SimpleType String VariableName stringVar VariableName typemetadataVar MethodName toString ReturnStatement return New new SimpleType Clob Name Util MethodName withSuffix VariableName stringVar StringLiteral stringLiteral StringLiteral stringLiteral VariableName stringVar
Modifier final SimpleType Object VariableName objectVar Name JDOHelper MethodName getVersion VariableName persistableVar ReturnStatement return VariableName objectVar Operator != NullLiteral null Operator && VariableName objectVar Instanceof instanceof SimpleType Timestamp SimpleType Timestamp VariableName objectVar NullLiteral null
Modifier final SimpleType Object VariableName objectVar Name JDOHelper MethodName getVersion VariableName persistableVar ReturnStatement return VariableName objectVar Operator != NullLiteral null Operator && VariableName objectVar Instanceof instanceof SimpleType Long SimpleType Long VariableName objectVar NullLiteral null
ReturnStatement return MethodName getIsisSessionFactory MethodName getServicesInjector MethodName lookupService TypeLiteral class
IfStatement if MethodName getHintStoreUsingWicketSession Operator != NullLiteral null Modifier final SimpleType Bookmark VariableName bookmarkVar VariableName bookmarkService MethodName bookmarkFor VariableName objectVar MethodName getHintStoreUsingWicketSession MethodName removeAll VariableName bookmark ReturnStatement return VariableName objectVar
Modifier final SimpleType Transaction VariableName transactionVar VariableName persistencemanagerVar MethodName currentTransaction IfStatement if VariableName transactionVar MethodName isActive ThrowStatement throw New new SimpleType IllegalStateException StringLiteral stringLiteral VariableName transactionVar MethodName begin
Modifier final SimpleType Transaction VariableName transactionVar VariableName persistencemanagerVar MethodName currentTransaction IfStatement if VariableName transactionVar MethodName isActive VariableName transactionVar MethodName commit
Modifier final SimpleType Transaction VariableName transactionVar VariableName persistencemanagerVar MethodName currentTransaction IfStatement if VariableName transactionVar MethodName isActive VariableName transactionVar MethodName rollback
ReturnStatement return MethodName numAdaptersOfKind VariableName PublishedObject VariableName ChangeKind VariableName CREATE
ReturnStatement return MethodName numAdaptersOfKind VariableName PublishedObject VariableName ChangeKind VariableName UPDATE
ReturnStatement return MethodName numAdaptersOfKind VariableName PublishedObject VariableName ChangeKind VariableName DELETE
Modifier final ParameterizedType Class VariableName classVar ParameterizedType Class VariableName tVar MethodName getClass Modifier final SimpleType T VariableName tVar MethodName readParam VariableName stringVar VariableName executioncontextVar VariableName classVar IfStatement if VariableName tVar Operator != NullLiteral null ReturnStatement return SimpleType T VariableName tVar ReturnStatement return VariableName tVar
Modifier final SimpleType String VariableName stringVar VariableName jaxbService MethodName toXml VariableName dtoVar ReturnStatement return New new SimpleType Clob Name Util MethodName withSuffix VariableName stringVar StringLiteral stringLiteral StringLiteral stringLiteral VariableName stringVar
ReturnStatement return VariableName configurationService MethodName allProperties
VariableName metaModelService MethodName rebuild VariableName objectVar MethodName getClass
Modifier final SimpleType String VariableName stringVar VariableName layoutService MethodName toXml VariableName objectVar MethodName getClass VariableName styleVar ReturnStatement return New new SimpleType Clob Name Util MethodName withSuffix VariableName stringVar VariableName styleVar MethodName name MethodName toLowerCase Operator + StringLiteral stringLiteral StringLiteral stringLiteral VariableName stringVar
ReturnStatement return VariableName bookmarkService MethodName lookup VariableName bookmarkholderVar
ReturnStatement return VariableName bookmarkService MethodName lookup VariableName bookmarkholderVar
IfStatement if Operator ! Name U MethodName isWindows ReturnStatement return VariableName stringVar ReturnStatement return VariableName stringVar MethodName replace CharacterLiteral charLiteral VariableName File VariableName separatorChar
ReturnStatement return VariableName cacheatomicitymodeVar
ReturnStatement return VariableName cachemodeVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName longVar
SynchronizedStatement synchronized ThisExpression this AssertStatement assert VariableName booleanVar ThisExpression this AssertStatement assert Operator ! VariableName booleanVar ThisExpression this VariableName booleanVar Operator = BooleanLiteral true IfStatement if VariableName ignitebitupleVar Operator != NullLiteral null ParameterizedType IgniteInClosure VariableName igniteinclosureVar VariableName ignitebitupleVar MethodName get2 AssertStatement assert VariableName c Operator != NullLiteral null VariableName c MethodName apply BooleanLiteral false VariableName ignitebitupleVar Operator = NullLiteral null MethodName notifyAll
ReturnStatement return NullLiteral null
ReturnStatement return VariableName binarycontextVar
SimpleType String VariableName stringVar MethodName parseIdentifier VariableName sqllexerVar PrimitiveType boolean VariableName booleanVar BooleanLiteral false SimpleType SqlLexerToken VariableName sqllexertokenVar VariableName sqllexerVar MethodName lookAhead IfStatement if MethodName matchesKeyword VariableName sqllexertokenVar VariableName ASC Operator || MethodName matchesKeyword VariableName sqllexertokenVar VariableName DESC VariableName sqllexerVar MethodName shift IfStatement if MethodName matchesKeyword VariableName sqllexerVar VariableName DESC VariableName booleanVar Operator = BooleanLiteral true MethodName addColumn VariableName sqllexerVar New new SimpleType SqlIndexColumn VariableName stringVar VariableName booleanVar
ReturnStatement return VariableName uuidVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName igniteuuidVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName uuidVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName igniteuuidVar
ReturnStatement return VariableName igniteuuidVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName igniteuuidVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName visorbasicconfigurationVar
ReturnStatement return VariableName visormetricsconfigurationVar
ReturnStatement return VariableName visorspisconfigurationVar
ReturnStatement return VariableName visorpeertopeerconfigurationVar
ReturnStatement return VariableName visorlifecycleconfigurationVar
ReturnStatement return VariableName visorexecutorserviceconfigurationVar
ReturnStatement return VariableName visorsegmentationconfigurationVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName int[]Var
ReturnStatement return VariableName visorrestconfigurationVar
ReturnStatement return VariableName mapVar
ReturnStatement return VariableName mapVar
ReturnStatement return VariableName propertiesVar
ReturnStatement return VariableName visoratomicconfigurationVar
ReturnStatement return VariableName visortransactionconfigurationVar
ReturnStatement return VariableName visormemoryconfigurationVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName booleanVar
ThisExpression this VariableName booleanVar Operator = VariableName booleanVar
ReturnStatement return VariableName stringVar
ThisExpression this VariableName stringVar Operator = VariableName stringVar
ReturnStatement return VariableName stringVar
ThisExpression this VariableName stringVar Operator = VariableName stringVar
ReturnStatement return VariableName booleanVar
ThisExpression this VariableName booleanVar Operator = VariableName booleanVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName igfsmodeVar
ReturnStatement return VariableName mapVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName segmentationpolicyVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName cachemodeVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName longVar
ThisExpression this VariableName longVar Operator = VariableName longVar
ReturnStatement return VariableName booleanVar
ThisExpression this VariableName booleanVar Operator = VariableName booleanVar
ReturnStatement return VariableName longVar
ThisExpression this VariableName longVar Operator = VariableName longVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName integerVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName booleanVar
ThisExpression this VariableName booleanVar Operator = VariableName booleanVar
ReturnStatement return VariableName mapVar
ReturnStatement return VariableName mapVar
ReturnStatement return VariableName mapVar
ReturnStatement return VariableName listVar
ReturnStatement return VariableName mapVar
ReturnStatement return VariableName mapVar
ReturnStatement return VariableName mapVar
ReturnStatement return VariableName mapVar
ReturnStatement return VariableName mapVar
ReturnStatement return VariableName mapVar
ReturnStatement return VariableName mapVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar Operator - VariableName longVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName igfsmodeVar
ReturnStatement return VariableName visorigfsmetricsVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName igfsmodeVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
IfStatement if VariableName doubleVar Operator < NumberLiteral numberLiteral VariableName doubleVar Operator = VariableName visorigfsprofileruniformitycountersVar MethodName calc ReturnStatement return VariableName doubleVar
ReturnStatement return VariableName visorigfsprofileruniformitycountersVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName integerVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName cachemodeVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName mapVar MethodName keySet
ReturnStatement return VariableName mapVar
ReturnStatement return VariableName stringVar Operator != NullLiteral null
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName stringVar
ThisExpression this VariableName stringVar Operator = VariableName stringVar
ReturnStatement return VariableName cachemodeVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName floatVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName floatVar
ReturnStatement return VariableName floatVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName floatVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName floatVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName cachemodeVar
ReturnStatement return VariableName cacheatomicitymodeVar
ReturnStatement return VariableName cachewritesynchronizationmodeVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName visorcacheaffinityconfigurationVar
ReturnStatement return VariableName visorcacherebalanceconfigurationVar
ReturnStatement return VariableName visorcacheevictionconfigurationVar
ReturnStatement return VariableName cacherebalancemodeVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName integerVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName stringVar
ThisExpression this VariableName stringVar Operator = VariableName stringVar
ReturnStatement return VariableName igniteuuidVar
ReturnStatement return VariableName cachemodeVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName visorcachemetricsVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName uuidVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName aVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
IfStatement if Operator ! Name F MethodName isEmpty VariableName stringVar IfStatement if VariableName booleanVar Operator && Operator ! Name F MethodName isEmpty VariableName stringVar ReturnStatement return VariableName stringVar Operator + StringLiteral stringLiteral VariableName stringVar StringLiteral stringLiteral VariableName stringVar ReturnStatement return VariableName stringVar Operator + StringLiteral stringLiteral VariableName stringVar ReturnStatement return VariableName stringVar
ReturnStatement return VariableName listVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName longVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName byte[]Var
ForStatement for ParameterizedType Iterator VariableName iteratorVar VariableName listVar MethodName iterator VariableName it MethodName hasNext SimpleType DirectMemoryRegion VariableName directmemoryregionVar VariableName it MethodName next Name GridUnsafe MethodName freeMemory VariableName chunk MethodName address VariableName it MethodName remove
EnhancedForStatement for SimpleType MappedFile VariableName mappedfileVar VariableName listVar TryStatement try VariableName file MethodName close CatchClause catch SimpleType IOException VariableName ioexceptionVar VariableName igniteloggerVar MethodName error StringLiteral stringLiteral Operator + VariableName file MethodName file StringLiteral stringLiteral VariableName e MethodName getMessage CharacterLiteral charLiteral
ReturnStatement return New new SimpleType IgniteMessagingImpl VariableName gridkernalcontextVar VariableName clustergroupadapterVar BooleanLiteral true
ReturnStatement return VariableName classVar MethodName getPackage MethodName getName Operator + StringLiteral stringLiteral VariableName classVar MethodName getSimpleName MethodName replace StringLiteral stringLiteral StringLiteral stringLiteral
VariableName mapVar MethodName clear VariableName concurrentmapVar MethodName clear
SimpleType DiscoveryCustomMessage VariableName discoverycustommessageVar VariableName discoverycustommessageVar MethodName ackMessage ReturnStatement return VariableName discoverycustommessageVar Operator == NullLiteral null NullLiteral null New new SimpleType CustomMessageWrapper VariableName discoverycustommessageVar
VariableName platformcontextVar MethodName gateway MethodName messagingFilterDestroy VariableName longVar
TryStatement try SimpleType IgniteUuid VariableName igniteuuidVar VariableName igfsmetamanagerVar MethodName format IfStatement if VariableName igniteuuidVar Operator == NullLiteral null ReturnStatement return WhileStatement while BooleanLiteral true IfStatement if MethodName enterBusy TryStatement try IfStatement if Operator ! VariableName igfsmetamanagerVar MethodName exists VariableName igniteuuidVar ReturnStatement return VariableName gridspinbusylockVar MethodName leaveBusy Name U MethodName sleep NumberLiteral numberLiteral CatchClause catch SimpleType Exception VariableName exceptionVar ThrowStatement throw Name IgfsUtils MethodName toIgfsException VariableName e
ParameterizedType GridFutureAdapter VariableName gridfutureadapterVar New new ParameterizedType GridFutureAdapter SimpleType Thread VariableName threadVar New new SimpleType Thread New new SimpleType FormatRunnable VariableName gridfutureadapterVar StringLiteral stringLiteral Operator + VariableName filesystemconfigurationVar MethodName getName StringLiteral stringLiteral Name FORMAT_THREAD_IDX_GEN MethodName incrementAndGet VariableName threadVar MethodName setDaemon BooleanLiteral true VariableName threadVar MethodName start ReturnStatement return VariableName gridfutureadapterVar
ReturnStatement return VariableName stringVar
ThrowStatement throw MethodName unsupported
ThrowStatement throw MethodName unsupported
ThrowStatement throw MethodName unsupported
ThrowStatement throw MethodName unsupported
ReturnStatement return VariableName TYPE_REGULAR
ReturnStatement return ThisExpression this
ReturnStatement return VariableName gridcacheversionVar
ReturnStatement return VariableName TYPE_BYTE_ARR
VariableName threadlocalVar MethodName set NullLiteral null
ReturnStatement return NumberLiteral numberLiteral
PrimitiveType long VariableName longVar VariableName hitratemetricsVar MethodName getRate ReturnStatement return VariableName longVar Operator <= NumberLiteral numberLiteral Operator - NumberLiteral numberLiteral MethodName getKeysToRebalanceLeft Operator / VariableName longVar Operator * VariableName intVar Operator + Name U MethodName currentTimeMillis
ReturnStatement return New new SimpleType CacheMetricsSnapshot VariableName cachemetricsimplVar
EnhancedForStatement for SimpleType CacheContinuousQueryListener VariableName cachecontinuousquerylistenerVar VariableName concurrentmapVar MethodName values VariableName lsnr MethodName flushBackupQueue VariableName cctx MethodName kernalContext VariableName affinitytopologyversionVar
ReturnStatement return VariableName byteVar Operator & VariableName byteVar Operator != NumberLiteral numberLiteral
ReturnStatement return NullLiteral null
IfStatement if VariableName factoryVar Operator == NullLiteral null ReturnStatement return NullLiteral null ParameterizedType Collection VariableName collectionVar New new ParameterizedType ArrayList VariableName factoryVar VariableName length EnhancedForStatement for ParameterizedType Factory VariableName factoryVar VariableName factoryVar SimpleType CacheStoreSessionListener VariableName cachestoresessionlistenerVar VariableName factory MethodName create IfStatement if VariableName lsnr Operator != NullLiteral null VariableName gridkernalcontextVar MethodName resource MethodName injectGeneric VariableName lsnr IfStatement if VariableName lsnr Instanceof instanceof SimpleType LifecycleAware SimpleType LifecycleAware VariableName lsnr MethodName start VariableName collectionVar MethodName add VariableName lsnr ReturnStatement return VariableName collectionVar
VariableName reentrantreadwritelockVar MethodName readLock MethodName lock TryStatement try AssertStatement assert VariableName affinitytopologyversionVar MethodName topologyVersion Operator > NumberLiteral numberLiteral ReturnStatement return VariableName affinitytopologyversionVar VariableName reentrantreadwritelockVar MethodName readLock MethodName unlock
VariableName cachedatastoreVar MethodName updateInitialCounter VariableName longVar
ReturnStatement return VariableName griddhtpartitionexchangeidVar MethodName topologyVersion
ReturnStatement return VariableName exchangeactionsVar Operator != NullLiteral null Operator && VariableName exchangeactionsVar MethodName cacheStopped VariableName intVar
AssertStatement assert VariableName atomicreferenceVar MethodName get Operator != NullLiteral null StringLiteral stringLiteral PrimitiveType int VariableName intVar VariableName atomicintegerVar MethodName get AssertStatement assert VariableName intVar Operator >= Operator - NumberLiteral numberLiteral VariableName intVar IfStatement if VariableName intVar Operator != NumberLiteral numberLiteral ReturnStatement return VariableName intVar Operator == Operator - NumberLiteral numberLiteral IfStatement if VariableName atomicintegerVar MethodName compareAndSet NumberLiteral numberLiteral Operator - NumberLiteral numberLiteral MethodName unregister ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
ReturnStatement return VariableName longVar
ThisExpression this VariableName longVar Operator = VariableName longVar
ReturnStatement return VariableName collectionVar
ThisExpression this VariableName collectionVar Operator = VariableName collectionVar
ReturnStatement return VariableName booleanVar
ThisExpression this VariableName booleanVar Operator = VariableName booleanVar
SimpleType String VariableName stringVar VariableName throwableVar MethodName getMessage SimpleType Throwable VariableName throwableVar VariableName throwableVar MethodName getCause WhileStatement while VariableName throwableVar Operator != NullLiteral null IfStatement if VariableName throwableVar MethodName getClass MethodName getCanonicalName MethodName equals StringLiteral stringLiteral VariableName stringVar Operator = VariableName throwableVar MethodName getMessage BreakStatement break VariableName throwableVar Operator = VariableName throwableVar MethodName getCause ReturnStatement return VariableName stringVar
ReturnStatement return VariableName longVar
VariableName ignitecheckedexceptionVar Operator = VariableName ignitecheckedexceptionVar EnhancedForStatement for SimpleType AffinityReadyFuture VariableName affinityreadyfutureVar VariableName concurrentmapVar MethodName values VariableName fut MethodName onDone VariableName ignitecheckedexceptionVar
VariableName ctx MethodName event MethodName addLocalEventListener VariableName gridlocaleventlistenerVar VariableName EVT_NODE_FAILED VariableName EVT_NODE_LEFT VariableName EVT_NODE_JOINED
ReturnStatement return NullLiteral null
ReturnStatement return NullLiteral null
ReturnStatement return PrimitiveType int VariableName longVar Operator >> VariableName intVar Operator + VariableName intVar VariableName intVar Operator & VariableName longVar
AssertStatement assert VariableName igniteVar Operator != NullLiteral null ReturnStatement return VariableName igniteVar
ReturnStatement return VariableName intVar
ParameterizedType Set VariableName setVar New new ParameterizedType LinkedHashSet EnhancedForStatement for ParameterizedType Holder VariableName holderVar VariableName gridconcurrentskiplistsetexVar VariableName setVar MethodName add VariableName holder VariableName entry ReturnStatement return Name Collections MethodName unmodifiableCollection VariableName setVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName collectionVar
ThrowStatement throw New new SimpleType IllegalStateException
ReturnStatement return VariableName gridkernalcontextVar MethodName cache MethodName context MethodName exchange MethodName readyAffinityVersion
IfStatement if VariableName tableVar Operator == NullLiteral null VariableName threadlocalVar MethodName remove VariableName threadlocalVar MethodName set VariableName tableVar
ReturnStatement return VariableName intVar
ReturnStatement return VariableName intVar
ReturnStatement return MethodName ignite MethodName cluster MethodName forNode MethodName ignite MethodName affinity VariableName stringVar MethodName mapKeyToNode VariableName kVar
ReturnStatement return VariableName uuidVar
ReturnStatement return VariableName ignitenodeVar MethodName ignite
ReturnStatement return Name TRAINING_CONTEXT MethodName get
SimpleType SearchResponse VariableName searchresponseVar MethodName getSearchResponse VariableName clientVar MethodName prepareSearchScroll VariableName stringVar MethodName setScroll Name TimeValue MethodName timeValueMillis VariableName longVar MethodName execute ReturnStatement return VariableName resultsmapperVar MethodName mapResults VariableName searchresponseVar VariableName classVar Name Pageable MethodName unpaged
MethodName assertNotReleased ReturnStatement return VariableName booleanVar
ParameterizedType Map VariableName mapVar VariableName facescontextVar MethodName getAttributes SimpleType StringBuilder VariableName stringbuilderVar SimpleType StringBuilder VariableName mapVar MethodName get VariableName stringVar IfStatement if VariableName stringbuilderVar Operator == NullLiteral null VariableName stringbuilderVar Operator = New new SimpleType StringBuilder VariableName mapVar MethodName put VariableName stringVar VariableName stringbuilderVar VariableName stringbuilderVar MethodName setLength NumberLiteral numberLiteral ReturnStatement return VariableName stringbuilderVar
ReturnStatement return VariableName objectVar Operator == NullLiteral null VariableName objectVar Operator != NullLiteral null Operator ! VariableName objectVar MethodName equals VariableName objectVar
ReturnStatement return MethodName getAttribute VariableName ConstraintHelper VariableName VALIDATION_APPLIES_TO TypeLiteral class
ReturnStatement return VariableName classVar
ReturnStatement return VariableName aVar
PrimitiveType int VariableName intVar NumberLiteral numberLiteral PrimitiveType int VariableName intVar NumberLiteral numberLiteral ForStatement for PrimitiveType int VariableName intVar VariableName listVar MethodName size Operator - NumberLiteral numberLiteral VariableName index Operator >= NumberLiteral numberLiteral VariableName index Operator -- VariableName intVar Operator += VariableName listVar MethodName get VariableName index Operator * VariableName intVar Operator ++ IfStatement if VariableName intVar Operator > VariableName intVar VariableName intVar Operator = NumberLiteral numberLiteral ReturnStatement return NumberLiteral numberLiteral Operator - VariableName intVar Operator % NumberLiteral numberLiteral
VariableName valuecontextVar MethodName setElementType MethodName getElementType PrimitiveType boolean VariableName booleanVar VariableName constrainttreeVar MethodName validateConstraints VariableName validationcontextVar VariableName valuecontextVar ReturnStatement return VariableName booleanVar
IfStatement if VariableName crossparameterdescriptorVar MethodName hasConstraints ReturnStatement return BooleanLiteral true EnhancedForStatement for SimpleType ParameterDescriptor VariableName parameterdescriptorVar VariableName listVar IfStatement if VariableName oneParameter MethodName hasConstraints Operator || VariableName oneParameter MethodName isCascaded ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
ReturnStatement return VariableName returnvaluedescriptorVar Operator != NullLiteral null Operator && VariableName returnvaluedescriptorVar MethodName hasConstraints Operator || VariableName returnvaluedescriptorVar MethodName isCascaded
ReturnStatement return New new SimpleType NodeImpl VariableName nodeimplVar VariableName stringVar VariableName nodeimplVar VariableName nodeimplVar BooleanLiteral true VariableName integerVar NullLiteral null VariableName nodeimplVar VariableName elementkindVar VariableName nodeimplVar VariableName classVar VariableName nodeimplVar VariableName integerVar VariableName nodeimplVar VariableName objectVar VariableName nodeimplVar VariableName classVar VariableName nodeimplVar VariableName integerVar
ReturnStatement return New new SimpleType NodeImpl VariableName nodeimplVar VariableName stringVar VariableName nodeimplVar VariableName nodeimplVar BooleanLiteral true NullLiteral null VariableName objectVar VariableName nodeimplVar VariableName elementkindVar VariableName nodeimplVar VariableName classVar VariableName nodeimplVar VariableName integerVar VariableName nodeimplVar VariableName objectVar VariableName nodeimplVar VariableName classVar VariableName nodeimplVar VariableName integerVar
Name Preconditions MethodName checkNotNull VariableName managementcontextVar StringLiteral stringLiteral IfStatement if ThisExpression this VariableName managementcontextVar Operator != NullLiteral null Operator && VariableName managementcontextVar Operator != ThisExpression this VariableName managementcontextVar ThrowStatement throw New new SimpleType IllegalStateException StringLiteral stringLiteral Operator + ThisExpression this VariableName managementcontextVar StringLiteral stringLiteral VariableName managementcontextVar ThisExpression this VariableName managementcontextVar Operator = VariableName managementcontextVar
ThisExpression this VariableName managementcontextVar Operator = VariableName managementcontextVar
ThisExpression this VariableName managementcontextVar Operator = VariableName managementcontextVar
ThisExpression this VariableName managementcontextVar Operator = VariableName managementcontextVar
ReturnStatement return MethodName anySuperType SimpleType Predicate Name Predicates MethodName assignableFrom VariableName classVar
ThisExpression this VariableName managementcontextVar Operator = VariableName managementcontextVar
SimpleType String VariableName stringVar Name System MethodName getProperty StringLiteral stringLiteral MethodName toLowerCase ReturnStatement return VariableName stringVar MethodName startsWith StringLiteral stringLiteral
ThisExpression this VariableName managementcontextVar Operator = VariableName managementcontextVar
IfStatement if ThisExpression this VariableName managementcontextVar Operator != NullLiteral null IfStatement if ThisExpression this VariableName managementcontextVar MethodName equals VariableName managementcontextVar ReturnStatement return ThrowStatement throw New new SimpleType IllegalStateException StringLiteral stringLiteral Operator + ThisExpression this ThisExpression this VariableName managementcontextVar Operator = VariableName managementcontextVar
ThisExpression this VariableName managementcontextVar Operator = VariableName managementcontextVar
ParameterizedType List VariableName listVar New new ParameterizedType ArrayList EnhancedForStatement for PrimitiveType int VariableName intVar VariableName int[]Var VariableName listVar MethodName add VariableName spec.partitionGenerator MethodName convert VariableName i VariableName rowVar MethodName get VariableName i ReturnStatement return VariableName listVar
PrimitiveType double VariableName doubleVar MethodName getCrcCheckChance ReturnStatement return VariableName doubleVar Operator > NumberLiteral numberLiteral Operator && VariableName doubleVar Operator > Name ThreadLocalRandom MethodName current MethodName nextDouble
ReturnStatement return VariableName compactionmanagermbeanVar MethodName getCompactionHistory
ReturnStatement return StringLiteral stringLiteral Operator + VariableName rawVar StringLiteral stringLiteral VariableName rawVar
ReturnStatement return VariableName longVar Operator + Name ObjectSizes MethodName sizeOnHeapExcludingData VariableName bytebufferVar Name ObjectSizes MethodName sizeOf VariableName stringVar
VariableName icacheVar MethodName setCapacity VariableName longVar
PrimitiveType double VariableName doubleVar VariableName setVar MethodName size PrimitiveType double VariableName doubleVar VariableName mapVar MethodName size IfStatement if VariableName doubleVar Operator > NumberLiteral numberLiteral PrimitiveType double VariableName doubleVar VariableName doubleVar Operator / VariableName doubleVar Operator + NumberLiteral numberLiteral PrimitiveType double VariableName doubleVar VariableName randomVar MethodName nextDouble IfStatement if VariableName randDbl Operator < VariableName prob MethodName sendGossip VariableName messageoutVar VariableName mapVar MethodName keySet
PrimitiveType int VariableName intVar VariableName intVar Operator >> NumberLiteral numberLiteral PrimitiveType int VariableName intVar VariableName intVar Operator & NumberLiteral numberLiteral PrimitiveType long VariableName longVar NumberLiteral numberLiteral Operator << VariableName intVar VariableName long[][]Var VariableName intVar Operator / VariableName intVar VariableName intVar Operator % VariableName intVar Operator &= Operator ~ VariableName longVar
ReturnStatement return VariableName configVar VariableName incremental_backups
ThrowStatement throw New new SimpleType UnsupportedOperationException
ReturnStatement return MethodName getLength
ReturnStatement return MethodName current
ReturnStatement return VariableName decoratedkeyVar
TryStatement try ReturnStatement return MethodName doCompute CatchClause catch SimpleType IndexOutOfBoundsException VariableName indexoutofboundsexceptionVar VariableName sstablereaderVar MethodName markSuspect ThrowStatement throw New new SimpleType CorruptSSTableException VariableName e VariableName stringVar CatchClause catch SimpleType IOError VariableName ioerrorVar IfStatement if VariableName e MethodName getCause Instanceof instanceof SimpleType IOException VariableName sstablereaderVar MethodName markSuspect ThrowStatement throw New new SimpleType CorruptSSTableException SimpleType Exception VariableName e MethodName getCause VariableName stringVar ThrowStatement throw VariableName e
ReturnStatement return Name BTree MethodName size VariableName object[]Var
ReturnStatement return VariableName uuidVar
Name UnfilteredSerializer.serializer MethodName writeEndOfPartition VariableName sequentialwriterVar IfStatement if VariableName intVar Operator == NumberLiteral numberLiteral ReturnStatement return IfStatement if VariableName clusteringprefixVar Operator != NullLiteral null MethodName addIndexBlock IfStatement if VariableName dataoutputbufferVar Operator != NullLiteral null Name RowIndexEntry.Serializer MethodName serializeOffsets VariableName dataoutputbufferVar VariableName int[]Var VariableName intVar AssertStatement assert VariableName intVar Operator > NumberLiteral numberLiteral Operator && VariableName longVar Operator >= NumberLiteral numberLiteral
ReturnStatement return VariableName intVar Operator == VariableName intVar New new SimpleType LivenessInfo VariableName longVar New new SimpleType ExpiringLivenessInfo VariableName longVar VariableName intVar VariableName intVar
ThisExpression this VariableName booleanVar Operator = VariableName booleanVar ReturnStatement return ThisExpression this
ReturnStatement return VariableName booleanVar Operator == NullLiteral null VariableName ByteBufferUtil VariableName EMPTY_BYTE_BUFFER VariableName booleanVar VariableName bytebufferVar VariableName bytebufferVar
ReturnStatement return VariableName integerVar Operator == NullLiteral null VariableName ByteBufferUtil VariableName EMPTY_BYTE_BUFFER Name ByteBufferUtil MethodName bytes VariableName integerVar
ReturnStatement return VariableName doubleVar Operator == NullLiteral null VariableName ByteBufferUtil VariableName EMPTY_BYTE_BUFFER Name ByteBufferUtil MethodName bytes VariableName doubleVar
ReturnStatement return NullLiteral null
ReturnStatement return VariableName ByteBufferUtil VariableName EMPTY_BYTE_BUFFER
ReturnStatement return VariableName floatVar Operator == NullLiteral null VariableName ByteBufferUtil VariableName EMPTY_BYTE_BUFFER Name ByteBufferUtil MethodName bytes VariableName floatVar
TryStatement try ReturnStatement return Name ByteBufferUtil MethodName string VariableName bytebufferVar VariableName charsetVar CatchClause catch SimpleType CharacterCodingException VariableName charactercodingexceptionVar ThrowStatement throw New new SimpleType MarshalException StringLiteral stringLiteral Operator + VariableName charsetVar StringLiteral stringLiteral Name ByteBufferUtil MethodName bytesToHex VariableName bytebufferVar
VariableName orderedconfigurationVar MethodName add StringLiteral stringLiteral VariableName requestfilterVar
ParameterizedType LazyFunction VariableName lazyfunctionVar New new ParameterizedType LazyFunction ParameterizedType LazyContinuation MethodName next ReturnStatement return New new ParameterizedType LazyContinuation VariableName tVar MethodName toLazyFunction VariableName tVar VariableName mapperVar ReturnStatement return MethodName lazy VariableName lazyfunctionVar
ParameterizedType List VariableName listVar New new ParameterizedType ArrayList VariableName intVar ForStatement for PrimitiveType int VariableName intVar NumberLiteral numberLiteral VariableName i Operator < VariableName intVar VariableName i Operator ++ VariableName listVar MethodName add VariableName t[]Var VariableName intVar Operator + VariableName i ReturnStatement return VariableName listVar
ParameterizedType List VariableName listVar MethodName findServiceIdsForInterface VariableName classVar IfStatement if VariableName listVar Operator == NullLiteral null VariableName listVar Operator = Name Collections MethodName emptyList SwitchStatement switch VariableName listVar MethodName size SwitchCase case NumberLiteral numberLiteral ThrowStatement throw New new SimpleType RuntimeException Name IOCMessages MethodName noServiceMatchesType VariableName classVar SwitchCase case NumberLiteral numberLiteral SimpleType String VariableName stringVar VariableName listVar MethodName get NumberLiteral numberLiteral ReturnStatement return MethodName getService VariableName serviceId VariableName classVar SwitchCase default Name Collections MethodName sort VariableName listVar ThrowStatement throw New new SimpleType RuntimeException Name IOCMessages MethodName manyServiceMatches VariableName classVar VariableName listVar
VariableName objectcreatorVar Operator = New new ParameterizedType ObjectCreator SimpleType T MethodName createObject ThrowStatement throw New new SimpleType IllegalStateException Name ServiceMessages MethodName registryShutdown VariableName stringVar VariableName tVar Operator = NullLiteral null
SimpleType MethodAdvice VariableName methodadviceVar New new SimpleType LoggingAdvice VariableName loggerVar VariableName exceptiontrackerVar VariableName methodadvicereceiverVar MethodName adviseAllMethods VariableName methodadviceVar
ReturnStatement return VariableName methodinvocationbundleVar MethodName getMethod MethodName getInstance
VariableName mapVar MethodName clear
VariableName urlchangetrackerVar MethodName clear VariableName mapVar MethodName clear VariableName plasticproxyfactoryVar MethodName clearCache MethodName initializeService
VariableName strategyregistryVar MethodName clearCache
VariableName strategyregistryVar MethodName clearCache VariableName mapVar MethodName clear
SimpleType TreeNode VariableName treenodeVar VariableName treemodelVar MethodName getById VariableName stringVar VariableName treeexpansionmodelVar MethodName markExpanded VariableName treenodeVar ReturnStatement return New new SimpleType RenderNodes VariableName treenodeVar MethodName getChildren
VariableName treeexpansionmodelVar MethodName markExpanded VariableName treemodelVar MethodName getById VariableName stringVar ReturnStatement return New new SimpleType JSONObject
VariableName treeexpansionmodelVar MethodName markCollapsed VariableName treemodelVar MethodName getById VariableName stringVar ReturnStatement return New new SimpleType JSONObject
SimpleType TreeNode VariableName treenodeVar VariableName treemodelVar MethodName getById VariableName stringVar SimpleType String VariableName stringVar IfStatement if VariableName booleanVar VariableName treeselectionmodelVar MethodName select VariableName treenodeVar VariableName stringVar Operator = VariableName EventConstants VariableName NODE_SELECTED VariableName treeselectionmodelVar MethodName unselect VariableName treenodeVar VariableName stringVar Operator = VariableName EventConstants VariableName NODE_UNSELECTED ParameterizedType CaptureResultCallback VariableName captureresultcallbackVar Name CaptureResultCallback MethodName create VariableName componentresourcesVar MethodName triggerEvent VariableName stringVar ArrayType Object[] ArrayInitializer arrayInitializer VariableName captureresultcallbackVar Modifier final SimpleType Object VariableName objectVar VariableName captureresultcallbackVar MethodName getResult IfStatement if VariableName objectVar Operator != NullLiteral null ReturnStatement return VariableName objectVar ReturnStatement return New new SimpleType JSONObject
ReturnStatement return VariableName booleanVar Operator != VariableName booleanVar
ReturnStatement return Operator ! VariableName booleanVar
VariableName strategyregistryVar MethodName clearCache
ReturnStatement return VariableName serviceVar
Modifier final SimpleType StringBuilder VariableName stringbuilderVar New new SimpleType StringBuilder StringLiteral stringLiteral VariableName stringbuilderVar MethodName append VariableName hostVar VariableName stringbuilderVar MethodName append StringLiteral stringLiteral VariableName listVar MethodName forEach VariableName c VariableName stringbuilderVar MethodName append VariableName c VariableName stringbuilderVar MethodName append StringLiteral stringLiteral ReturnStatement return VariableName stringbuilderVar MethodName toString MethodName trim
ReturnStatement return MethodName overrideWithLite VariableName builderVar
ReturnStatement return VariableName builderVar
ReturnStatement return Name String MethodName format StringLiteral stringLiteral VariableName connectionpoolVar VariableName host VariableName booleanVar VariableName atomicintegerVar VariableName concurrentmapVar MethodName size
EnhancedForStatement for Modifier final SimpleType Step VariableName stepVar VariableName adminVar MethodName getSteps PrimitiveType boolean VariableName booleanVar BooleanLiteral false EnhancedForStatement for Modifier final ParameterizedType Class VariableName classVar VariableName classVar IfStatement if VariableName classToCheck MethodName isInstance VariableName step VariableName foundInstance Operator = BooleanLiteral true BreakStatement break IfStatement if Operator ! VariableName foundInstance ReturnStatement return BooleanLiteral false ReturnStatement return BooleanLiteral true
ThisExpression this VariableName mapVar MethodName put VariableName objectVar ThisExpression this VariableName mapVar MethodName remove VariableName objectVar
ThisExpression this VariableName traversalringVar MethodName addTraversal ThisExpression this MethodName integrateChild VariableName adminVar
ThisExpression this VariableName adminVar Operator = ThisExpression this MethodName integrateChild VariableName adminVar
ThisExpression this VariableName adminVar Operator = ThisExpression this MethodName integrateChild VariableName adminVar
ThisExpression this VariableName adminVar Operator = ThisExpression this MethodName integrateChild VariableName adminVar
ThisExpression this VariableName traversalringVar MethodName addTraversal ThisExpression this MethodName integrateChild VariableName adminVar
ThisExpression this VariableName traversalringVar MethodName addTraversal ThisExpression this MethodName integrateChild VariableName adminVar
ThisExpression this VariableName traversalringVar MethodName addTraversal ThisExpression this MethodName integrateChild VariableName adminVar
ReturnStatement return Name Collections MethodName emptyIterator
ReturnStatement return Name Collections MethodName emptyIterator
SwitchStatement switch VariableName directionVar SwitchCase case VariableName OUT ReturnStatement return Name IteratorUtils MethodName of ThisExpression this VariableName detachedvertexVar SwitchCase case VariableName IN ReturnStatement return Name IteratorUtils MethodName of ThisExpression this VariableName detachedvertexVar SwitchCase default ReturnStatement return Name IteratorUtils MethodName of ThisExpression this VariableName detachedvertexVar ThisExpression this VariableName detachedvertexVar
ReturnStatement return VariableName gremlinscriptenginemanagerVar
VariableName mapVar MethodName put VariableName stringVar VariableName traversalsourceVar
ReturnStatement return VariableName listVar
ReturnStatement return VariableName mapVar
Modifier final SimpleType IndexInput VariableName indexinputVar ThisExpression this VariableName indexinputVar MethodName clone VariableName indexinputVar MethodName seek VariableName numericentryVar VariableName offset Modifier final SimpleType BlockPackedReader VariableName blockpackedreaderVar New new SimpleType BlockPackedReader VariableName indexinputVar VariableName numericentryVar VariableName packedIntsVersion VariableName numericentryVar VariableName blockSize VariableName numericentryVar VariableName count BooleanLiteral true ReturnStatement return New new SimpleType LongNumericDocValues PrimitiveType long MethodName get PrimitiveType long VariableName longVar ReturnStatement return VariableName blockpackedreaderVar MethodName get VariableName longVar
SimpleType BinaryEntry VariableName binaryentryVar VariableName mapVar MethodName get VariableName fieldinfoVar VariableName number IfStatement if VariableName binaryentryVar VariableName minLength Operator == VariableName binaryentryVar VariableName maxLength ReturnStatement return MethodName getFixedBinary VariableName fieldinfoVar VariableName binaryentryVar ReturnStatement return MethodName getVariableBinary VariableName fieldinfoVar VariableName binaryentryVar
SimpleType Field VariableName fieldVar TypeLiteral class MethodName getDeclaredField StringLiteral stringLiteral VariableName fieldVar MethodName setAccessible BooleanLiteral true ReturnStatement return SimpleType Lock VariableName fieldVar MethodName get ThisExpression this
ThisExpression this VariableName eventhandlerVar MethodName onNext ThisExpression this
ReturnStatement return Name CredentialsStore.INSTANCE MethodName hasCredentials VariableName urlVar MethodName getHost
ReturnStatement return New new SimpleType ArtifactOrigin VariableName artifactVar BooleanLiteral false VariableName stringVar
Name Message MethodName verbose StringLiteral stringLiteral Operator + Name CircularDependencyHelper MethodName formatMessage VariableName modulerevisionid[]Var
Name Message MethodName warn StringLiteral stringLiteral Operator + Name CircularDependencyHelper MethodName formatMessage VariableName modulerevisionid[]Var
IfStatement if VariableName listVar Operator == NullLiteral null VariableName listVar Operator = Name Lists MethodName newArrayList
ReturnStatement return Name DefaultCouchbaseEnvironment MethodName create
Modifier final ArrayType int[] VariableName int[]Var ArrayType int[] VariableName parametervalueVar VariableName length ForStatement for PrimitiveType int VariableName intVar NumberLiteral numberLiteral VariableName i Operator < VariableName int[]Var VariableName length VariableName i Operator ++ VariableName int[]Var VariableName i Operator = VariableName parametervalueVar VariableName i MethodName intValue ReturnStatement return VariableName int[]Var
IfStatement if VariableName booleanVar VariableName appendableVar MethodName append VariableName x364Var MethodName sequence
Modifier final ParameterizedType Class VariableName classVar VariableName parameterdescriptorVar MethodName getValueClass ReturnStatement return New new ParameterizedType DefaultParameterDescriptor VariableName mapVar VariableName parameterdescriptorVar MethodName getMinimumOccurs VariableName parameterdescriptorVar MethodName getMaximumOccurs VariableName classVar Name Parameters MethodName getValueDomain VariableName parameterdescriptorVar Name CollectionsExt MethodName toArray VariableName parameterdescriptorVar MethodName getValidValues VariableName classVar VariableName parameterdescriptorVar MethodName getDefaultValue
ReturnStatement return MethodName getBundle TypeLiteral class VariableName localeVar
ReturnStatement return NumberLiteral numberLiteral
ReturnStatement return NumberLiteral numberLiteral
PrimitiveType double VariableName doubleVar VariableName doubleVar Operator = VariableName doubleVar VariableName doubleVar Operator = VariableName doubleVar VariableName doubleVar Operator = VariableName doubleVar VariableName doubleVar Operator = VariableName doubleVar VariableName doubleVar Operator = VariableName doubleVar VariableName doubleVar Operator = VariableName doubleVar VariableName doubleVar Operator = VariableName doubleVar VariableName doubleVar Operator = VariableName doubleVar VariableName doubleVar Operator = VariableName doubleVar
Modifier final PrimitiveType double VariableName doubleVar VariableName doubleVar VariableName doubleVar Operator = VariableName doubleVar VariableName doubleVar Operator = VariableName doubleVar
ReturnStatement return Name Errors MethodName getResources VariableName localeVar MethodName getString VariableName Errors VariableName Keys VariableName TableNotFound_1 VariableName string[]Var VariableName intVar
Modifier final ParameterizedType AuthorityFactoryProxy VariableName authorityfactoryproxyVar Name BY_URN_TYPE MethodName get VariableName stringVar MethodName toLowerCase VariableName Locale VariableName US IfStatement if VariableName authorityfactoryproxyVar Operator != NullLiteral null IfStatement if VariableName c.type MethodName isAssignableFrom VariableName classVar ReturnStatement return ThisExpression this IfStatement if VariableName classVar MethodName isAssignableFrom VariableName authorityfactoryproxyVar VariableName classVar ReturnStatement return ParameterizedType AuthorityFactoryProxy VariableName authorityfactoryproxyVar ReturnStatement return NullLiteral null
ForStatement for ParameterizedType Class VariableName classVar VariableName classVar VariableName c Operator != NullLiteral null VariableName c Operator = VariableName c MethodName getSuperclass SimpleType Type VariableName typeVar VariableName c MethodName getGenericSuperclass IfStatement if VariableName type Instanceof instanceof SimpleType ParameterizedType Modifier final SimpleType ParameterizedType VariableName parameterizedtypeVar SimpleType ParameterizedType VariableName type IfStatement if VariableName p MethodName getRawType Operator == TypeLiteral class VariableName type Operator = VariableName p MethodName getActualTypeArguments NumberLiteral numberLiteral IfStatement if VariableName type Operator == VariableName classVar ReturnStatement return BooleanLiteral true ThrowStatement throw New new SimpleType AssertionError VariableName type ReturnStatement return BooleanLiteral false
MethodName setProperty VariableName ReferenceIdentifier VariableName VERSION_KEY VariableName stringVar ReturnStatement return MethodName self
MethodName ensureNonNull StringLiteral stringLiteral VariableName referenceidentifierVar VariableName listVar MethodName add VariableName referenceidentifierVar ReturnStatement return MethodName self
ReturnStatement return MethodName getBundle TypeLiteral class VariableName localeVar
ReturnStatement return VariableName setVar
ReturnStatement return VariableName abstractlocationtypeVar
IfStatement if VariableName collectionVar Operator == NullLiteral null ReturnStatement return NullLiteral null IfStatement if VariableName collectionVar Instanceof instanceof ParameterizedType CheckedArrayList Operator && ParameterizedType CheckedArrayList VariableName collectionVar VariableName classVar Operator == VariableName classVar ReturnStatement return ParameterizedType CheckedArrayList VariableName collectionVar Modifier final ParameterizedType CheckedArrayList VariableName checkedarraylistVar New new ParameterizedType CheckedArrayList VariableName classVar VariableName collectionVar MethodName size VariableName list MethodName addAll SimpleType Collection VariableName collectionVar ReturnStatement return VariableName list
VariableName stringVar Operator = Name CharSequences MethodName trimWhitespaces VariableName stringVar IfStatement if VariableName stringVar Operator == NullLiteral null Operator || VariableName stringVar MethodName isEmpty ReturnStatement return NullLiteral null TryStatement try ReturnStatement return MethodName doConvert VariableName stringVar CatchClause catch SimpleType UnconvertibleObjectException VariableName unconvertibleobjectexceptionVar ThrowStatement throw VariableName e CatchClause catch SimpleType Exception VariableName exceptionVar ThrowStatement throw New new SimpleType UnconvertibleObjectException MethodName formatErrorMessage VariableName stringVar VariableName e
ReturnStatement return VariableName sVar Operator != NullLiteral null VariableName sVar MethodName toString NullLiteral null
ReturnStatement return VariableName angleVar MethodName degrees
IfStatement if VariableName sVar Operator == NullLiteral null ReturnStatement return NullLiteral null TryStatement try ReturnStatement return MethodName doConvert VariableName sVar CatchClause catch SimpleType Exception VariableName exceptionVar ThrowStatement throw New new SimpleType UnconvertibleObjectException MethodName formatErrorMessage VariableName sVar VariableName e
ReturnStatement return VariableName sVar
ReturnStatement return NullLiteral null
IfStatement if VariableName rangeVar Instanceof instanceof ParameterizedType NumberRange ReturnStatement return ParameterizedType NumberRange VariableName rangeVar ReturnStatement return New new ParameterizedType NumberRange VariableName rangeVar
IfStatement if VariableName mapVar MethodName put VariableName stringVar VariableName stringVar Operator != NullLiteral null ThrowStatement throw New new SimpleType IllegalArgumentException VariableName stringVar
ThrowStatement throw New new SimpleType InvalidMetadataException MethodName errors MethodName getString VariableName Errors VariableName Keys VariableName ValueAlreadyDefined_1 MethodName name VariableName modifiablemetadataVar VariableName stringVar
IfStatement if VariableName intVar Operator == VariableName byte[]Var VariableName intVar VariableName byte[]Var Operator = Name Arrays MethodName copyOf VariableName byte[]Var VariableName intVar Operator * NumberLiteral numberLiteral VariableName byte[]Var VariableName intVar Operator ++ Operator = PrimitiveType byte VariableName intVar
ReturnStatement return MethodName getBundle TypeLiteral class VariableName localeVar
ReturnStatement return MethodName getBundle TypeLiteral class VariableName localeVar
ReturnStatement return VariableName stringVar Operator == NullLiteral null Operator || VariableName charsequenceVar Operator != NullLiteral null Operator && VariableName charsequenceVar MethodName toString MethodName equals VariableName stringVar
ReturnStatement return VariableName stringVar Operator == NullLiteral null Operator || VariableName collectionVar MethodName contains VariableName stringVar
VariableName hashsetVar Operator = NullLiteral null VariableName hashsetVar Operator = NullLiteral null VariableName hashsetVar Operator = NullLiteral null VariableName intVar Operator = Operator - NumberLiteral numberLiteral
IfStatement if ThisExpression this VariableName booleanVar Operator && NullLiteral null Operator != ThisExpression this VariableName includecachemanagerVar Operator && ThisExpression this VariableName includecachemanagersessionVar MethodName getExpires Operator > NumberLiteral numberLiteral ReturnStatement return StringLiteral stringLiteral ReturnStatement return NullLiteral null
IfStatement if ThisExpression this VariableName booleanVar Operator && NullLiteral null Operator != ThisExpression this VariableName includecachemanagerVar Operator && ThisExpression this VariableName includecachemanagersessionVar MethodName getExpires Operator > NumberLiteral numberLiteral Operator && Operator ! ThisExpression this VariableName includecachemanagersessionVar MethodName isPurging ReturnStatement return ThisExpression this VariableName includecachemanagersessionVar MethodName getExpiresValidity ReturnStatement return NullLiteral null
ThisExpression this VariableName booleanVar Operator = BooleanLiteral true SimpleType Thread VariableName threadVar New new SimpleType Thread ThisExpression this IfStatement if MethodName getLogger MethodName isDebugEnabled MethodName getLogger MethodName debug StringLiteral stringLiteral VariableName threadVar MethodName setPriority MethodName getPriority VariableName threadVar MethodName setDaemon BooleanLiteral true VariableName threadVar MethodName setName StringLiteral stringLiteral VariableName threadVar MethodName start
ThisExpression this VariableName booleanVar Operator = BooleanLiteral false
MethodName doStop
ThisExpression this VariableName outputstreamVar Operator = NullLiteral null ThisExpression this VariableName sourceresolverVar Operator = NullLiteral null ThisExpression this VariableName stringVar Operator = NullLiteral null ThisExpression this VariableName parametersVar Operator = NullLiteral null ThisExpression this VariableName mapVar Operator = NullLiteral null
ThisExpression this VariableName contenthandlerVar Operator = NullLiteral null ThisExpression this VariableName lexicalhandlerVar Operator = NullLiteral null
ReturnStatement return VariableName NOPValidity VariableName SHARED_INSTANCE
ReturnStatement return VariableName NOPValidity VariableName SHARED_INSTANCE
ReturnStatement return ThisExpression this VariableName sourceVar MethodName getValidity
IfStatement if ThisExpression this VariableName booleanVar ReturnStatement return NullLiteral null ReturnStatement return StringLiteral stringLiteral
IfStatement if ThisExpression this VariableName booleanVar ReturnStatement return NullLiteral null ReturnStatement return VariableName NOPValidity VariableName SHARED_INSTANCE
ReturnStatement return VariableName NOPValidity VariableName SHARED_INSTANCE
ReturnStatement return ThisExpression this VariableName sourcevalidityVar
ReturnStatement return NullLiteral null
ReturnStatement return ThisExpression this VariableName stringVar Operator + CharacterLiteral charLiteral ThisExpression this VariableName intVar CharacterLiteral charLiteral ThisExpression this VariableName intVar
ReturnStatement return VariableName NOPValidity VariableName SHARED_INSTANCE
IfStatement if ThisExpression this VariableName sourceVar MethodName getLastModified Operator != NumberLiteral numberLiteral ReturnStatement return ThisExpression this VariableName sourceVar MethodName getURI Operator + VariableName intVar ReturnStatement return NullLiteral null
IfStatement if ThisExpression this VariableName sourceVar MethodName getLastModified Operator != NumberLiteral numberLiteral SimpleType AggregatedValidity VariableName aggregatedvalidityVar New new SimpleType AggregatedValidity VariableName validity MethodName add New new SimpleType TimeStampValidity VariableName intVar VariableName validity MethodName add ThisExpression this VariableName sourceVar MethodName getValidity ReturnStatement return VariableName validity ReturnStatement return NullLiteral null
ReturnStatement return VariableName NOPValidity VariableName SHARED_INSTANCE
IfStatement if ThisExpression this VariableName sourceVar Operator == NullLiteral null ReturnStatement return NullLiteral null IfStatement if ThisExpression this VariableName stringVar Operator != NullLiteral null SimpleType StringBuffer VariableName stringbufferVar New new SimpleType StringBuffer ThisExpression this VariableName sourceVar MethodName getURI VariableName buffer MethodName append CharacterLiteral charLiteral MethodName append ThisExpression this VariableName stringVar ReturnStatement return VariableName buffer MethodName toString ReturnStatement return ThisExpression this VariableName sourceVar MethodName getURI
IfStatement if ThisExpression this VariableName sourceVar Operator == NullLiteral null ReturnStatement return NullLiteral null ReturnStatement return ThisExpression this VariableName sourceVar MethodName getValidity
ReturnStatement return Name Web3DataSourceSelectorImpl.pools MethodName containsKey VariableName objectVar
SimpleType Iterator VariableName iteratorVar VariableName listVar MethodName iterator WhileStatement while VariableName iteratorVar MethodName hasNext IfStatement if VariableName iteratorVar MethodName next Operator != NullLiteral null ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
ReturnStatement return StringLiteral stringLiteral
ReturnStatement return VariableName NOPValidity VariableName SHARED_INSTANCE
ReturnStatement return StringLiteral stringLiteral
ReturnStatement return VariableName NOPValidity VariableName SHARED_INSTANCE
ReturnStatement return ThisExpression this VariableName sourceVar MethodName getURI
ReturnStatement return ThisExpression this VariableName sourceVar MethodName getValidity
ReturnStatement return NullLiteral null
IfStatement if MethodName hasContentChanged VariableName request ReturnStatement return NullLiteral null ReturnStatement return VariableName NOPValidity VariableName SHARED_INSTANCE
VariableName stringVar Operator = NullLiteral null VariableName stringVar Operator = NullLiteral null VariableName stringVar Operator = NullLiteral null VariableName stringVar Operator = NullLiteral null VariableName stringVar Operator = NullLiteral null VariableName inputstreamVar Operator = NullLiteral null
ThisExpression this VariableName linkedlistVar MethodName clear
ReturnStatement return StringLiteral stringLiteral
ReturnStatement return VariableName NOPValidity VariableName SHARED_INSTANCE
ReturnStatement return ThisExpression this VariableName source
IfStatement if ThisExpression this VariableName longVar Operator > NumberLiteral numberLiteral ReturnStatement return New new SimpleType TimeStampValidity ThisExpression this VariableName longVar IfStatement if ThisExpression this VariableName booleanVar ReturnStatement return VariableName NOPValidity VariableName SHARED_INSTANCE ReturnStatement return NullLiteral null
ReturnStatement return ThisExpression this VariableName sourceVar MethodName getValidity
ReturnStatement return ThisExpression this VariableName sourceVar MethodName getURI
ReturnStatement return ThisExpression this VariableName sourceVar MethodName getValidity
ReturnStatement return ThisExpression this VariableName sourceVar MethodName getURI
ReturnStatement return ThisExpression this VariableName sourceVar MethodName getValidity
ReturnStatement return ThisExpression this VariableName sourceVar MethodName getURI
ReturnStatement return ThisExpression this VariableName sourceVar MethodName getValidity
ReturnStatement return NullLiteral null
ReturnStatement return NullLiteral null
ReturnStatement return NullLiteral null
ReturnStatement return NullLiteral null
ThisExpression this MethodName initTelephonyReceiver
IfStatement if VariableName responsecacheVar Instanceof instanceof SimpleType HttpResponseCache ReturnStatement return SimpleType HttpResponseCache VariableName responsecacheVar VariableName okResponseCache IfStatement if VariableName responsecacheVar Operator != NullLiteral null ReturnStatement return New new SimpleType OkResponseCacheAdapter VariableName responsecacheVar ReturnStatement return NullLiteral null
VariableName selectionkeyVar MethodName interestOps VariableName SelectionKey VariableName OP_READ Operator | VariableName SelectionKey VariableName OP_WRITE
MethodName checkReadiness ReturnStatement return Name Collections MethodName unmodifiableSet New new SimpleType PREntriesSet
ReturnStatement return New new SimpleType PREntriesSet VariableName setVar
MethodName checkReadiness MethodName checkForNoAccess ReturnStatement return MethodName basicEntries VariableName booleanVar
IfStatement if VariableName objectVar Operator == NullLiteral null ThrowStatement throw New new SimpleType IllegalArgumentException Name LocalizedStrings.ExecuteRegionFunction_THE_INPUT_0_FOR_THE_EXECUTE_FUNCTION_REQUEST_IS_NULL MethodName toLocalizedString StringLiteral stringLiteral ReturnStatement return New new SimpleType MultiRegionFunctionExecutor ThisExpression this VariableName objectVar
IfStatement if VariableName objectVar Operator == NullLiteral null ThrowStatement throw New new SimpleType FunctionException Name LocalizedStrings.ExecuteRegionFunction_THE_INPUT_0_FOR_THE_EXECUTE_FUNCTION_REQUEST_IS_NULL MethodName toLocalizedString StringLiteral stringLiteral ReturnStatement return New new SimpleType PartitionedRegionFunctionExecutor ThisExpression this VariableName objectVar
IfStatement if VariableName objectVar Operator == NullLiteral null ThrowStatement throw New new SimpleType FunctionException Name LocalizedStrings.ExecuteRegionFunction_THE_INPUT_0_FOR_THE_EXECUTE_FUNCTION_REQUEST_IS_NULL MethodName toLocalizedString StringLiteral stringLiteral ReturnStatement return New new SimpleType ServerFunctionExecutor ThisExpression this VariableName objectVar
IfStatement if VariableName objectVar Operator == NullLiteral null ThrowStatement throw New new SimpleType IllegalArgumentException Name LocalizedStrings.ExecuteRegionFunction_THE_INPUT_0_FOR_THE_EXECUTE_FUNCTION_REQUEST_IS_NULL MethodName toLocalizedString StringLiteral stringLiteral ReturnStatement return New new SimpleType DistributedRegionFunctionExecutor ThisExpression this VariableName objectVar
ReturnStatement return MethodName hasValidJarContent New new SimpleType ByteArrayInputStream VariableName byte[]Var
IfStatement if VariableName booleanVar VariableName connectiontableVar MethodName removeReceiver ThisExpression this
ReturnStatement return Operator ++ ThisExpression this VariableName intVar
ReturnStatement return ThisExpression this VariableName regionVar MethodName entrySet VariableName booleanVar
ReturnStatement return Name GemFireVersion MethodName asString
Modifier final SimpleType StringWriter VariableName stringwriterVar New new SimpleType StringWriter VariableName throwableVar MethodName printStackTrace New new SimpleType PrintWriter VariableName stringwriterVar ReturnStatement return VariableName stringwriterVar MethodName toString
ReturnStatement return StringLiteral stringLiteral
ReturnStatement return StringLiteral stringLiteral
ReturnStatement return VariableName statusVar MethodName equals VariableName Status VariableName SUCCESSFUL Operator || VariableName statusVar MethodName equals VariableName Status VariableName FAILED VariableName statusVar MethodName equals VariableName Status VariableName CANCELED
ReturnStatement return VariableName uuidVar MethodName toString
VariableName setVar MethodName add VariableName intVar
ReturnStatement return NullLiteral null
ReturnStatement return VariableName longVar
ReturnStatement return VariableName node[]Var VariableName intVar
VariableName atomicreferenceVar MethodName compareAndSet NullLiteral null VariableName throwableVar IfStatement if VariableName booleanVar MethodName notifyReaders
MethodName checkClosedOrInError StringLiteral stringLiteral SimpleType BKSyncLogWriter VariableName bksynclogwriterVar New new SimpleType BKSyncLogWriter VariableName distributedlogconfigurationVar VariableName dynamicdistributedlogconfigurationVar ThisExpression this PrimitiveType boolean VariableName booleanVar BooleanLiteral false TryStatement try VariableName bksynclogwriterVar MethodName createAndCacheWriteHandler SimpleType BKLogWriteHandler VariableName bklogwritehandlerVar VariableName bksynclogwriterVar MethodName getWriteHandler Name Utils MethodName ioResult VariableName bklogwritehandlerVar MethodName lockHandler VariableName booleanVar Operator = BooleanLiteral true ReturnStatement return VariableName bksynclogwriterVar IfStatement if Operator ! VariableName booleanVar VariableName bksynclogwriterVar MethodName abort
ReturnStatement return MethodName getInputStreamInternal VariableName dlsnVar Name Optional MethodName absent
ReturnStatement return VariableName booleanVar
ThisExpression this VariableName immutableclassesgiraphconfigurationVar Operator = VariableName immutableclassesgiraphconfigurationVar VariableName classVar Operator = VariableName immutableclassesgiraphconfigurationVar MethodName getEdgeValueClass
ThisExpression this VariableName immutableclassesgiraphconfigurationVar Operator = VariableName immutableclassesgiraphconfigurationVar VariableName classVar Operator = VariableName immutableclassesgiraphconfigurationVar MethodName getVertexValueClass
ThisExpression this VariableName immutableclassesgiraphconfigurationVar Operator = VariableName immutableclassesgiraphconfigurationVar VariableName classVar Operator = VariableName immutableclassesgiraphconfigurationVar MethodName getVertexIdClass
ReturnStatement return VariableName booleanVar
VariableName stringVar Operator = MethodName jythonClassNameOption MethodName get VariableName immutableclassesgiraphconfigurationVar VariableName booleanVar Operator = VariableName immutableclassesgiraphconfigurationVar MethodName getValueNeedsWrappers MethodName get MethodName getGraphType
ReturnStatement return ParameterizedType Iterable VariableName emptyiterableVar
SimpleType ActivityDiagramPart VariableName activitydiagrampartVar SimpleType ActivityDiagramPart MethodName getGraphicalViewer MethodName getContents IfStatement if VariableName activitydiagrampartVar Operator != NullLiteral null Operator && VariableName activitydiagrampartVar MethodName isActive VariableName activitydiagrampartVar MethodName refreshAll
ReturnStatement return Name ProjectUtils MethodName isSpringBootProject VariableName cloudfoundryapplicationmoduleVar
ReturnStatement return New new SimpleType IndexContext VariableName intVar VariableName YamlPath VariableName EMPTY Name IndexNavigator MethodName with VariableName fuzzymapVar VariableName propertycompletionfactoryVar VariableName typeutilVar VariableName relaxednameconfigVar
ReturnStatement return BooleanLiteral true
SimpleType ApplicationLogConsole VariableName applicationlogconsoleVar MethodName getExisitingConsole VariableName cloudfoundryruntargetVar MethodName getTargetProperties VariableName stringVar IfStatement if VariableName applicationlogconsoleVar Operator != NullLiteral null VariableName applicationlogconsoleVar MethodName close VariableName applicationlogconsoleVar MethodName destroy
TryStatement try MethodName customizeMarshaller VariableName marshallerVar VariableName marshallerVar MethodName marshal VariableName objectVar CatchClause catch SimpleType XMLException VariableName xmlexceptionVar ThrowStatement throw MethodName convertCastorException VariableName ex BooleanLiteral true
IfStatement if ThisExpression this VariableName locale[]Var Operator != NullLiteral null EnhancedForStatement for SimpleType Locale VariableName localeVar ThisExpression this VariableName locale[]Var MethodName initFactory VariableName locale
ReturnStatement return TypeLiteral class
IfStatement if MethodName isCache MethodName initFactory
SimpleType String VariableName stringVar StringLiteral stringLiteral MethodName concat VariableName stringVar ParameterizedType List VariableName listVar New new ParameterizedType ArrayList EnhancedForStatement for SimpleType String VariableName stringVar ThisExpression this VariableName mapVar MethodName keySet IfStatement if ThisExpression this VariableName antpathmatcherVar MethodName match VariableName pattern VariableName stringVar VariableName listVar MethodName add VariableName pattern IfStatement if Operator ! VariableName listVar MethodName isEmpty ParameterizedType Comparator VariableName comparatorVar ThisExpression this VariableName antpathmatcherVar MethodName getPatternComparator VariableName stringVar Name Collections MethodName sort VariableName listVar VariableName comparator ReturnStatement return ThisExpression this VariableName mapVar MethodName get VariableName listVar MethodName get NumberLiteral numberLiteral ReturnStatement return NullLiteral null
IfStatement if VariableName objectVar Instanceof instanceof ArrayType Object[] ReturnStatement return StringLiteral stringLiteral Operator + Name StringUtils MethodName arrayToDelimitedString ArrayType Object[] VariableName objectVar StringLiteral stringLiteral StringLiteral stringLiteral ReturnStatement return Name String MethodName valueOf VariableName objectVar
ReturnStatement return MethodName narrow VariableName objectVar MethodName getMapKeyTypeDescriptor
ReturnStatement return MethodName narrow VariableName objectVar MethodName getMapValueTypeDescriptor
ParameterizedType Set VariableName setVar New new ParameterizedType LinkedHashSet ThisExpression this VariableName listVar MethodName forEach VariableName p VariableName setVar MethodName addAll VariableName p MethodName getStereotypes VariableName elementVar IfStatement if Operator ! VariableName setVar MethodName isEmpty ThisExpression this VariableName metadatacollectorVar MethodName add New new SimpleType ItemMetadata ThisExpression this VariableName typehelperVar MethodName getType VariableName elementVar VariableName setVar
TryStatement try VariableName logger MethodName info StringLiteral stringLiteral MethodName registerBeans MethodName registerNotificationListeners CatchClause catch SimpleType RuntimeException VariableName runtimeexceptionVar MethodName unregisterNotificationListeners MethodName unregisterBeans ThrowStatement throw VariableName ex
ArrayType Object[] VariableName object[]Var MethodName resolveArguments VariableName applicationeventVar IfStatement if MethodName shouldHandle VariableName applicationeventVar VariableName object[]Var SimpleType Object VariableName objectVar MethodName doInvoke VariableName object[]Var IfStatement if VariableName result Operator != NullLiteral null MethodName handleResult VariableName result VariableName logVar MethodName trace StringLiteral stringLiteral
IfStatement if VariableName typefilterVar Instanceof instanceof SimpleType AnnotationTypeFilter ParameterizedType Class VariableName classVar SimpleType AnnotationTypeFilter VariableName typefilterVar MethodName getAnnotationType ReturnStatement return Name AnnotationUtils MethodName isAnnotationDeclaredLocally TypeLiteral class VariableName annotation Operator || VariableName annotation MethodName getName MethodName startsWith StringLiteral stringLiteral IfStatement if VariableName typefilterVar Instanceof instanceof SimpleType AssignableTypeFilter ParameterizedType Class VariableName classVar SimpleType AssignableTypeFilter VariableName typefilterVar MethodName getTargetType ReturnStatement return Name AnnotationUtils MethodName isAnnotationDeclaredLocally TypeLiteral class VariableName target ReturnStatement return BooleanLiteral false
ThisExpression this VariableName channelinterceptorVar MethodName addAll Name Arrays MethodName asList VariableName channelinterceptorVar ReturnStatement return ThisExpression this
ReturnStatement return VariableName o IfStatement if Operator ! VariableName monoprocessorVar MethodName isTerminated IfStatement if VariableName o Instanceof instanceof SimpleType Throwable VariableName monoprocessorVar MethodName onError SimpleType Throwable VariableName o VariableName monoprocessorVar MethodName onComplete
PrimitiveType boolean VariableName booleanVar VariableName booleanVar Operator && Operator ! Name TransactionSynchronizationManager MethodName isSynchronizationActive ReturnStatement return New new SimpleType DefaultTransactionStatus VariableName objectVar VariableName booleanVar VariableName booleanVar VariableName transactiondefinitionVar MethodName isReadOnly VariableName booleanVar VariableName objectVar
ParameterizedType Map VariableName mapVar VariableName bindingcontextVar MethodName getModel MethodName asMap VariableName mapVar MethodName keySet MethodName stream MethodName filter VariableName name MethodName isBindingCandidate VariableName name VariableName mapVar MethodName get VariableName name MethodName filter VariableName name Operator ! VariableName mapVar MethodName containsKey VariableName BindingResult VariableName MODEL_KEY_PREFIX Operator + VariableName name MethodName forEach VariableName name SimpleType WebExchangeDataBinder VariableName webexchangedatabinderVar VariableName bindingcontextVar MethodName createDataBinder VariableName serverwebexchangeVar VariableName mapVar MethodName get VariableName name VariableName name VariableName mapVar MethodName put VariableName BindingResult VariableName MODEL_KEY_PREFIX Operator + VariableName name VariableName binder MethodName getBindingResult
Name Assert MethodName notNull VariableName objectVar StringLiteral stringLiteral Name Assert MethodName isTrue Operator ! VariableName objectVar Instanceof instanceof SimpleType Publisher StringLiteral stringLiteral Operator + StringLiteral stringLiteral ReturnStatement return New new ParameterizedType DefaultEntityResponseBuilder VariableName objectVar Name BodyInserters MethodName fromObject VariableName objectVar MethodName headers ThisExpression this VariableName httpheadersVar MethodName status ThisExpression this VariableName httpstatusVar MethodName build MethodName map VariableName entityResponse VariableName entityResponse
SimpleType HttpHeaders VariableName httpheadersVar New new SimpleType HttpHeaders VariableName httpclientresponseVar MethodName responseHeaders MethodName forEach VariableName entry SimpleType String VariableName stringVar VariableName entry MethodName getKey VariableName httpheadersVar MethodName put VariableName name VariableName httpclientresponseVar MethodName responseHeaders MethodName getAll VariableName name ReturnStatement return VariableName httpheadersVar
IfStatement if MethodName peekToken VariableName TokenKind VariableName LSQUARE IfStatement if MethodName maybeEatIndexer ReturnStatement return MethodName pop ReturnStatement return NullLiteral null
EnhancedForStatement for ParameterizedType Entry VariableName entryVar MethodName getHeaders MethodName entrySet SimpleType HttpString VariableName httpstringVar Name HttpString MethodName tryFromString VariableName entry MethodName getKey ThisExpression this VariableName httpserverexchangeVar MethodName getResponseHeaders MethodName addAll VariableName headerName VariableName entry MethodName getValue
ReturnStatement return ThisExpression this VariableName databufferfactoryVar
IfStatement if ThisExpression this VariableName tVar Operator != NullLiteral null ThrowStatement throw New new SimpleType IllegalStateException StringLiteral stringLiteral Operator + ThisExpression this VariableName tVar ThisExpression this VariableName tVar Operator = VariableName tVar
ReturnStatement return ThisExpression this VariableName asynccontextVar Operator != NullLiteral null Operator && ThisExpression this VariableName servletserverhttprequestVar MethodName getServletRequest MethodName isAsyncStarted
Name Assert MethodName state Operator ! ThisExpression this VariableName booleanVar StringLiteral stringLiteral
MethodName getHeaders MethodName entrySet MethodName forEach VariableName e ThisExpression this VariableName httpclientrequestVar MethodName requestHeaders MethodName set VariableName e MethodName getKey VariableName e MethodName getValue
MethodName getCookies MethodName values MethodName stream MethodName flatMap MethodName map VariableName cookie New new SimpleType DefaultCookie VariableName cookie MethodName getName VariableName cookie MethodName getValue MethodName forEach
ReturnStatement return ThisExpression this VariableName objectmapperVar
SwitchStatement switch VariableName jsontokenVar SwitchCase case VariableName START_OBJECT ThisExpression this VariableName intVar Operator ++ BreakStatement break SwitchCase case VariableName END_OBJECT ThisExpression this VariableName intVar Operator -- BreakStatement break SwitchCase case VariableName START_ARRAY ThisExpression this VariableName intVar Operator ++ BreakStatement break SwitchCase case VariableName END_ARRAY ThisExpression this VariableName intVar Operator -- BreakStatement break
IfStatement if TypeLiteral class Operator != VariableName resourceVar MethodName getClass TryStatement try ReturnStatement return Name OptionalLong MethodName of VariableName resourceVar MethodName contentLength CatchClause catch SimpleType IOException VariableName ioexceptionVar ReturnStatement return Name OptionalLong MethodName empty
SimpleType String VariableName stringVar Name NestedExceptionUtils MethodName getMostSpecificCause VariableName throwableVar MethodName getMessage VariableName stringVar Operator = VariableName stringVar Operator != NullLiteral null VariableName stringVar MethodName toLowerCase StringLiteral stringLiteral SimpleType String VariableName stringVar VariableName throwableVar MethodName getClass MethodName getSimpleName ReturnStatement return VariableName stringVar MethodName contains StringLiteral stringLiteral Operator || Name DISCONNECTED_CLIENT_EXCEPTIONS MethodName contains VariableName stringVar
ThisExpression this VariableName objectVar Operator = VariableName objectVar ThisExpression this VariableName object[]Var Operator = NullLiteral null
ReturnStatement return VariableName RESULT_NONE
Name Assert MethodName state VariableName tVar Operator != NullLiteral null StringLiteral stringLiteral ReturnStatement return VariableName tVar
ThisExpression this VariableName embeddeddatabasefactoryVar MethodName setDatabaseName VariableName stringVar ReturnStatement return ThisExpression this
ThisExpression this VariableName embeddeddatabasefactoryVar MethodName setDatabaseType VariableName embeddeddatabasetypeVar ReturnStatement return ThisExpression this
IfStatement if VariableName stringVar Operator == NullLiteral null ReturnStatement return SimpleType String VariableName stringVar VariableName stringVar MethodName trim IfStatement if VariableName stringVar MethodName length Operator == VariableName stringVar MethodName length ReturnStatement return IfStatement if VariableName stringbuilderVar MethodName lastIndexOf VariableName stringVar Operator == VariableName stringbuilderVar MethodName length Operator - VariableName stringVar MethodName length VariableName stringbuilderVar MethodName append VariableName stringVar MethodName substring VariableName stringVar MethodName length
ThisExpression this VariableName booleanVar Operator = BooleanLiteral true ThrowStatement throw New new SimpleType SessionLimitExceededException VariableName stringVar VariableName CloseStatus VariableName SESSION_NOT_RELIABLE
IfStatement if VariableName qmfmanagementagentVar Operator != NullLiteral null VariableName qmfmanagementagentVar MethodName close MethodName getBroker MethodName getEventLogger MethodName message Name ManagementConsoleMessages MethodName STOPPED VariableName stringVar
VariableName printstreamVar MethodName println VariableName stringVar
EnhancedForStatement for SimpleType Filter VariableName filterVar VariableName collectionVar IfStatement if VariableName f MethodName shouldRun VariableName descriptionVar ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
PrimitiveType int VariableName intVar VariableName upgradeprocessorVar MethodName read IfStatement if VariableName intVar Operator == Operator - NumberLiteral numberLiteral ThrowStatement throw New new SimpleType IOException VariableName stringmanagerVar MethodName getString StringLiteral stringLiteral ReturnStatement return VariableName intVar
PrimitiveType int VariableName intVar NumberLiteral numberLiteral WhileStatement while VariableName bytebufferVar MethodName hasRemaining VariableName intVar Operator = VariableName upgradeprocessorVar MethodName read IfStatement if VariableName intVar Operator == Operator - NumberLiteral numberLiteral ThrowStatement throw New new SimpleType IOException VariableName stringmanagerVar MethodName getString StringLiteral stringLiteral VariableName bytebufferVar MethodName put PrimitiveType byte VariableName intVar Operator ^ VariableName byte[]Var VariableName bytebufferVar MethodName position Operator % NumberLiteral numberLiteral VariableName bytebufferVar MethodName flip
ReturnStatement return VariableName inputbufferVar MethodName available Operator > NumberLiteral numberLiteral
SimpleType Context VariableName contextVar MethodName getContext IfStatement if VariableName contextVar Operator != NullLiteral null Operator && Operator ! VariableName contextVar MethodName getSwallowAbortedUploads VariableName requestVar MethodName action VariableName ActionCode VariableName DISABLE_SWALLOW_INPUT NullLiteral null
ThisExpression this VariableName eventsubtypeVar Operator = VariableName eventsubtypeVar
ReturnStatement return VariableName booleanVar
SimpleType NioReplicationTask VariableName nioreplicationtaskVar New new SimpleType NioReplicationTask ThisExpression this ThisExpression this VariableName nioreplicationtaskVar MethodName setUseBufferPool ThisExpression this MethodName getUseBufferPool VariableName nioreplicationtaskVar MethodName setRxBufSize MethodName getRxBufSize VariableName nioreplicationtaskVar MethodName setOptions MethodName getWorkerThreadOptions ReturnStatement return VariableName nioreplicationtaskVar
ReturnStatement return MethodName getReplicationThread
IfStatement if VariableName channelsenderVar Operator != NullLiteral null VariableName channelsenderVar MethodName heartbeat SuperMethodInvocation super MethodName heartbeat
PrimitiveType long VariableName longVar VariableName longVar IfStatement if VariableName longVar Operator < NumberLiteral numberLiteral ReturnStatement return IfStatement if Name System MethodName currentTimeMillis Operator - VariableName longVar Operator > VariableName longVar SimpleType String VariableName stringVar VariableName stringmanagerVar MethodName getString StringLiteral stringLiteral MethodName doClose New new SimpleType CloseReason VariableName CloseCodes VariableName GOING_AWAY VariableName msg New new SimpleType CloseReason VariableName CloseCodes VariableName CLOSED_ABNORMALLY VariableName msg
ReturnStatement return NullLiteral null
ReturnStatement return NullLiteral null
ReturnStatement return VariableName booleanVar
IfStatement if VariableName connectionpoolVar Operator != NullLiteral null ReturnStatement return VariableName connectionpoolVar VariableName connectionpoolVar Operator = New new SimpleType ConnectionPool VariableName poolconfigurationVar ReturnStatement return VariableName connectionpoolVar
ReturnStatement return New new SimpleType NamedImpl VariableName stringVar
EnhancedForStatement for SimpleType Module VariableName moduleVar VariableName listVar MethodName addModuleInternal VariableName module EnhancedForStatement for SimpleType Module VariableName moduleVar VariableName listVar VariableName module MethodName initialize ThisExpression this
VariableName serverRuntimeContext MethodName getStanzaProcessor MethodName processStanza VariableName serverRuntimeContext ThisExpression this SimpleType Stanza VariableName xmlelementVar VariableName sessionStateHolder
ReturnStatement return New new SimpleType FileUtils
SimpleType StripJavaComments VariableName stripjavacommentsVar New new SimpleType StripJavaComments VariableName readerVar ReturnStatement return VariableName stripjavacommentsVar
SimpleType StripLineComments VariableName striplinecommentsVar New new SimpleType StripLineComments VariableName readerVar VariableName striplinecommentsVar MethodName setComments MethodName getComments VariableName striplinecommentsVar MethodName setInitialized BooleanLiteral true ReturnStatement return VariableName striplinecommentsVar
SimpleType TabsToSpaces VariableName tabstospacesVar New new SimpleType TabsToSpaces VariableName readerVar VariableName tabstospacesVar MethodName setTablength MethodName getTablength VariableName tabstospacesVar MethodName setInitialized BooleanLiteral true ReturnStatement return VariableName tabstospacesVar
SimpleType PrefixLines VariableName prefixlinesVar New new SimpleType PrefixLines VariableName readerVar VariableName prefixlinesVar MethodName setPrefix MethodName getPrefix VariableName prefixlinesVar MethodName setInitialized BooleanLiteral true ReturnStatement return VariableName prefixlinesVar
SimpleType ReplaceTokens VariableName replacetokensVar New new SimpleType ReplaceTokens VariableName readerVar VariableName replacetokensVar MethodName setBeginToken MethodName getBeginToken VariableName replacetokensVar MethodName setEndToken MethodName getEndToken VariableName replacetokensVar MethodName setTokens MethodName getTokens VariableName replacetokensVar MethodName setInitialized BooleanLiteral true ReturnStatement return VariableName replacetokensVar
SimpleType StripLineBreaks VariableName striplinebreaksVar New new SimpleType StripLineBreaks VariableName readerVar VariableName striplinebreaksVar MethodName setLineBreaks MethodName getLineBreaks VariableName striplinebreaksVar MethodName setInitialized BooleanLiteral true ReturnStatement return VariableName striplinebreaksVar
ThisExpression this VariableName objectVar Operator = VariableName objectVar ThisExpression this VariableName objectVar Operator = VariableName objectVar Operator == NullLiteral null NullLiteral null VariableName objectVar MethodName toString
ThisExpression this VariableName resourceVar Operator = VariableName resourceVar
IfStatement if Name NATIVE_ENCODING MethodName equals VariableName stringVar VariableName stringVar Operator = NullLiteral null ThisExpression this VariableName stringVar Operator = VariableName stringVar
VariableName booleanVar Operator = VariableName booleanVar
IfStatement if VariableName omcontainerVar Instanceof instanceof SimpleType OMDocument VariableName omfactoryVar MethodName createOMDocType VariableName omcontainerVar VariableName stringVar VariableName stringVar VariableName stringVar VariableName stringVar
VariableName omcontainerVar Operator = SimpleType OMNode VariableName omcontainerVar MethodName getParent
SimpleType OMElement VariableName omelementVar SimpleType OMElement VariableName omcontainerVar SimpleType OMNamespace VariableName omnamespaceVar IfStatement if VariableName stringVar MethodName length Operator > NumberLiteral numberLiteral VariableName omnamespaceVar Operator = VariableName omelementVar MethodName findNamespace VariableName stringVar VariableName stringVar IfStatement if VariableName omnamespaceVar Operator == NullLiteral null ThrowStatement throw New new SimpleType OMException StringLiteral stringLiteral Operator + VariableName stringVar VariableName omnamespaceVar Operator = NullLiteral null SimpleType OMAttribute VariableName omattributeVar VariableName omelementVar MethodName addAttribute VariableName stringVar VariableName stringVar VariableName omnamespaceVar VariableName omattributeVar MethodName setAttributeType VariableName stringVar
IfStatement if VariableName stringVar MethodName isEmpty SimpleType OMElement VariableName omcontainerVar MethodName declareDefaultNamespace VariableName stringVar SimpleType OMElement VariableName omcontainerVar MethodName declareNamespace VariableName stringVar VariableName stringVar
IfStatement if VariableName stringVar Operator == NullLiteral null VariableName omfactoryVar MethodName createOMEntityReference VariableName omcontainerVar VariableName stringVar ThrowStatement throw New new SimpleType UnsupportedOperationException
TryStatement try VariableName contenthandlerVar MethodName endDocument CatchClause catch SimpleType SAXException VariableName saxexceptionVar ThrowStatement throw New new SimpleType StreamException VariableName ex
ReturnStatement return New new SimpleType Builder
IfStatement if VariableName stringVar Operator == NullLiteral null ReturnStatement return NullLiteral null TryStatement try ReturnStatement return VariableName stringVar MethodName getBytes VariableName stringVar CatchClause catch SimpleType UnsupportedEncodingException VariableName unsupportedencodingexceptionVar ThrowStatement throw New new SimpleType CmisRuntimeException StringLiteral stringLiteral VariableName e
IfStatement if VariableName propertydataVar Operator == NullLiteral null Operator || VariableName propertydataVar MethodName getId Operator == NullLiteral null ReturnStatement return MethodName removeProperty VariableName propertydataVar MethodName getId VariableName listVar MethodName add VariableName propertydataVar VariableName mapVar MethodName put VariableName propertydataVar MethodName getId VariableName propertydataVar
EnhancedForStatement for SimpleType String VariableName stringVar VariableName listVar ThisExpression this VariableName listVar MethodName add New new SimpleType SNIHostName VariableName sniHostName
PrimitiveType long VariableName longVar VariableName stampedlockVar MethodName readLock TryStatement try ReturnStatement return VariableName supplierVar MethodName get VariableName stampedlockVar MethodName unlockRead VariableName longVar
PrimitiveType long VariableName longVar VariableName stampedlockVar MethodName readLock TryStatement try ReturnStatement return VariableName throwingsupplierVar MethodName get VariableName stampedlockVar MethodName unlockRead VariableName longVar
PrimitiveType long VariableName longVar VariableName stampedlockVar MethodName writeLock TryStatement try ReturnStatement return VariableName supplierVar MethodName get VariableName stampedlockVar MethodName unlockWrite VariableName longVar
PrimitiveType long VariableName longVar VariableName stampedlockVar MethodName writeLock TryStatement try ReturnStatement return VariableName throwingsupplierVar MethodName get VariableName stampedlockVar MethodName unlockWrite VariableName longVar
IfStatement if Operator ! VariableName predicateVar MethodName matches VariableName exchangeVar IfStatement if VariableName stringVar Operator == NullLiteral null ThrowStatement throw New new SimpleType AssertionError VariableName predicateVar Operator + StringLiteral stringLiteral VariableName exchangeVar ThrowStatement throw New new SimpleType AssertionError VariableName stringVar Operator + VariableName predicateVar StringLiteral stringLiteral VariableName exchangeVar
IfStatement if VariableName executorserviceVar Operator != NullLiteral null VariableName sedaendpointVar MethodName getCamelContext MethodName getExecutorServiceManager MethodName shutdownNow VariableName executorserviceVar VariableName executorserviceVar Operator = NullLiteral null
Name ServiceHelper MethodName stopService VariableName processorVar
ReturnStatement return VariableName booleanVar
ParameterizedType Map VariableName mapVar New new ParameterizedType HashMap EnhancedForStatement for ParameterizedType Entry VariableName entryVar MethodName entrySet IfStatement if VariableName classVar MethodName isInstance VariableName entry MethodName getValue VariableName mapVar MethodName put VariableName entry MethodName getKey VariableName classVar MethodName cast VariableName entry MethodName getValue ReturnStatement return VariableName mapVar
ReturnStatement return VariableName booleanVar
ReturnStatement return New new SimpleType CaseInsensitiveMap VariableName mapVar
VariableName hystrixconfigurationdefinitionVar Operator = VariableName hystrixconfigurationdefinitionVar ReturnStatement return ThisExpression this
VariableName stringVar Operator = VariableName stringVar ReturnStatement return ThisExpression this
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return New new SimpleType RestOperationParamDefinition VariableName verbdefinitionVar
ReturnStatement return New new SimpleType RestOperationResponseMsgDefinition VariableName verbdefinitionVar
ReturnStatement return VariableName booleanVar
MethodName popBlock SimpleType FinallyDefinition VariableName finallydefinitionVar New new SimpleType FinallyDefinition MethodName addOutput VariableName finallydefinitionVar MethodName pushBlock VariableName finallydefinitionVar ReturnStatement return ThisExpression this
VariableName atomicbooleanVar MethodName set BooleanLiteral true
MethodName setStartupOrder VariableName intVar ReturnStatement return ThisExpression this
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
SimpleType TryDefinition VariableName trydefinitionVar New new SimpleType TryDefinition MethodName addOutput VariableName trydefinitionVar ReturnStatement return VariableName trydefinitionVar
IfStatement if VariableName endpointVar MethodName isSingleton ReturnStatement return VariableName endpointVar MethodName getEndpointKey SimpleType String VariableName stringVar VariableName endpointVar MethodName getEndpointKey PrimitiveType int VariableName intVar VariableName uri MethodName indexOf CharacterLiteral charLiteral SimpleType String VariableName stringVar VariableName pos Operator == Operator - NumberLiteral numberLiteral VariableName uri VariableName uri MethodName substring NumberLiteral numberLiteral VariableName pos VariableName id Operator += StringLiteral stringLiteral Operator + Name ObjectHelper MethodName getIdentityHashCode VariableName endpointVar ReturnStatement return VariableName id
Name ServiceHelper MethodName stopService VariableName mbeaninfoassemblerVar
ReturnStatement return BooleanLiteral false
ReturnStatement return BooleanLiteral true
ReturnStatement return BooleanLiteral true
ReturnStatement return VariableName runtimeendpointregistryVar MethodName size
ReturnStatement return BooleanLiteral true
ReturnStatement return BooleanLiteral true
ReturnStatement return BooleanLiteral true
ReturnStatement return BooleanLiteral true
ReturnStatement return BooleanLiteral true
ReturnStatement return BooleanLiteral true
ReturnStatement return BooleanLiteral true
SimpleType ThrottlingExceptionHalfOpenHandler VariableName throttlingexceptionhalfopenhandlerVar MethodName getPolicy MethodName getHalfOpenHandler IfStatement if VariableName throttlingexceptionhalfopenhandlerVar Operator != NullLiteral null ReturnStatement return VariableName throttlingexceptionhalfopenhandlerVar MethodName getClass MethodName getSimpleName ReturnStatement return StringLiteral stringLiteral
VariableName queueVar MethodName clear VariableName queueVar MethodName clear
SimpleType Expression VariableName expressionVar Name ExpressionBuilder MethodName toExpression VariableName stringVar ReturnStatement return New new SimpleType ValueBuilder VariableName expressionVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
IfStatement if VariableName soapmessageVar MethodName getSoapHeader Operator != NullLiteral null Operator && MethodName getEndpoint MethodName getConfiguration MethodName isAllowResponseHeaderOverride MethodName populateMessageHeaderFromResponse VariableName messageVar VariableName soapmessageVar MethodName getSoapHeader IfStatement if VariableName soapmessageVar MethodName getAttachments Operator != NullLiteral null Operator && MethodName getEndpoint MethodName getConfiguration MethodName isAllowResponseAttachmentOverride MethodName populateMessageAttachmentsFromResponse VariableName messageVar VariableName soapmessageVar MethodName getAttachments
ReturnStatement return StringLiteral stringLiteral
SimpleType ExecutorService VariableName executorserviceVar ThisExpression this VariableName executorserviceVar IfStatement if VariableName executorserviceVar Operator != NullLiteral null Operator && ThisExpression this MethodName isRunAllowed VariableName executorserviceVar MethodName execute ThisExpression this MethodName getAsyncProcessor MethodName process VariableName exchangeVar VariableName doneSync IfStatement if VariableName exchangeVar MethodName getException Operator != NullLiteral null MethodName getExceptionHandler MethodName handleException StringLiteral stringLiteral VariableName exchangeVar VariableName exchangeVar MethodName getException VariableName asynccallbackVar MethodName done VariableName doneSync ReturnStatement return BooleanLiteral false Name LOG MethodName warn StringLiteral stringLiteral VariableName exchangeVar VariableName asynccallbackVar MethodName done BooleanLiteral true ReturnStatement return BooleanLiteral true
IfStatement if VariableName booleanVar VariableName httpserviceVar MethodName unregister VariableName stringVar VariableName booleanVar Operator = BooleanLiteral false
ReturnStatement return VariableName infinispancustomlistenerVar Operator != NullLiteral null
SynchronizedStatement synchronized VariableName listVar VariableName listVar MethodName add VariableName cdieventconsumerVar
SynchronizedStatement synchronized VariableName listVar VariableName listVar MethodName remove VariableName cdieventconsumerVar
ReturnStatement return VariableName booleanVar
IfStatement if VariableName headerfilterstrategyVar Operator == NullLiteral null VariableName headerfilterstrategyVar Operator = New new SimpleType CxfHeaderFilterStrategy IfStatement if VariableName cxfbindingVar Operator == NullLiteral null VariableName cxfbindingVar Operator = New new SimpleType DefaultCxfBinding IfStatement if VariableName cxfbindingVar Instanceof instanceof SimpleType HeaderFilterStrategyAware SimpleType HeaderFilterStrategyAware VariableName cxfbindingVar MethodName setHeaderFilterStrategy MethodName getHeaderFilterStrategy
ReturnStatement return VariableName booleanVar
VariableName serverVar MethodName start
ReturnStatement return MethodName lookupByType VariableName blueprintcontainerVar VariableName classVar
ReturnStatement return VariableName recordVar MethodName toString
ReturnStatement return VariableName messageVar MethodName toString
ReturnStatement return VariableName addressVar MethodName toString
ReturnStatement return VariableName inetaddressVar MethodName getHostAddress
PrimitiveType boolean VariableName booleanVar VariableName mina2configurationVar MethodName isMinaLogger ParameterizedType List VariableName listVar VariableName mina2configurationVar MethodName getFilters VariableName socketaddressVar Operator = New new SimpleType VmPipeAddress VariableName mina2configurationVar MethodName getPort VariableName ioacceptorVar Operator = New new SimpleType VmPipeAcceptor MethodName configureCodecFactory StringLiteral stringLiteral VariableName ioacceptorVar VariableName mina2configurationVar IfStatement if VariableName booleanVar VariableName ioacceptorVar MethodName getFilterChain MethodName addLast StringLiteral stringLiteral New new SimpleType LoggingFilter MethodName appendIoFiltersToChain VariableName listVar VariableName ioacceptorVar MethodName getFilterChain IfStatement if VariableName mina2configurationVar MethodName getSslContextParameters Operator != NullLiteral null Name LOG MethodName warn StringLiteral stringLiteral Operator + StringLiteral stringLiteral
ReturnStatement return VariableName booleanVar
ReturnStatement return BooleanLiteral true
ReturnStatement return BooleanLiteral true
Name ServiceHelper MethodName stopService VariableName loadbalancerVar
VariableName httpservletresponseVar MethodName setHeader VariableName stringVar VariableName stringVar
VariableName exchangeVar MethodName getIn MethodName setHeader VariableName stringVar VariableName stringVar
VariableName loggerVar MethodName trace StringLiteral stringLiteral VariableName stringVar VariableName tVar SimpleType T VariableName tVar VariableName mapVar MethodName put VariableName stringVar VariableName tVar IfStatement if VariableName tVar Operator != NullLiteral null VariableName loggerVar MethodName debug StringLiteral stringLiteral VariableName stringVar VariableName tVar
ReturnStatement return VariableName jobinstancedaoVar MethodName findJobInstancesByName VariableName stringVar VariableName intVar VariableName intVar
VariableName intVar Operator ++
ReturnStatement return VariableName tVar MethodName toString
IfStatement if VariableName fileVar MethodName exists TryStatement try MethodName getLog MethodName debug StringLiteral stringLiteral Operator + VariableName fileVar MethodName getAbsolutePath Name FileUtils MethodName forceDelete VariableName fileVar CatchClause catch SimpleType IOException VariableName ioexceptionVar MethodName getLog MethodName error StringLiteral stringLiteral VariableName e ThrowStatement throw New new SimpleType MojoExecutionException StringLiteral stringLiteral Operator + VariableName fileVar MethodName getAbsolutePath StringLiteral stringLiteral
ReturnStatement return VariableName listVar Operator != NullLiteral null Operator && Operator ! VariableName listVar MethodName isEmpty
IfStatement if VariableName stringVar Operator == NullLiteral null Operator || VariableName stringVar MethodName length Operator == NumberLiteral numberLiteral VariableName stringVar Operator = VariableName stringVar
ReturnStatement return MethodName getClass MethodName getSimpleName
ReturnStatement return MethodName getClass MethodName getSimpleName
EnhancedForStatement for ParameterizedType Class VariableName classVar MethodName getRawTypes IfStatement if VariableName classVar MethodName isAssignableFrom VariableName rawType ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
ReturnStatement return Name Iterators MethodName unmodifiableIterator VariableName enummapVar MethodName keySet MethodName iterator
ReturnStatement return VariableName concurrentmapVar MethodName size
ReturnStatement return New new SimpleType CellIterator
ReturnStatement return VariableName mapVar MethodName size
Modifier final ParameterizedType ImmutableList VariableName immutablelistVar VariableName immutablemapVar MethodName entrySet MethodName asList ReturnStatement return New new ParameterizedType ImmutableAsList SimpleType V MethodName get PrimitiveType int VariableName intVar ReturnStatement return VariableName immutablelistVar MethodName get VariableName intVar MethodName getValue ParameterizedType ImmutableCollection MethodName delegateCollection ReturnStatement return ThisExpression this
ReturnStatement return Name ImmutableSet MethodName of VariableName vVar
SwitchStatement switch MethodName size SwitchCase case NumberLiteral numberLiteral ReturnStatement return Name ImmutableList MethodName of SwitchCase case NumberLiteral numberLiteral ReturnStatement return Name ImmutableList MethodName of MethodName iterator MethodName next SwitchCase default ReturnStatement return New new ParameterizedType RegularImmutableAsList ThisExpression this MethodName toArray
MethodName checkState VariableName equivalenceVar Operator == NullLiteral null StringLiteral stringLiteral VariableName equivalenceVar VariableName equivalenceVar Operator = MethodName checkNotNull VariableName equivalenceVar ThisExpression this VariableName booleanVar Operator = BooleanLiteral true ReturnStatement return ThisExpression this
ReturnStatement return VariableName iterableVar Instanceof instanceof SimpleType Collection ParameterizedType Collection VariableName iterableVar Name Lists MethodName newArrayList VariableName iterableVar MethodName iterator
SimpleType StringBuilder VariableName stringbuilderVar New new SimpleType StringBuilder MethodName append VariableName stringVar MethodName append CharacterLiteral charLiteral MethodName append VariableName stringVar IfStatement if Operator ! VariableName immutablelistmultimapVar MethodName isEmpty VariableName stringbuilderVar MethodName append StringLiteral stringLiteral ParameterizedType Multimap VariableName multimapVar Name Multimaps MethodName transformValues VariableName immutablelistmultimapVar New new ParameterizedType Function SimpleType String MethodName apply SimpleType String VariableName stringVar ReturnStatement return Name TOKEN_MATCHER MethodName matchesAllOf VariableName stringVar VariableName stringVar MethodName escapeAndQuote VariableName stringVar Name PARAMETER_JOINER MethodName appendTo VariableName stringbuilderVar VariableName quotedParameters MethodName entries ReturnStatement return VariableName stringbuilderVar MethodName toString
ReturnStatement return VariableName equivalenceVar MethodName equivalent VariableName functionVar MethodName apply VariableName fVar VariableName functionVar MethodName apply VariableName fVar
ReturnStatement return VariableName equivalenceVar MethodName hash VariableName functionVar MethodName apply VariableName fVar
ReturnStatement return New new ParameterizedType ConverterComposition ThisExpression this MethodName checkNotNull VariableName converterVar
ReturnStatement return VariableName strategyVar MethodName iterator ThisExpression this VariableName charsequenceVar
ParameterizedType Iterator VariableName iteratorVar VariableName iterableVar MethodName iterator ParameterizedType Iterator VariableName iteratorVar VariableName iterableVar MethodName iterator WhileStatement while VariableName iteratorVar MethodName hasNext Operator && VariableName iteratorVar MethodName hasNext IfStatement if Operator ! VariableName equivalenceVar MethodName equivalent VariableName iteratorVar MethodName next VariableName iteratorVar MethodName next ReturnStatement return BooleanLiteral false ReturnStatement return Operator ! VariableName iteratorVar MethodName hasNext Operator && Operator ! VariableName iteratorVar MethodName hasNext
PrimitiveType int VariableName intVar NumberLiteral numberLiteral EnhancedForStatement for SimpleType T VariableName tVar VariableName iterableVar VariableName intVar Operator = VariableName intVar Operator * NumberLiteral numberLiteral Operator + VariableName equivalenceVar MethodName hash VariableName element ReturnStatement return VariableName intVar
TryStatement try Modifier final SimpleType HttpGet VariableName httpgetVar MethodName createGetControllerRequest ReturnStatement return MethodName execute VariableName httpgetVar TypeLiteral class MethodName getController CatchClause catch Modifier final SimpleType HttpGetFailedException VariableName httpgetfailedexceptionVar IfStatement if VariableName intVar Operator == VariableName e MethodName getResponseCode VariableName loggerVar MethodName debug StringLiteral stringLiteral Modifier final SimpleType HttpGet VariableName httpgetVar MethodName createGet StringLiteral stringLiteral ReturnStatement return MethodName execute VariableName get TypeLiteral class MethodName getController ThrowStatement throw VariableName e
IfStatement if VariableName contentclaimVar Operator == NullLiteral null ReturnStatement return VariableName processcontextVar MethodName getContentRepository MethodName decrementClaimantCount VariableName contentclaimVar
ThrowStatement throw New new SimpleType UnsupportedOperationException StringLiteral stringLiteral
ThrowStatement throw New new SimpleType UnsupportedOperationException StringLiteral stringLiteral
VariableName eventdrivenworkerqueueVar MethodName resumeWork VariableName connectableVar VariableName loggerVar MethodName info StringLiteral stringLiteral VariableName connectableVar VariableName concurrentmapVar MethodName put VariableName connectableVar VariableName schedulestateVar
VariableName eventdrivenworkerqueueVar MethodName suspendWork VariableName connectableVar VariableName loggerVar MethodName info StringLiteral stringLiteral VariableName connectableVar
EnhancedForStatement for Modifier final ParameterizedType ScheduledFuture VariableName scheduledfutureVar VariableName schedulestateVar MethodName getFutures VariableName future MethodName cancel BooleanLiteral false VariableName loggerVar MethodName info StringLiteral stringLiteral VariableName connectableVar
EnhancedForStatement for Modifier final ParameterizedType ScheduledFuture VariableName scheduledfutureVar VariableName schedulestateVar MethodName getFutures VariableName future MethodName cancel BooleanLiteral false VariableName loggerVar MethodName info StringLiteral stringLiteral VariableName reportingtasknodeVar MethodName getReportingTask
MethodName unschedule SimpleType Object VariableName connectableVar VariableName schedulestateVar
MethodName unschedule SimpleType Object VariableName reportingtasknodeVar VariableName schedulestateVar
MethodName onComponentRendered
ReturnStatement return VariableName booleanVar
SimpleType Result VariableName resultVar VariableName Result VariableName SUCCESS IfStatement if VariableName objectVar Instanceof instanceof ParameterizedType LoadableDetachableModel ParameterizedType LoadableDetachableModel VariableName loadabledetachablemodelVar ParameterizedType LoadableDetachableModel VariableName objectVar IfStatement if VariableName model MethodName isAttached VariableName resultVar Operator = New new SimpleType Result VariableName Result VariableName Status VariableName FAILURE StringLiteral stringLiteral ReturnStatement return VariableName resultVar
SuperMethodInvocation super MethodName fireInitialize MethodName visitChildren New new ParameterizedType IVisitor PrimitiveType void MethodName component Modifier final SimpleType Component VariableName componentVar Modifier final ParameterizedType IVisit VariableName ivisitVar VariableName componentVar MethodName fireInitialize
ReturnStatement return New new SimpleType MockWebRequest VariableName urlVar VariableName listVar VariableName mapVar VariableName mockrequestparametersVar VariableName localeVar
ReturnStatement return New new ParameterizedType RangeValidator VariableName tVar NullLiteral null
ForStatement for PrimitiveType int VariableName intVar VariableName arrayliststackVar MethodName size Operator - NumberLiteral numberLiteral VariableName j Operator >= NumberLiteral numberLiteral VariableName j Operator -- SimpleType MarkupContainer VariableName markupcontainerVar VariableName arrayliststackVar MethodName get VariableName j SimpleType Component VariableName componentVar VariableName container MethodName findComponentToDequeue VariableName componenttagVar IfStatement if VariableName child Operator != NullLiteral null ReturnStatement return VariableName child ReturnStatement return NullLiteral null
ReturnStatement return BooleanLiteral false
ReturnStatement return BooleanLiteral false
ReturnStatement return BooleanLiteral false
EnhancedForStatement for SimpleType Component VariableName componentVar VariableName markupcontainerVar VariableName child MethodName setMarkup NullLiteral null
Name Args MethodName notNull VariableName stringVar StringLiteral stringLiteral Name Args MethodName notNull VariableName imanageablepageVar StringLiteral stringLiteral SimpleType SerializedPage VariableName serializedpageVar NullLiteral null ArrayType byte[] VariableName byte[]Var MethodName serializePage VariableName imanageablepageVar IfStatement if VariableName byte[]Var Operator != NullLiteral null VariableName serializedpageVar Operator = New new SimpleType SerializedPage VariableName stringVar VariableName imanageablepageVar MethodName getPageId VariableName byte[]Var IfStatement if Name LOG MethodName isWarnEnabled Name LOG MethodName warn StringLiteral stringLiteral VariableName imanageablepageVar ReturnStatement return VariableName serializedpageVar
MethodName check_dated ReturnStatement return VariableName xmlsimplelistVar
MethodName check_dated IfStatement if VariableName xmlsimplelistVar Operator == NullLiteral null ReturnStatement return NullLiteral null IfStatement if VariableName xmlsimplelistVar Operator != NullLiteral null ReturnStatement return VariableName xmlsimplelistVar SimpleType List VariableName listVar New new SimpleType ArrayList ForStatement for PrimitiveType int VariableName intVar NumberLiteral numberLiteral VariableName i Operator < VariableName xmlsimplelistVar MethodName size VariableName i Operator ++ VariableName listVar MethodName add MethodName java_value SimpleType XmlObject VariableName xmlsimplelistVar MethodName get VariableName i VariableName xmlsimplelistVar Operator = New new SimpleType XmlSimpleList VariableName listVar ReturnStatement return VariableName xmlsimplelistVar
MethodName check_dated ReturnStatement return VariableName qnameVar
MethodName check_dated ReturnStatement return Name BigDecimal MethodName valueOf VariableName longVar
MethodName check_dated ReturnStatement return Name BigInteger MethodName valueOf VariableName longVar
MethodName check_dated ReturnStatement return VariableName longVar
ThrowStatement throw New new SimpleType XmlValueNotSupportedException VariableName XmlErrorCodes VariableName EXCEPTION_VALUE_NOT_SUPPORTED_S2J ArrayType Object[] ArrayInitializer arrayInitializer
SimpleType BigDecimal VariableName bigdecimalVar MethodName bigDecimalValue ReturnStatement return VariableName bigdecimalVar Operator == NullLiteral null NullLiteral null VariableName bigdecimalVar MethodName toBigInteger
ThrowStatement throw New new SimpleType XmlValueNotSupportedException VariableName XmlErrorCodes VariableName EXCEPTION_VALUE_NOT_SUPPORTED_S2J ArrayType Object[] ArrayInitializer arrayInitializer
IfStatement if MethodName isImmutable IfStatement if VariableName intVar Operator & VariableName intVar Operator != NumberLiteral numberLiteral ReturnStatement return NullLiteral null ReturnStatement return MethodName compute_text NullLiteral null SynchronizedStatement synchronized MethodName monitor IfStatement if MethodName _isComplexContent ReturnStatement return MethodName get_store MethodName fetch_text VariableName TypeStore VariableName WS_PRESERVE MethodName check_dated IfStatement if VariableName intVar Operator & VariableName intVar Operator != NumberLiteral numberLiteral ReturnStatement return NullLiteral null ReturnStatement return MethodName compute_text MethodName has_store MethodName get_store NullLiteral null
ThrowStatement throw New new SimpleType XmlValueNotSupportedException VariableName XmlErrorCodes VariableName EXCEPTION_VALUE_NOT_SUPPORTED_S2J ArrayType Object[] ArrayInitializer arrayInitializer
ThrowStatement throw New new SimpleType XmlValueNotSupportedException VariableName XmlErrorCodes VariableName EXCEPTION_VALUE_NOT_SUPPORTED_S2J ArrayType Object[] ArrayInitializer arrayInitializer
ThrowStatement throw New new SimpleType XmlValueNotSupportedException VariableName XmlErrorCodes VariableName EXCEPTION_VALUE_NOT_SUPPORTED_S2J ArrayType Object[] ArrayInitializer arrayInitializer
ThrowStatement throw New new SimpleType XmlValueNotSupportedException VariableName XmlErrorCodes VariableName EXCEPTION_VALUE_NOT_SUPPORTED_S2J ArrayType Object[] ArrayInitializer arrayInitializer
ThrowStatement throw New new SimpleType XmlValueNotSupportedException VariableName XmlErrorCodes VariableName EXCEPTION_VALUE_NOT_SUPPORTED_S2J ArrayType Object[] ArrayInitializer arrayInitializer
ThrowStatement throw New new SimpleType XmlValueNotSupportedException VariableName XmlErrorCodes VariableName EXCEPTION_VALUE_NOT_SUPPORTED_S2J ArrayType Object[] ArrayInitializer arrayInitializer
ThrowStatement throw New new SimpleType XmlValueNotSupportedException VariableName XmlErrorCodes VariableName EXCEPTION_VALUE_NOT_SUPPORTED_S2J ArrayType Object[] ArrayInitializer arrayInitializer
ReturnStatement return MethodName java_value ThisExpression this
MethodName check_dated ReturnStatement return VariableName bigintegerVar Operator == NullLiteral null NullLiteral null New new SimpleType BigDecimal VariableName bigintegerVar
MethodName check_dated ReturnStatement return VariableName bigintegerVar
MethodName check_dated ReturnStatement return VariableName stringenumabstractbaseVar
MethodName check_dated ReturnStatement return VariableName bigdecimalVar
MethodName check_dated IfStatement if VariableName byte[]Var Operator == NullLiteral null ReturnStatement return NullLiteral null ArrayType byte[] VariableName byte[]Var ArrayType byte[] VariableName byte[]Var VariableName length Name System MethodName arraycopy VariableName byte[]Var NumberLiteral numberLiteral VariableName byte[]Var NumberLiteral numberLiteral VariableName byte[]Var VariableName length ReturnStatement return VariableName byte[]Var
MethodName check_dated ReturnStatement return New new SimpleType BigDecimal PrimitiveType double VariableName intVar
MethodName check_dated ReturnStatement return Name BigInteger MethodName valueOf VariableName intVar
MethodName check_dated ReturnStatement return VariableName intVar
MethodName check_dated ReturnStatement return VariableName intVar
MethodName check_dated IfStatement if VariableName byte[]Var Operator == NullLiteral null ReturnStatement return NullLiteral null ArrayType byte[] VariableName byte[]Var ArrayType byte[] VariableName byte[]Var VariableName length Name System MethodName arraycopy VariableName byte[]Var NumberLiteral numberLiteral VariableName byte[]Var NumberLiteral numberLiteral VariableName byte[]Var VariableName length ReturnStatement return VariableName byte[]Var
MethodName check_dated ReturnStatement return VariableName booleanVar
MethodName check_dated ReturnStatement return New new SimpleType BigDecimal VariableName doubleVar
MethodName check_dated ReturnStatement return VariableName doubleVar
MethodName check_dated ReturnStatement return PrimitiveType float VariableName doubleVar
MethodName check_dated ReturnStatement return New new SimpleType BigDecimal VariableName floatVar
MethodName check_dated ReturnStatement return VariableName floatVar
MethodName check_dated ReturnStatement return VariableName floatVar
MethodName check_dated IfStatement if VariableName gdateVar Operator == NullLiteral null ReturnStatement return NullLiteral null ReturnStatement return VariableName gdateVar MethodName getCalendar
MethodName check_dated IfStatement if VariableName gdateVar Operator == NullLiteral null ReturnStatement return NullLiteral null ReturnStatement return VariableName gdateVar MethodName getDate
VariableName listVar MethodName add VariableName xssfhyperlinkVar
IfStatement if VariableName intVar Operator >= VariableName intVar Operator + VariableName intVar Operator && VariableName intVar Operator <= VariableName intVar Operator + VariableName intVar IfStatement if VariableName intVar Operator > NumberLiteral numberLiteral Operator && VariableName intVar Operator > VariableName intVar ReturnStatement return BooleanLiteral true IfStatement if VariableName intVar Operator < NumberLiteral numberLiteral Operator && VariableName intVar Operator < VariableName intVar ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
SimpleType CTPatternFill VariableName ctpatternfillVar VariableName ctfillVar MethodName getPatternFill IfStatement if VariableName ctpatternfillVar Operator == NullLiteral null VariableName ctpatternfillVar Operator = VariableName ctfillVar MethodName addNewPatternFill ReturnStatement return VariableName ctpatternfillVar
IfStatement if VariableName booleanVar ThrowStatement throw New new SimpleType IllegalStateException StringLiteral stringLiteral ReturnStatement return VariableName intVar Operator - VariableName intVar
ReturnStatement return PrimitiveType int VariableName longVar Operator - VariableName longVar
ReturnStatement return Name Collections MethodName unmodifiableList VariableName listVar MethodName iterator
ReturnStatement return VariableName booleanVar
SimpleType SSSlideInfoAtom VariableName ssslideinfoatomVar SimpleType SSSlideInfoAtom MethodName getSlideRecord MethodName findFirstOfType VariableName RecordTypes VariableName SSSlideInfoAtom VariableName typeID ReturnStatement return VariableName ssslideinfoatomVar Operator == NullLiteral null BooleanLiteral false VariableName ssslideinfoatomVar MethodName getEffectTransitionFlagByBit VariableName SSSlideInfoAtom VariableName HIDDEN_BIT
ReturnStatement return VariableName atomicintegerVar MethodName intValue
IfStatement if VariableName bundlejobbeanVar MethodName getStatus Operator != VariableName Job VariableName Status VariableName PREP SimpleType String VariableName stringVar StringLiteral stringLiteral Operator + VariableName bundlejobbeanVar MethodName getId StringLiteral stringLiteral VariableName bundlejobbeanVar MethodName getStatus Name LOG MethodName info VariableName msg ThrowStatement throw New new SimpleType PreconditionException VariableName ErrorCode VariableName E1100 VariableName msg
ReturnStatement return ThisExpression this VariableName booleanVar
IfStatement if Operator ! VariableName setVar MethodName contains VariableName stringVar MethodName toLowerCase ReturnStatement return BooleanLiteral false ReturnStatement return BooleanLiteral true
IfStatement if VariableName stringVar Operator != NullLiteral null VariableName stringVar Operator = VariableName stringVar MethodName replaceAll VariableName stringVar VariableName stringVar VariableName stringVar Operator = VariableName stringVar MethodName replaceAll VariableName stringVar VariableName stringVar VariableName stringVar Operator = VariableName stringVar MethodName replaceAll VariableName stringVar VariableName stringVar ReturnStatement return VariableName stringVar
ReturnStatement return VariableName channelfutureVar
ReturnStatement return VariableName channelfutureVar
SimpleType String VariableName stringVar VariableName iservletrequestVar MethodName getHttpRequest MethodName uri MethodName deliverResource VariableName stringVar VariableName iservletresponseVar
ReturnStatement return BooleanLiteral false
ThrowStatement throw Name HyracksDataException MethodName create VariableName ErrorCode VariableName FLUSH_NOT_SUPPORTED_IN_EXTERNAL_INDEX
ThrowStatement throw New new SimpleType UnsupportedOperationException StringLiteral stringLiteral
ReturnStatement return BooleanLiteral false
ReturnStatement return BooleanLiteral false
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return BooleanLiteral false
ReturnStatement return BooleanLiteral false
ForStatement for PrimitiveType int VariableName intVar NumberLiteral numberLiteral VariableName pid Operator < VariableName intVar VariableName pid Operator ++ IfStatement if Operator ! VariableName bitsetVar MethodName get VariableName pid VariableName ipartitionedtuplebuffermanagerVar MethodName flushPartition VariableName pid New new SimpleType IFrameWriter PrimitiveType void MethodName open PrimitiveType void MethodName nextFrame SimpleType ByteBuffer VariableName bytebufferVar VariableName inmemoryhashjoinVar MethodName build VariableName bytebufferVar PrimitiveType void MethodName fail PrimitiveType void MethodName close
ReturnStatement return BooleanLiteral false
ReturnStatement return BooleanLiteral false
ReturnStatement return BooleanLiteral false
ThrowStatement throw New new SimpleType UnsupportedOperationException StringLiteral stringLiteral
ReturnStatement return BooleanLiteral false
VariableName booleanVar Operator = BooleanLiteral true
VariableName dataoutputVar MethodName write VariableName arraytuplebuilderVar MethodName getByteArray VariableName arraytuplebuilderVar MethodName addFieldEndOffset
VariableName aintervalpointableVar MethodName getStart VariableName ipointableVar VariableName aintervalpointableVar MethodName getEnd VariableName ipointableVar VariableName aintervalpointableVar MethodName getStart VariableName ipointableVar VariableName aintervalpointableVar MethodName getEnd VariableName ipointableVar ReturnStatement return VariableName comparisonhelperVar MethodName compare VariableName aintervalpointableVar MethodName getTypeTag VariableName aintervalpointableVar MethodName getTypeTag VariableName ipointableVar VariableName ipointableVar Operator == NumberLiteral numberLiteral Operator && VariableName comparisonhelperVar MethodName compare VariableName aintervalpointableVar MethodName getTypeTag VariableName aintervalpointableVar MethodName getTypeTag VariableName ipointableVar VariableName ipointableVar Operator == NumberLiteral numberLiteral
ReturnStatement return VariableName booleanVar
SwitchStatement switch VariableName modeVar SwitchCase case VariableName WRITE VariableName reentrantreadwritelockVar MethodName writeLock MethodName lock BreakStatement break SwitchCase default VariableName reentrantreadwritelockVar MethodName readLock MethodName lock BreakStatement break
SwitchStatement switch VariableName modeVar SwitchCase case VariableName WRITE VariableName reentrantreadwritelockVar MethodName writeLock MethodName unlock BreakStatement break SwitchCase default VariableName reentrantreadwritelockVar MethodName readLock MethodName unlock BreakStatement break
ReturnStatement return BooleanLiteral true
Name LOG MethodName info StringLiteral stringLiteral
IfStatement if Operator ! MethodName isVersionCompatible MethodName sendResponse VariableName BookieProtocol VariableName EBADVERSION Name ResponseBuilder MethodName buildErrorResponse VariableName BookieProtocol VariableName EBADVERSION VariableName requestVar VariableName bookierequestprocessorVar VariableName readRequestStats ReturnStatement return MethodName processPacket
SimpleType AddResponse VariableName addresponseVar MethodName getAddResponse IfStatement if NullLiteral null Operator != VariableName addresponseVar SimpleType Builder VariableName builderVar Name Response MethodName newBuilder MethodName setHeader MethodName getHeader MethodName setStatus VariableName addresponseVar MethodName getStatus MethodName setAddResponse VariableName addresponseVar SimpleType Response VariableName responseVar VariableName response MethodName build MethodName sendResponse VariableName addresponseVar MethodName getStatus VariableName resp VariableName requestProcessor VariableName addRequestStats
Modifier final SimpleType LedgerIdGenerator VariableName ledgeridgeneratorVar VariableName bookkeeperVar MethodName getLedgerIdGenerator VariableName ledgeridgeneratorVar MethodName generateLedgerId New new ParameterizedType GenericCallback PrimitiveType void MethodName operationComplete PrimitiveType int VariableName intVar SimpleType Long VariableName longVar IfStatement if VariableName BKException VariableName Code VariableName OK Operator != VariableName intVar MethodName createComplete VariableName intVar NullLiteral null ReturnStatement return ThisExpression this VariableName longVar Operator = VariableName longVar VariableName bookkeeperVar MethodName getLedgerManager MethodName createLedgerMetadata VariableName longVar VariableName ledgermetadataVar ThisExpression this
Name Assert MethodName isInstanceOf TypeLiteral class VariableName listablebeanfactoryVar SimpleType DefaultListableBeanFactory VariableName defaultlistablebeanfactoryVar SimpleType DefaultListableBeanFactory VariableName listablebeanfactoryVar Name Assert MethodName isTrue VariableName defaultlistablebeanfactoryVar MethodName isAllowEagerClassLoading StringLiteral stringLiteral IfStatement if Operator ! VariableName defaultlistablebeanfactoryVar MethodName containsLocalBean VariableName stringVar SimpleType BeanDefinition VariableName beandefinitionVar New new SimpleType RootBeanDefinition TypeLiteral class VariableName bd MethodName getConstructorArgumentValues MethodName addIndexedArgumentValue NumberLiteral numberLiteral VariableName listablebeanfactoryVar VariableName defaultlistablebeanfactoryVar MethodName registerBeanDefinition VariableName stringVar VariableName bd ReturnStatement return VariableName defaultlistablebeanfactoryVar MethodName getBean VariableName stringVar TypeLiteral class
ReturnStatement return Name Arrays MethodName equals VariableName methodVar MethodName getParameterTypes VariableName methodVar MethodName getParameterTypes
SimpleType SimpleRabbitListenerContainerFactoryConfigurer VariableName simplerabbitlistenercontainerfactoryconfigurerVar New new SimpleType SimpleRabbitListenerContainerFactoryConfigurer VariableName simplerabbitlistenercontainerfactoryconfigurerVar MethodName setMessageConverter ThisExpression this VariableName objectproviderVar MethodName getIfUnique VariableName simplerabbitlistenercontainerfactoryconfigurerVar MethodName setMessageRecoverer ThisExpression this VariableName objectproviderVar MethodName getIfUnique VariableName simplerabbitlistenercontainerfactoryconfigurerVar MethodName setRabbitProperties ThisExpression this VariableName rabbitpropertiesVar ReturnStatement return VariableName simplerabbitlistenercontainerfactoryconfigurerVar
SimpleType SimpleRabbitListenerContainerFactory VariableName simplerabbitlistenercontainerfactoryVar New new SimpleType SimpleRabbitListenerContainerFactory VariableName simplerabbitlistenercontainerfactoryconfigurerVar MethodName configure VariableName simplerabbitlistenercontainerfactoryVar VariableName connectionfactoryVar ReturnStatement return VariableName simplerabbitlistenercontainerfactoryVar
SimpleType DirectRabbitListenerContainerFactoryConfigurer VariableName directrabbitlistenercontainerfactoryconfigurerVar New new SimpleType DirectRabbitListenerContainerFactoryConfigurer VariableName directrabbitlistenercontainerfactoryconfigurerVar MethodName setMessageConverter ThisExpression this VariableName objectproviderVar MethodName getIfUnique VariableName directrabbitlistenercontainerfactoryconfigurerVar MethodName setMessageRecoverer ThisExpression this VariableName objectproviderVar MethodName getIfUnique VariableName directrabbitlistenercontainerfactoryconfigurerVar MethodName setRabbitProperties ThisExpression this VariableName rabbitpropertiesVar ReturnStatement return VariableName directrabbitlistenercontainerfactoryconfigurerVar
SimpleType DirectRabbitListenerContainerFactory VariableName directrabbitlistenercontainerfactoryVar New new SimpleType DirectRabbitListenerContainerFactory VariableName directrabbitlistenercontainerfactoryconfigurerVar MethodName configure VariableName directrabbitlistenercontainerfactoryVar VariableName connectionfactoryVar ReturnStatement return VariableName directrabbitlistenercontainerfactoryVar
IfStatement if Name StringUtils MethodName hasLength ThisExpression this VariableName jerseypropertiesVar MethodName getApplicationPath ThisExpression this VariableName stringVar Operator = MethodName parseApplicationPath ThisExpression this VariableName jerseypropertiesVar MethodName getApplicationPath ThisExpression this VariableName stringVar Operator = MethodName findApplicationPath Name AnnotationUtils MethodName findAnnotation ThisExpression this VariableName resourceconfigVar MethodName getClass TypeLiteral class
SimpleType CaffeineCacheManager VariableName caffeinecachemanagerVar MethodName createCacheManager ParameterizedType List VariableName listVar ThisExpression this VariableName cachepropertiesVar MethodName getCacheNames IfStatement if Operator ! Name CollectionUtils MethodName isEmpty VariableName listVar VariableName caffeinecachemanagerVar MethodName setCacheNames VariableName listVar ReturnStatement return ThisExpression this VariableName cachemanagercustomizersVar MethodName customize VariableName caffeinecachemanagerVar
ReturnStatement return ThisExpression this VariableName booleanVar
ReturnStatement return VariableName Clock VariableName SYSTEM
ReturnStatement return VariableName Clock VariableName SYSTEM
ReturnStatement return ThisExpression this VariableName booleanVar
ReturnStatement return VariableName Clock VariableName SYSTEM
ReturnStatement return VariableName Clock VariableName SYSTEM
ReturnStatement return VariableName Clock VariableName SYSTEM
ReturnStatement return ThisExpression this VariableName booleanVar
ReturnStatement return VariableName Clock VariableName SYSTEM
ReturnStatement return ThisExpression this VariableName booleanVar
ReturnStatement return VariableName Clock VariableName SYSTEM
ReturnStatement return ThisExpression this VariableName booleanVar
ReturnStatement return ThisExpression this VariableName booleanVar
ReturnStatement return VariableName Clock VariableName SYSTEM
SimpleType FailureAnalysis VariableName failureanalysisVar MethodName analyze VariableName throwableVar ThisExpression this VariableName listVar ReturnStatement return MethodName report VariableName failureanalysisVar ThisExpression this VariableName classloaderVar
ReturnStatement return Name ClassUtils MethodName isPresent VariableName stringVar MethodName getClassLoader
PrimitiveType int VariableName intVar MethodName getExitCodeFromException VariableName configurableapplicationcontextVar VariableName throwableVar IfStatement if VariableName intVar Operator != NumberLiteral numberLiteral IfStatement if VariableName configurableapplicationcontextVar Operator != NullLiteral null VariableName configurableapplicationcontextVar MethodName publishEvent New new SimpleType ExitCodeEvent VariableName configurableapplicationcontextVar VariableName intVar SimpleType SpringBootExceptionHandler VariableName springbootexceptionhandlerVar MethodName getSpringBootExceptionHandler IfStatement if VariableName handler Operator != NullLiteral null VariableName handler MethodName registerExitCode VariableName intVar
SimpleType Properties VariableName propertiesVar New new SimpleType Properties VariableName propertiesVar MethodName load New new SimpleType ClassPathResource StringLiteral stringLiteral MethodName getInputStream SimpleType String VariableName stringVar VariableName propertiesVar MethodName getProperty StringLiteral stringLiteral IfStatement if VariableName stringVar Operator != NullLiteral null ThisExpression this VariableName stringVar Operator = VariableName stringVar
SimpleType Properties VariableName propertiesVar New new SimpleType Properties VariableName propertiesVar MethodName load New new SimpleType ClassPathResource StringLiteral stringLiteral MethodName getInputStream SimpleType String VariableName stringVar VariableName propertiesVar MethodName getProperty StringLiteral stringLiteral IfStatement if VariableName stringVar Operator != NullLiteral null ThisExpression this VariableName stringVar Operator = VariableName stringVar
ReturnStatement return VariableName fileVar MethodName isDirectory Operator && Operator ! VariableName fileVar MethodName getName MethodName startsWith StringLiteral stringLiteral
ReturnStatement return VariableName jobconfVar MethodName getKeepTaskFilesPattern Operator != NullLiteral null Operator || VariableName jobconfVar MethodName getKeepFailedTaskFiles
ReturnStatement return BooleanLiteral true
ReturnStatement return Operator ! Name S3Guard MethodName isNullMetadataStore VariableName metadatastoreVar
Name LOG MethodName debug StringLiteral stringLiteral VariableName listobjectsrequestVar MethodName getPrefix SimpleType ObjectListing VariableName objectlistingVar SuperMethodInvocation super MethodName listObjects VariableName listobjectsrequestVar VariableName objectlistingVar Operator = MethodName filterListObjects VariableName objectlistingVar VariableName objectlistingVar Operator = MethodName restoreListObjects VariableName listobjectsrequestVar VariableName objectlistingVar ReturnStatement return VariableName objectlistingVar
ReturnStatement return VariableName codeVar Operator == VariableName Code VariableName OK
ReturnStatement return VariableName codeVar Operator == VariableName Code VariableName NODEEXISTS
ReturnStatement return VariableName codeVar Operator == VariableName Code VariableName NONODE
VariableName metricsregistryVar MethodName snapshot VariableName metricsrecordbuilderVar VariableName booleanVar
SimpleType RpcAcceptedReply VariableName rpcacceptedreplyVar Name RpcAcceptedReply MethodName getAcceptInstance VariableName intVar VariableName verifierVar VariableName rpcacceptedreplyVar MethodName write VariableName xdrVar VariableName xdrVar MethodName writeInt ThisExpression this MethodName getStatus ReturnStatement return VariableName xdrVar
ReturnStatement return ThisExpression this VariableName stringVar
ReturnStatement return ThisExpression this VariableName stringVar
ReturnStatement return MethodName countNodes VariableName blockinfoVar MethodName liveReplicas Operator >= MethodName getMinStorageNum VariableName blockinfoVar
ReturnStatement return VariableName intVar Operator >= MethodName getMinStorageNum VariableName blockinfoVar
SimpleType StringBuilder VariableName stringbuilderVar New new SimpleType StringBuilder EnhancedForStatement for SimpleType StorageType VariableName storagetypeVar Name StorageType MethodName getTypesSupportingQuota VariableName stringbuilderVar MethodName append StringLiteral stringLiteral Operator + VariableName t VariableName quotacountsVar MethodName getTypeSpace VariableName t Operator < NumberLiteral numberLiteral StringLiteral stringLiteral VariableName quotacountsVar MethodName getTypeSpace VariableName t Operator + StringLiteral stringLiteral VariableName quotacountsVar MethodName getTypeSpace VariableName t ReturnStatement return VariableName stringbuilderVar MethodName toString
MethodName setLayoutVersion VariableName propertiesVar VariableName storagedirectoryVar MethodName setNamespaceID VariableName propertiesVar VariableName storagedirectoryVar MethodName setcTime VariableName propertiesVar VariableName storagedirectoryVar SimpleType String VariableName stringVar VariableName propertiesVar MethodName getProperty StringLiteral stringLiteral MethodName setBlockPoolID VariableName storagedirectoryVar MethodName getRoot VariableName stringVar
IfStatement if VariableName booleanVar Operator || VariableName exportedblockkeysVar Operator == NullLiteral null ReturnStatement return Name LOG MethodName info StringLiteral stringLiteral MethodName removeExpiredKeys ThisExpression this VariableName blockkeyVar Operator = VariableName exportedblockkeysVar MethodName getCurrentKey ArrayType BlockKey[] VariableName blockkey[]Var VariableName exportedblockkeysVar MethodName getAllKeys ForStatement for PrimitiveType int VariableName intVar NumberLiteral numberLiteral VariableName i Operator < VariableName blockkey[]Var VariableName length VariableName i Operator ++ IfStatement if VariableName blockkey[]Var VariableName i Operator == NullLiteral null ContinueStatement continue ThisExpression this VariableName mapVar MethodName put VariableName blockkey[]Var VariableName i MethodName getKeyId VariableName blockkey[]Var VariableName i
TryStatement try ReturnStatement return New new SimpleType BatchedCachePoolEntries VariableName clientnamenodeprotocolpbVar MethodName listCachePools NullLiteral null Name ListCachePoolsRequestProto MethodName newBuilder MethodName setPrevPoolName VariableName stringVar MethodName build CatchClause catch SimpleType ServiceException VariableName serviceexceptionVar ThrowStatement throw Name ProtobufHelper MethodName getRemoteException VariableName e
IfStatement if VariableName mapVar Operator == NullLiteral null ReturnStatement return MethodName initServiceData ThisExpression this VariableName mapVar MethodName putAll VariableName mapVar
SimpleType NodeLabelProtoOrBuilder VariableName nodelabelprotoorbuilderVar VariableName booleanVar VariableName nodelabelprotoVar VariableName builderVar ReturnStatement return VariableName nodelabelprotoorbuilderVar MethodName getIsExclusive
VariableName listVar MethodName add Name Item MethodName of VariableName stringVar VariableName objectVar BooleanLiteral false ReturnStatement return ThisExpression this
IfStatement if VariableName stringVar Operator == NullLiteral null VariableName listVar MethodName add Name Item MethodName of VariableName stringVar VariableName objectVar BooleanLiteral false VariableName listVar MethodName add Name Item MethodName of VariableName stringVar VariableName stringVar VariableName objectVar ReturnStatement return ThisExpression this
ThisExpression this VariableName resourceVar Operator = VariableName resourceVar ThisExpression this VariableName resourceVar Operator = Name Resources MethodName subtract VariableName resourceVar ThisExpression this VariableName resourceVar
VariableName loggerVar MethodName info StringLiteral stringLiteral Operator + VariableName stringVar SimpleType Number VariableName numberVar SimpleType Number VariableName mapVar MethodName get StringLiteral stringLiteral VariableName listVar MethodName add VariableName numberVar MethodName toString
Modifier final SimpleType VersionRangeResult VariableName versionrangeresultVar Name VersionResolver MethodName versions VariableName stringVar VariableName stringVar IfStatement if VariableName versionrangeresultVar Operator == NullLiteral null ReturnStatement return VariableName stringVar Modifier final ParameterizedType List VariableName listVar VariableName versionrangeresultVar MethodName getVersions Name Collections MethodName sort VariableName listVar SimpleType Version VariableName versionVar NullLiteral null EnhancedForStatement for SimpleType Version VariableName versionVar VariableName listVar IfStatement if VariableName current MethodName toString MethodName startsWith VariableName stringVar VariableName versionVar Operator = VariableName current IfStatement if VariableName versionVar Operator != NullLiteral null ReturnStatement return VariableName versionVar MethodName toString ReturnStatement return VariableName stringVar
ReturnStatement return VariableName stringVar Operator == NullLiteral null Operator || VariableName stringVar MethodName isEmpty Operator || StringLiteral stringLiteral MethodName equalsIgnoreCase VariableName stringVar Operator || StringLiteral stringLiteral MethodName equalsIgnoreCase VariableName stringVar
ReturnStatement return VariableName booleanVar Operator != NullLiteral null Operator && VariableName booleanVar
ReturnStatement return MethodName getDelegate MethodName getDataSource
IfStatement if VariableName objectVar Operator != NullLiteral null Operator && Operator ! VariableName objectVar Instanceof instanceof SimpleType WebBeansContext ThrowStatement throw New new SimpleType IllegalArgumentException StringLiteral stringLiteral Operator + VariableName objectVar MethodName getClass MethodName getName VariableName threadlocalVar MethodName set SimpleType WebBeansContext VariableName objectVar
Name JsonExecutor MethodName execute VariableName httpservletrequestVar VariableName httpservletresponseVar New new SimpleType Executor PrimitiveType void MethodName call ParameterizedType Map VariableName mapVar Modifier final SimpleType CommandExecutor VariableName commandexecutorVar New new SimpleType CommandExecutor Modifier final ParameterizedType Map VariableName mapVar VariableName commandexecutorVar MethodName execute VariableName httpservletrequestVar MethodName getParameter StringLiteral stringLiteral VariableName mapVar MethodName putAll VariableName mapVar
TryStatement try IfStatement if VariableName booleanVar ReturnStatement return Name ObjectUtils MethodName toCompressedBytes VariableName nodeVar ReturnStatement return Name ObjectUtils MethodName toBytes VariableName nodeVar CatchClause catch SimpleType IOException VariableName ioexceptionVar ThrowStatement throw New new SimpleType HiveException StringLiteral stringLiteral VariableName ioe CatchClause catch SimpleType Exception VariableName exceptionVar ThrowStatement throw New new SimpleType HiveException StringLiteral stringLiteral VariableName e
TryStatement try IfStatement if VariableName booleanVar ReturnStatement return Name ObjectUtils MethodName toCompressedBytes VariableName nodeVar ReturnStatement return Name ObjectUtils MethodName toBytes VariableName nodeVar CatchClause catch SimpleType IOException VariableName ioexceptionVar ThrowStatement throw New new SimpleType HiveException StringLiteral stringLiteral VariableName ioe CatchClause catch SimpleType Exception VariableName exceptionVar ThrowStatement throw New new SimpleType HiveException StringLiteral stringLiteral VariableName e
ReturnStatement return BooleanLiteral true
ReturnStatement return Name NIOUtils MethodName read VariableName filechannelVar VariableName bytebufferVar VariableName longVar
ReturnStatement return Name NIOUtils MethodName writeFully VariableName filechannelVar VariableName bytebufferVar VariableName longVar
ReturnStatement return BooleanLiteral false
ReturnStatement return BooleanLiteral true
ReturnStatement return BooleanLiteral true
ReturnStatement return BooleanLiteral true
ReturnStatement return BooleanLiteral true
ReturnStatement return BooleanLiteral true
ReturnStatement return BooleanLiteral true
IfStatement if VariableName booleanVar Name AnsiConsole MethodName systemUninstall
ReturnStatement return VariableName booleanVar New new SimpleType AnsiMessageBuilder NumberLiteral numberLiteral New new SimpleType PlainMessageBuilder NumberLiteral numberLiteral
Name Assert MethodName notNull VariableName stringVar StringLiteral stringLiteral ParameterizedType Map VariableName mapVar New new ParameterizedType LinkedHashMap ThisExpression this VariableName mapVar VariableName mapVar MethodName put Name ColumnName MethodName from VariableName stringVar VariableName selectorVar ReturnStatement return New new SimpleType Columns VariableName mapVar
Name Assert MethodName notNull VariableName cqlidentifierVar StringLiteral stringLiteral ParameterizedType Map VariableName mapVar New new ParameterizedType LinkedHashMap ThisExpression this VariableName mapVar VariableName mapVar MethodName put Name ColumnName MethodName from VariableName cqlidentifierVar VariableName selectorVar ReturnStatement return New new SimpleType Columns VariableName mapVar
Name Assert MethodName state Operator ! VariableName atomicbooleanVar MethodName get StringLiteral stringLiteral
SimpleType BeanDefinitionHolder VariableName beandefinitionholderVar New new SimpleType BeanDefinitionHolder Name BeanDefinitionBuilder MethodName genericBeanDefinition TypeLiteral class MethodName getBeanDefinition VariableName DefaultBeanNames VariableName CONTEXT VariableName beandefinitionregistryVar MethodName registerBeanDefinition VariableName beandefinitionholderVar MethodName getBeanName VariableName beandefinitionholderVar MethodName getBeanDefinition ReturnStatement return VariableName beandefinitionholderVar
ReturnStatement return VariableName osgiVar MethodName applyTo VariableName osgiVar MethodName applyTo MethodName just VariableName function2Var MethodName curried
ParameterizedType ServicePair VariableName servicepairVar MethodName getURLObjectFactory VariableName bundlecontextVar VariableName stringVar VariableName hashtableVar IfStatement if VariableName servicepairVar Operator != NullLiteral null SimpleType ObjectFactory VariableName objectfactoryVar VariableName servicepairVar MethodName get IfStatement if VariableName factory Operator != NullLiteral null ReturnStatement return New new SimpleType URLContextProvider VariableName bundlecontextVar VariableName servicepairVar MethodName getReference VariableName factory VariableName hashtableVar ReturnStatement return NullLiteral null
ArrayType ServiceReference[] VariableName servicereference[]Var VariableName bundleVar MethodName getRegisteredServices SimpleType ServiceReference VariableName servicereferenceVar NullLiteral null IfStatement if VariableName servicereference[]Var Operator != NullLiteral null LabeledStatement LabeledStatementEnhancedForStatement for SimpleType ServiceReference VariableName servicereferenceVar VariableName servicereference[]Var ArrayType String[] VariableName string[]Var ArrayType String[] VariableName r MethodName getProperty VariableName Constants VariableName OBJECTCLASS EnhancedForStatement for SimpleType String VariableName stringVar VariableName objectClasses IfStatement if VariableName objectClass MethodName equals TypeLiteral class MethodName getName VariableName servicereferenceVar Operator = VariableName r BreakStatement break ReturnStatement return VariableName servicereferenceVar
ReturnStatement return VariableName _scope
ReturnStatement return Operator ! VariableName _containerState MethodName referenceCallbacks MethodName values MethodName stream MethodName flatMap VariableName valueMap VariableName valueMap MethodName values MethodName stream MethodName filter VariableName c Operator ! VariableName c MethodName resolved MethodName findFirst MethodName isPresent
ReturnStatement return MethodName createDeploymentMetadata Name ManifestProcessor MethodName parseManifest VariableName inputstreamVar
Name Assert MethodName notNull VariableName solrdataqueryVar StringLiteral stringLiteral Name Assert MethodName notNull VariableName solrdataqueryVar MethodName getCriteria StringLiteral stringLiteral SimpleType SolrQuery VariableName solrqueryVar New new SimpleType SolrQuery VariableName solrqueryVar MethodName setParam VariableName CommonParams VariableName Q MethodName getQueryString VariableName solrdataqueryVar IfStatement if VariableName solrdataqueryVar Instanceof instanceof SimpleType Query MethodName processQueryOptions VariableName solrqueryVar SimpleType Query VariableName solrdataqueryVar IfStatement if VariableName solrdataqueryVar Instanceof instanceof SimpleType FacetQuery MethodName processFacetOptions VariableName solrqueryVar SimpleType FacetQuery VariableName solrdataqueryVar IfStatement if VariableName solrdataqueryVar Instanceof instanceof SimpleType HighlightQuery MethodName processHighlightOptions VariableName solrqueryVar SimpleType HighlightQuery VariableName solrdataqueryVar ReturnStatement return VariableName solrqueryVar
IfStatement if VariableName endpointVar Operator != NullLiteral null Operator && Operator ! VariableName endpointVar MethodName isPublished VariableName logVar MethodName fatal StringLiteral stringLiteral Operator + VariableName stringVar MethodName unregisterAllCallbacks VariableName endpointVar MethodName stop VariableName endpointVar Operator = NullLiteral null VariableName stringVar Operator = NullLiteral null
VariableName mapVar Operator = MethodName readNodeConfig VariableName configurationVar VariableName propertiesVar VariableName mapVar Operator = MethodName readClerkConfig VariableName configurationVar VariableName mapVar VariableName setVar Operator = MethodName readXServiceBindingRegConfig VariableName configurationVar VariableName mapVar VariableName setVar Operator = MethodName readXBusinessRegConfig VariableName configurationVar VariableName mapVar
ReturnStatement return ThisExpression this VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return MethodName getPropertyValue VariableName stringVar NullLiteral null
ReturnStatement return VariableName stringVar
ReturnStatement return VariableName edmactionimportVar Operator == NullLiteral null VariableName edmactionVar Operator == NullLiteral null StringLiteral stringLiteral VariableName edmactionVar MethodName getName VariableName edmactionimportVar MethodName getName
ReturnStatement return VariableName edmpropertyVar MethodName getName
ReturnStatement return StringLiteral stringLiteral
IfStatement if VariableName jsonnodeVar MethodName isNull ThrowStatement throw New new SimpleType DeserializerException StringLiteral stringLiteral Operator + VariableName stringVar StringLiteral stringLiteral VariableName DeserializerException VariableName MessageKeys VariableName INVALID_NULL_ANNOTATION VariableName stringVar
ReturnStatement return Name LANGUAGES MethodName get VariableName nametypeVar
IfStatement if VariableName sequencetypeVar Operator != NullLiteral null Operator && VariableName sequencetypeVar MethodName getItemType MethodName isAtomicType ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
IfStatement if VariableName sequencetypeVar Operator != NullLiteral null Operator && VariableName sequencetypeVar Operator != NullLiteral null Operator && VariableName sequencetypeVar MethodName equals VariableName sequencetypeVar ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
ReturnStatement return VariableName mapVar MethodName remove MethodName prefixedKey VariableName stringVar
ReturnStatement return VariableName booleanVar
Modifier final SimpleType ActivityInfo VariableName activityinfoVar New new SimpleType ActivityInfo MethodName genMonotonic VariableName listVar MethodName get NumberLiteral numberLiteral MethodName newChannel TypeLiteral class MethodName newChannel TypeLiteral class MethodName instance MethodName createChild VariableName activityinfoVar VariableName _scopeFrame VariableName _linkFrame MethodName instance New new SimpleType ACTIVE VariableName activityinfoVar
MethodName getBpelRuntimeContext MethodName terminate VariableName _self.parent MethodName completed NullLiteral null Name CompensationHandler MethodName emptySet
VariableName schedulerVar MethodName registerSynchronizer New new SimpleType Synchronizer PrimitiveType void MethodName afterCompletion PrimitiveType boolean VariableName booleanVar PrimitiveType void MethodName beforeCompletion VariableName runnableVar MethodName run
ThrowStatement throw New new SimpleType UnsupportedOperationException StringLiteral stringLiteral
ReturnStatement return SuperMethodInvocation super MethodName formatCompilationMessage StringLiteral stringLiteral VariableName stringVar VariableName stringVar
ReturnStatement return VariableName stringVar MethodName length Operator > VariableName intVar Operator + NumberLiteral numberLiteral VariableName stringVar MethodName charAt VariableName intVar Operator + NumberLiteral numberLiteral CharacterLiteral charLiteral
VariableName booleanVar Operator = BooleanLiteral false VariableName booleanVar Operator = BooleanLiteral false VariableName booleanVar Operator = BooleanLiteral false VariableName booleanVar Operator = BooleanLiteral false VariableName stringVar Operator = NullLiteral null VariableName booleanVar Operator = BooleanLiteral false VariableName printwriterVar Operator = NullLiteral null VariableName stringVar Operator = NullLiteral null VariableName booleanVar Operator = BooleanLiteral false
ReturnStatement return VariableName fileVar
IfStatement if MethodName isSyncCheckpoint ReturnStatement return MethodName copyToHDFS VariableName intVar VariableName longVar
ThisExpression this VariableName eventsubtypeVar Operator = VariableName eventsubtypeVar
ReturnStatement return VariableName booleanVar
ReturnStatement return BooleanLiteral false
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
SimpleType NioSender VariableName niosenderVar SimpleType NioSender VariableName hashmapVar MethodName remove VariableName memberVar IfStatement if VariableName niosenderVar Operator != NullLiteral null VariableName niosenderVar MethodName disconnect
SimpleType NioReplicationTask VariableName nioreplicationtaskVar New new SimpleType NioReplicationTask ThisExpression this ThisExpression this VariableName nioreplicationtaskVar MethodName setUseBufferPool ThisExpression this MethodName getUseBufferPool VariableName nioreplicationtaskVar MethodName setRxBufSize MethodName getRxBufSize VariableName nioreplicationtaskVar MethodName setOptions MethodName getWorkerThreadOptions ReturnStatement return VariableName nioreplicationtaskVar
SimpleType BioSender VariableName biosenderVar SimpleType BioSender VariableName hashmapVar MethodName remove VariableName memberVar IfStatement if VariableName biosenderVar Operator != NullLiteral null VariableName biosenderVar MethodName disconnect
ReturnStatement return MethodName getReplicationThread
IfStatement if VariableName channelsenderVar Operator != NullLiteral null VariableName channelsenderVar MethodName heartbeat SuperMethodInvocation super MethodName heartbeat
ReturnStatement return VariableName intVar Operator ++
ReturnStatement return VariableName querypreparerVar MethodName createQuery VariableName object[]Var
ReturnStatement return New new SimpleType DelegatingStringTemplate VariableName stringtemplateVar MethodName getInstanceOf
SimpleType ResourceStringTemplateFactory VariableName resourcestringtemplatefactoryVar VariableName mapVar MethodName get VariableName resourceVar IfStatement if VariableName resourcestringtemplatefactoryVar Operator == NullLiteral null VariableName resourcestringtemplatefactoryVar Operator = New new SimpleType ResourceStringTemplateFactory VariableName resourceVar VariableName mapVar MethodName put VariableName resourceVar VariableName resourcestringtemplatefactoryVar ReturnStatement return VariableName resourcestringtemplatefactoryVar MethodName getStringTemplate
ReturnStatement return VariableName apprepositoryVar MethodName findAppSummaries VariableName accountVar MethodName getId
ReturnStatement return VariableName apprepositoryVar MethodName getNewAppForm
SimpleType LocalValidatorFactoryBean VariableName localvalidatorfactorybeanVar New new SimpleType LocalValidatorFactoryBean SimpleType ReloadableResourceBundleMessageSource VariableName reloadableresourcebundlemessagesourceVar New new SimpleType ReloadableResourceBundleMessageSource VariableName reloadableresourcebundlemessagesourceVar MethodName setBasename StringLiteral stringLiteral IfStatement if VariableName environmentVar MethodName acceptsProfiles StringLiteral stringLiteral VariableName reloadableresourcebundlemessagesourceVar MethodName setCacheSeconds NumberLiteral numberLiteral VariableName localvalidatorfactorybeanVar MethodName setValidationMessageSource VariableName reloadableresourcebundlemessagesourceVar ReturnStatement return VariableName localvalidatorfactorybeanVar
SimpleType Invite VariableName inviteVar MethodName queryForInvite VariableName stringVar IfStatement if VariableName inviteVar MethodName isAccepted ThrowStatement throw New new SimpleType InviteAlreadyAcceptedException VariableName stringVar ReturnStatement return VariableName inviteVar
ReturnStatement return VariableName longVar MethodName toString
ReturnStatement return MethodName getSession VariableName stringVar BooleanLiteral false
IfStatement if MethodName shouldArchiveFiles ReturnStatement return MethodName archiveFile VariableName pathVar IfStatement if Operator ! MethodName isUsingTrash ReturnStatement return BooleanLiteral false TryStatement try ReturnStatement return VariableName volumemanagerVar MethodName moveToTrash VariableName pathVar CatchClause catch SimpleType FileNotFoundException VariableName filenotfoundexceptionVar ReturnStatement return BooleanLiteral false
Modifier final SimpleType ZooCache VariableName zoocacheVar MethodName getZooCache VariableName instanceVar ParameterizedType List VariableName listVar VariableName zoocacheVar MethodName getChildren Name ZooUtil MethodName getRoot VariableName instanceVar Operator + VariableName Constants VariableName ZNAMESPACES EnhancedForStatement for SimpleType String VariableName stringVar VariableName listVar ArrayType byte[] VariableName byte[]Var VariableName zoocacheVar MethodName get Name ZooUtil MethodName getRoot VariableName instanceVar Operator + VariableName Constants VariableName ZNAMESPACES StringLiteral stringLiteral VariableName id VariableName Constants VariableName ZNAMESPACE_NAME IfStatement if VariableName path Operator != NullLiteral null VariableName biconsumerVar MethodName accept VariableName id New new SimpleType String VariableName path VariableName UTF_8
VariableName socketVar MethodName close
VariableName socketVar MethodName close
VariableName httpurlconnectionVar MethodName disconnect
IfStatement if Operator ! VariableName booleanVar MethodName getHttpServletResponse MethodName setStatus VariableName HttpTransportConstants VariableName STATUS_ACCEPTED
Name JmsUtils MethodName closeSession VariableName sessionVar Name ConnectionFactoryUtils MethodName releaseConnection VariableName connectionVar VariableName connectionfactoryVar BooleanLiteral true
Name MailTransportUtils MethodName closeFolder VariableName folderVar VariableName booleanVar Name MailTransportUtils MethodName closeService VariableName storeVar
ReturnStatement return New new SimpleType SimpleDateFormat StringLiteral stringLiteral MethodName format New new SimpleType Date
SimpleType String VariableName stringVar ThisExpression this VariableName cxfpropertiesVar MethodName getPath SimpleType String VariableName stringVar VariableName stringVar MethodName endsWith StringLiteral stringLiteral VariableName stringVar Operator + StringLiteral stringLiteral VariableName stringVar Operator + StringLiteral stringLiteral SimpleType ServletRegistrationBean VariableName servletregistrationbeanVar New new SimpleType ServletRegistrationBean New new SimpleType CXFServlet VariableName stringVar SimpleType Servlet VariableName servletVar ThisExpression this VariableName cxfpropertiesVar MethodName getServlet VariableName servletregistrationbeanVar MethodName setLoadOnStartup VariableName servletVar MethodName getLoadOnStartup EnhancedForStatement for ParameterizedType Entry VariableName entryVar VariableName servletVar MethodName getInit MethodName entrySet VariableName servletregistrationbeanVar MethodName addInitParameter VariableName entry MethodName getKey VariableName entry MethodName getValue ReturnStatement return VariableName servletregistrationbeanVar
ReturnStatement return Name ModelEncryptionSupport MethodName decryptClient VariableName concurrenthashmapVar MethodName get VariableName stringVar VariableName secretkeyVar
ReturnStatement return VariableName cacheVar MethodName get VariableName stringVar
ReturnStatement return MethodName getCacheValue VariableName ehcacheVar VariableName stringVar TypeLiteral class
ReturnStatement return MethodName execute New new ParameterizedType EntityManagerOperation SimpleType Client MethodName execute SimpleType EntityManager VariableName entitymanagerVar ReturnStatement return VariableName entitymanagerVar MethodName find TypeLiteral class VariableName stringVar
MethodName setEncodedSignature Name Base64UrlUtility MethodName encode VariableName stringVar ReturnStatement return MethodName getSignedEncodedJws
MethodName setEncodedSignature Name Base64UrlUtility MethodName encode VariableName byte[]Var ReturnStatement return MethodName getSignedEncodedJws
IfStatement if VariableName listVar Operator == NullLiteral null VariableName listVar Operator = New new ParameterizedType LinkedList VariableName listVar MethodName add VariableName qnameVar
SimpleType MessageContext VariableName messagecontextVar MethodName getContext IfStatement if VariableName messagecontextVar Operator != NullLiteral null SimpleType String VariableName stringVar SimpleType String VariableName messagecontextVar MethodName get StringLiteral stringLiteral SimpleType UriBuilder VariableName uribuilderVar NullLiteral null IfStatement if VariableName httpBasePath Operator != NullLiteral null VariableName builder Operator = Name UriBuilder MethodName fromPath VariableName httpBasePath VariableName builder Operator = VariableName messagecontextVar MethodName getUriInfo MethodName getBaseUriBuilder ReturnStatement return VariableName builder MethodName path VariableName stringVar MethodName path VariableName stringVar MethodName build MethodName toString ReturnStatement return VariableName stringVar
ReturnStatement return StringLiteral stringLiteral Operator + VariableName constraintviolationVar MethodName getInvalidValue Operator != NullLiteral null StringLiteral stringLiteral Operator + VariableName constraintviolationVar MethodName getInvalidValue MethodName toString StringLiteral stringLiteral StringLiteral stringLiteral StringLiteral stringLiteral VariableName constraintviolationVar MethodName getRootBeanClass MethodName getSimpleName StringLiteral stringLiteral VariableName constraintviolationVar MethodName getPropertyPath StringLiteral stringLiteral VariableName constraintviolationVar MethodName getMessage
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Double MethodName parseDouble VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Double MethodName parseDouble VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Double MethodName parseDouble VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Double MethodName parseDouble VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Double MethodName parseDouble VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Double MethodName parseDouble VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Double MethodName parseDouble VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Double MethodName parseDouble VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Double MethodName parseDouble VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Double MethodName parseDouble VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Double MethodName parseDouble VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Double MethodName parseDouble VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Double MethodName parseDouble VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Double MethodName parseDouble VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Double MethodName parseDouble VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Double MethodName parseDouble VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Double MethodName parseDouble VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Boolean MethodName parseBoolean VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType String VariableName stringVar SuperMethodInvocation super MethodName getValue TryStatement try ReturnStatement return Name Integer MethodName parseInt VariableName stringVar CatchClause catch SimpleType NumberFormatException VariableName numberformatexceptionVar ThrowStatement throw VariableName e
SimpleType StreamHelper VariableName streamhelperVar New new SimpleType StreamHelper VariableName inputstreamVar VariableName outputstreamVar VariableName streamhelperVar MethodName stream
SynchronizedStatement synchronized ThisExpression this IfStatement if VariableName anyutilsVar Operator == NullLiteral null VariableName anyutilsVar Operator = MethodName init ReturnStatement return VariableName anyutilsVar
SimpleType StringBuilder VariableName stringbuilderVar New new SimpleType StringBuilder EnhancedForStatement for SimpleType ProvisioningReport VariableName provisioningreportVar VariableName collectionVar VariableName stringbuilderVar MethodName append VariableName result MethodName getReportString VariableName tracelevelVar MethodName append CharacterLiteral charLiteral ReturnStatement return VariableName stringbuilderVar MethodName toString
SimpleType Name VariableName nameVar IfStatement if Name StringUtils MethodName isBlank VariableName stringVar Name LOG MethodName debug StringLiteral stringLiteral VariableName stringVar VariableName nameVar Operator = New new SimpleType Name VariableName stringVar Name LOG MethodName debug StringLiteral stringLiteral VariableName stringVar VariableName nameVar Operator = New new SimpleType Name VariableName stringVar Name LOG MethodName debug StringLiteral stringLiteral ReturnStatement return VariableName nameVar
EnhancedForStatement for ParameterizedType Any VariableName anyVar VariableName listVar TryStatement try VariableName syncopepushresulthandlerVar MethodName handle VariableName any MethodName getKey CatchClause catch SimpleType Exception VariableName exceptionVar Name LOG MethodName warn StringLiteral stringLiteral VariableName any VariableName externalresourceVar VariableName e ThrowStatement throw New new SimpleType JobExecutionException StringLiteral stringLiteral Operator + VariableName any StringLiteral stringLiteral VariableName externalresourceVar VariableName e
SwitchStatement switch VariableName unmatchingruleVar SwitchCase case VariableName ASSIGN SwitchCase case VariableName PROVISION ReturnStatement return VariableName ResourceOperation VariableName CREATE SwitchCase default ReturnStatement return VariableName ResourceOperation VariableName NONE
SwitchStatement switch VariableName matchingruleVar SwitchCase case VariableName UPDATE ReturnStatement return VariableName ResourceOperation VariableName UPDATE SwitchCase case VariableName DEPROVISION SwitchCase case VariableName UNASSIGN ReturnStatement return VariableName ResourceOperation VariableName DELETE SwitchCase default ReturnStatement return VariableName ResourceOperation VariableName NONE
TryStatement try IfStatement if VariableName schedulerfactorybeanVar MethodName getScheduler MethodName checkExists VariableName jobkeyVar SwitchStatement switch VariableName jobactionVar SwitchCase case VariableName START VariableName schedulerfactorybeanVar MethodName getScheduler MethodName triggerJob VariableName jobkeyVar BreakStatement break SwitchCase case VariableName STOP VariableName schedulerfactorybeanVar MethodName getScheduler MethodName interrupt VariableName jobkeyVar BreakStatement break SwitchCase default Name LOG MethodName warn StringLiteral stringLiteral VariableName jobkeyVar CatchClause catch SimpleType SchedulerException VariableName schedulerexceptionVar Name LOG MethodName debug StringLiteral stringLiteral VariableName jobactionVar MethodName toString VariableName jobkeyVar VariableName e
ReturnStatement return Name ImmutablePair MethodName of Name POJOHelper MethodName serialize Name AuthContextUtils MethodName getAuthorizations VariableName userdatabinderVar MethodName returnUserTO VariableName userdatabinderVar MethodName getAuthenticatedUserTO
ReturnStatement return VariableName booleanVar
Name Messages MethodName printIdNotNumberDeletedMessage VariableName stringVar VariableName stringVar
ReturnStatement return MethodName getService TypeLiteral class MethodName list
ReturnStatement return MethodName getService TypeLiteral class MethodName list
ReturnStatement return MethodName getService TypeLiteral class MethodName list
ReturnStatement return Name Executors MethodName newSingleThreadExecutor New new SimpleType ServiceThreadFactory VariableName stringVar VariableName booleanVar
Name Preconditions MethodName checkArgument VariableName stringVar Operator != NullLiteral null StringLiteral stringLiteral Name Preconditions MethodName checkArgument VariableName stringVar Operator != NullLiteral null StringLiteral stringLiteral VariableName processbuilderVar MethodName environment MethodName put VariableName stringVar VariableName stringVar
SimpleType String VariableName stringVar Name RegistryUtils MethodName componentPath VariableName stringVar VariableName stringVar VariableName stringVar VariableName stringVar VariableName registryoperationsVar MethodName delete VariableName stringVar BooleanLiteral false
ReturnStatement return MethodName splitClasspath Name System MethodName getProperty StringLiteral stringLiteral
SimpleType ConfPersister VariableName confpersisterVar New new SimpleType ConfPersister VariableName corefilesystemVar VariableName pathVar VariableName confpersisterVar MethodName save VariableName aggregateconfVar NullLiteral null
ReturnStatement return VariableName booleanVar VariableName stringVar Operator + StringLiteral stringLiteral StringLiteral stringLiteral
IfStatement if MethodName is VariableName stringVar ReturnStatement return VariableName stringVar Operator + StringLiteral stringLiteral VariableName stringVar StringLiteral stringLiteral ReturnStatement return StringLiteral stringLiteral
VariableName twillrunnableVar MethodName run
SimpleType String VariableName stringVar MethodName getExtension VariableName stringVar IfStatement if Operator ! VariableName stringVar MethodName isEmpty ReturnStatement return VariableName stringVar Operator + CharacterLiteral charLiteral VariableName stringVar ReturnStatement return VariableName stringVar
ReturnStatement return VariableName reader MethodName getElementText
SuperMethodInvocation super MethodName bindCurrentConfiguration VariableName contextVar MethodName getConfiguration
ReturnStatement return ThisExpression this MethodName equals VariableName dictionaryVar
EnhancedForStatement for SimpleType LongWritable VariableName longwritableVar VariableName iterableVar VariableName longVar Operator += VariableName v MethodName get IfStatement if VariableName longVar Operator >= VariableName longVar VariableName listVar MethodName add New new SimpleType Text VariableName textVar VariableName longVar Operator = NumberLiteral numberLiteral
SuperMethodInvocation super MethodName bindCurrentConfiguration VariableName contextVar MethodName getConfiguration
VariableName textVar Operator = VariableName textVar PrimitiveType int VariableName intVar VariableName textVar MethodName getLength Operator + VariableName textVar MethodName getLength VariableName longVar Operator += VariableName intVar IfStatement if VariableName longVar Operator >= VariableName longVar VariableName longwritableVar MethodName set VariableName longVar VariableName contextVar MethodName write VariableName textVar VariableName longwritableVar VariableName longVar Operator = NumberLiteral numberLiteral
EnhancedForStatement for SimpleType String VariableName stringVar VariableName stringVar Name Preconditions MethodName checkState Operator ! Name StringUtils MethodName isEmpty VariableName arg
ParameterizedType Map VariableName mapVar New new ParameterizedType HashMap VariableName extfilterserviceVar MethodName removeExtFilterFromProject VariableName stringVar VariableName stringVar VariableName extfilterserviceVar MethodName removeExternalFilter VariableName stringVar VariableName mapVar MethodName put StringLiteral stringLiteral StringLiteral stringLiteral ReturnStatement return VariableName mapVar
SuperMethodInvocation super MethodName bindCurrentConfiguration VariableName contextVar MethodName getConfiguration
SuperMethodInvocation super MethodName bindCurrentConfiguration VariableName contextVar MethodName getConfiguration
PrimitiveType long VariableName longVar NumberLiteral numberLiteral EnhancedForStatement for SimpleType LongWritable VariableName longwritableVar VariableName iterableVar VariableName longVar Operator += VariableName v MethodName get VariableName longwritableVar MethodName set VariableName longVar VariableName contextVar MethodName write VariableName textVar VariableName longwritableVar
ReturnStatement return VariableName ResourceStore VariableName KAFKA_RESOURCE_ROOT Operator + StringLiteral stringLiteral VariableName stringVar VariableName MetadataConstants VariableName FILE_SURFIX
SimpleType Properties VariableName propertiesVar New new SimpleType Properties VariableName propertiesVar MethodName putAll ThisExpression this VariableName propertiesVar ReturnStatement return VariableName propertiesVar
SimpleType Configuration VariableName configurationVar VariableName contextVar MethodName getConfiguration MethodName bindCurrentConfiguration VariableName configurationVar
SimpleType FileOutputStream VariableName fileoutputstreamVar NullLiteral null TryStatement try VariableName fileoutputstreamVar Operator = New new SimpleType FileOutputStream VariableName fileVar MethodName getAllProperties MethodName store VariableName fileoutputstreamVar VariableName fileVar MethodName getAbsolutePath Name IOUtils MethodName closeQuietly VariableName fileoutputstreamVar
ReturnStatement return VariableName ResourceStore VariableName CUBE_DESC_RESOURCE_ROOT Operator + StringLiteral stringLiteral VariableName stringVar VariableName MetadataConstants VariableName FILE_SURFIX
ReturnStatement return MethodName toUrlString VariableName urlfilenameVar BooleanLiteral true
SimpleType IncludeTableFilter VariableName includetablefilterVar NullLiteral null EnhancedForStatement for SimpleType IncludeTableFilter VariableName includetablefilterVar VariableName sortedsetVar IfStatement if VariableName p VariableName pattern Operator == NullLiteral null Operator || VariableName p.pattern MethodName matcher VariableName stringVar MethodName matches VariableName includetablefilterVar Operator = VariableName p BreakStatement break IfStatement if VariableName includetablefilterVar Operator == NullLiteral null ReturnStatement return NullLiteral null EnhancedForStatement for SimpleType Pattern VariableName patternVar VariableName sortedsetVar IfStatement if VariableName p Operator != NullLiteral null IfStatement if VariableName p MethodName matcher VariableName stringVar MethodName matches ReturnStatement return NullLiteral null ReturnStatement return VariableName includetablefilterVar VariableName columnsFilter
ReturnStatement return VariableName injectorVar MethodName getInstance TypeLiteral class MethodName createContext
ReturnStatement return VariableName injectorVar MethodName getInstance TypeLiteral class MethodName createContext VariableName datachannelVar
IfStatement if VariableName expressionVar MethodName getType Operator == VariableName Expression VariableName OBJ_PATH ReturnStatement return New new ParameterizedType Iterable SimpleType Iterator MethodName iterator ReturnStatement return New new SimpleType PathComponentIterator ThisExpression this SimpleType String VariableName expressionVar MethodName getOperand NumberLiteral numberLiteral VariableName mapVar ThrowStatement throw New new SimpleType ExpressionException StringLiteral stringLiteral Operator + VariableName expressionVar MethodName expName StringLiteral stringLiteral
IfStatement if VariableName expressionVar MethodName getType Operator == VariableName Expression VariableName DB_PATH ReturnStatement return New new ParameterizedType Iterable SimpleType Iterator MethodName iterator ReturnStatement return New new SimpleType PathComponentIterator ThisExpression this SimpleType String VariableName expressionVar MethodName getOperand NumberLiteral numberLiteral VariableName mapVar ThrowStatement throw New new SimpleType ExpressionException StringLiteral stringLiteral Operator + VariableName expressionVar MethodName expName StringLiteral stringLiteral
EnhancedForStatement for SimpleType DbRelationship VariableName dbrelationshipVar ThisExpression this VariableName listVar IfStatement if VariableName thisRel MethodName isToMany ThisExpression this VariableName toMany Operator = BooleanLiteral true ReturnStatement return ThisExpression this VariableName toMany Operator = BooleanLiteral false
ThisExpression this VariableName datasourceVar Operator = New new SimpleType StoppedDataSource VariableName datasourceVar ThisExpression this VariableName poolingdatasourcemanagerVar MethodName shutdown
VariableName selectquerymetadataVar MethodName addPathSplitAliases VariableName stringVar VariableName stringVar
IfStatement if VariableName prefetchtreenodeVar Operator == NullLiteral null ReturnStatement return ThisExpression this IfStatement if VariableName prefetchtreenodeVar Operator == NullLiteral null VariableName prefetchtreenodeVar Operator = New new SimpleType PrefetchTreeNode VariableName prefetchtreenodeVar MethodName merge VariableName prefetchtreenodeVar ReturnStatement return ThisExpression this
IfStatement if VariableName stringVar Operator == NullLiteral null ReturnStatement return ThisExpression this IfStatement if VariableName prefetchtreenodeVar Operator == NullLiteral null VariableName prefetchtreenodeVar Operator = New new SimpleType PrefetchTreeNode VariableName prefetchtreenodeVar MethodName addPath VariableName stringVar MethodName setSemantics VariableName intVar ReturnStatement return ThisExpression this
ReturnStatement return VariableName ejbqlexpressionvisitorVar MethodName visitSelect ThisExpression this
ReturnStatement return VariableName ejbqlexpressionvisitorVar MethodName visitAbstractSchemaName ThisExpression this
ReturnStatement return BooleanLiteral true
MethodName bitwiseOr
IfStatement if VariableName loggerVar MethodName isDebugEnabled VariableName loggerVar MethodName debug StringLiteral stringLiteral MethodName getPageName VariableName pageoutcomeVar MethodName toString SimpleType FacesContext VariableName facescontextVar Name FacesContext MethodName getCurrentInstance SimpleType NavigationHandler VariableName navigationhandlerVar VariableName facescontextVar MethodName getApplication MethodName getNavigationHandler VariableName navigationhandlerVar MethodName handleNavigation VariableName facescontextVar VariableName stringVar VariableName pageoutcomeVar MethodName toString VariableName facescontextVar MethodName renderResponse
ReturnStatement return MethodName getJdbcTemplate MethodName execute New new SimpleType ReadRecordCallback
ParameterizedType List VariableName listVar ThisExpression this MethodName getHeaders MethodName getContentEncoding EnhancedForStatement for SimpleType ContentCodingType VariableName contentcodingtypeVar VariableName listVar IfStatement if VariableName contentCodingType MethodName equals VariableName ContentCodingType VariableName GZIP ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
ReturnStatement return VariableName repositoryconnectionVar MethodName hasStatement VariableName uriVar VariableName RDF VariableName TYPE VariableName uriVar BooleanLiteral true VariableName uriVar
ThisExpression this VariableName alertsserviceVar Operator = VariableName alertsserviceVar
ThisExpression this VariableName alertssourcesserviceVar Operator = VariableName alertssourcesserviceVar
SimpleType Binding VariableName bindingVar VariableName componentreferenceVar MethodName getBindings MethodName get NumberLiteral numberLiteral SimpleType URI VariableName uriVar Name URI MethodName create VariableName bindingVar MethodName getURI SimpleType String VariableName stringVar VariableName uriVar MethodName getPath ReturnStatement return StringLiteral stringLiteral Operator + VariableName stringVar StringLiteral stringLiteral
SimpleType Binding VariableName bindingVar VariableName componentreferenceVar MethodName getBindings MethodName get NumberLiteral numberLiteral SimpleType URI VariableName uriVar Name URI MethodName create VariableName bindingVar MethodName getURI SimpleType String VariableName stringVar VariableName uriVar MethodName getPath ReturnStatement return StringLiteral stringLiteral Operator + VariableName stringVar StringLiteral stringLiteral
IfStatement if VariableName booleanVar Name System.out MethodName print VariableName stringVar
SimpleType Group VariableName groupVar VariableName groupmanagerVar MethodName findGroupByName VariableName stringVar IfStatement if VariableName groupVar Operator == NullLiteral null ThrowStatement throw New new SimpleType IllegalArgumentException StringLiteral stringLiteral Operator + VariableName stringVar StringLiteral stringLiteral ParameterizedType List VariableName listVar New new ParameterizedType ArrayList ParameterizedType Set VariableName setVar VariableName clustermanagerVar MethodName getSet VariableName Constants VariableName URLS_DISTRIBUTED_SET_NAME Operator + VariableName Configurations VariableName SEPARATOR VariableName stringVar EnhancedForStatement for SimpleType String VariableName stringVar VariableName setVar VariableName listVar MethodName add VariableName url ReturnStatement return VariableName listVar
SimpleType Group VariableName groupVar VariableName groupmanagerVar MethodName findGroupByName VariableName stringVar IfStatement if VariableName groupVar Operator == NullLiteral null ThrowStatement throw New new SimpleType IllegalArgumentException StringLiteral stringLiteral Operator + VariableName stringVar StringLiteral stringLiteral ParameterizedType List VariableName listVar New new ParameterizedType ArrayList ParameterizedType Map VariableName mapVar VariableName clustermanagerVar MethodName getMap VariableName Constants VariableName CONFIGURATION_MAP Operator + VariableName Configurations VariableName SEPARATOR VariableName stringVar EnhancedForStatement for SimpleType String VariableName stringVar VariableName mapVar MethodName keySet VariableName listVar MethodName add VariableName pid ReturnStatement return VariableName listVar
ReturnStatement return VariableName booleanVar
IfStatement if VariableName authenticationmanagerVar Operator == NullLiteral null Operator && VariableName listVar MethodName isEmpty ThrowStatement throw New new SimpleType IllegalArgumentException StringLiteral stringLiteral Operator + StringLiteral stringLiteral
ReturnStatement return New new SimpleType BadCredentialsException VariableName messages MethodName getMessage StringLiteral stringLiteral StringLiteral stringLiteral
ReturnStatement return VariableName defaultmethodsecurityexpressionhandlerVar
ThisExpression this VariableName booleanVar Operator = BooleanLiteral true
ThisExpression this VariableName booleanVar Operator = BooleanLiteral true
ArrayType MessageMatcher VariableName messagematcherVar ArrayType MessageMatcher VariableName simpmessagetypeVar VariableName length ForStatement for PrimitiveType int VariableName intVar NumberLiteral numberLiteral VariableName i Operator < VariableName simpmessagetypeVar VariableName length VariableName i Operator ++ SimpleType SimpMessageType VariableName simpmessagetypeVar VariableName simpmessagetypeVar VariableName i VariableName messagematcherVar VariableName i Operator = New new SimpleType SimpMessageTypeMatcher VariableName typeToMatch ReturnStatement return MethodName matchers VariableName messagematcherVar
ParameterizedType List VariableName listVar New new ParameterizedType ArrayList VariableName stringVar VariableName length EnhancedForStatement for SimpleType String VariableName stringVar VariableName stringVar VariableName listVar MethodName add New new SimpleType PathMatcherMessageMatcherBuilder VariableName pattern VariableName simpmessagetypeVar ReturnStatement return New new SimpleType Constraint VariableName listVar
ReturnStatement return VariableName serverwebexchangeVar MethodName getPrincipal MethodName cast TypeLiteral class MethodName defaultIfEmpty ThisExpression this VariableName anonymousauthenticationtokenVar
ThisExpression this VariableName serverwebexchangematcherVar Operator = VariableName serverwebexchangematcherVar ReturnStatement return New new SimpleType Access
EnhancedForStatement for ParameterizedType Entry VariableName entryVar VariableName urlresponseinfoVar MethodName getAllHeadersAsList IfStatement if VariableName entry MethodName getKey MethodName equalsIgnoreCase StringLiteral stringLiteral ReturnStatement return Operator ! VariableName entry MethodName getValue MethodName equalsIgnoreCase StringLiteral stringLiteral ReturnStatement return BooleanLiteral false
ReturnStatement return VariableName intVar
ReturnStatement return Name Arrays MethodName equals ThisExpression this VariableName byte[]Var VariableName byte[]Var
VariableName subtitleinputbufferVar Operator = NullLiteral null VariableName intVar Operator = VariableName C VariableName INDEX_UNSET IfStatement if VariableName subtitleoutputbufferVar Operator != NullLiteral null VariableName subtitleoutputbufferVar MethodName release VariableName subtitleoutputbufferVar Operator = NullLiteral null IfStatement if VariableName subtitleoutputbufferVar Operator != NullLiteral null VariableName subtitleoutputbufferVar MethodName release VariableName subtitleoutputbufferVar Operator = NullLiteral null
IfStatement if Name QUIT_CMD MethodName equalsIgnoreCase VariableName stringVar Operator || Name EXIT_CMD MethodName equalsIgnoreCase VariableName stringVar ReturnStatement return BooleanLiteral true VariableName stringVar Operator = New new SimpleType StringBuilder VariableName stringVar MethodName reverse MethodName toString ReturnStatement return Name QUIT_CMD MethodName equalsIgnoreCase VariableName stringVar Operator || Name EXIT_CMD MethodName equalsIgnoreCase VariableName stringVar
ReturnStatement return VariableName stringVar Operator == NullLiteral null Operator || VariableName stringVar MethodName isEmpty Operator || StringLiteral stringLiteral MethodName equalsIgnoreCase VariableName stringVar Operator || StringLiteral stringLiteral MethodName equalsIgnoreCase VariableName stringVar
ReturnStatement return VariableName booleanVar Operator != NullLiteral null Operator && VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return MethodName getDelegate MethodName getDataSource
MethodName cleanTimerData MethodName shutdownMyScheduler
IfStatement if VariableName objectVar Operator != NullLiteral null Operator && Operator ! VariableName objectVar Instanceof instanceof SimpleType WebBeansContext ThrowStatement throw New new SimpleType IllegalArgumentException StringLiteral stringLiteral Operator + VariableName objectVar MethodName getClass MethodName getName VariableName threadlocalVar MethodName set SimpleType WebBeansContext VariableName objectVar
EnhancedForStatement for Modifier final SimpleType Runnable VariableName runnableVar VariableName threadlocalVar MethodName get TryStatement try VariableName r MethodName run CatchClause catch Modifier final SimpleType Exception VariableName exceptionVar VariableName loggerVar MethodName error VariableName e MethodName getMessage VariableName e VariableName threadlocalVar MethodName remove
VariableName securityconstraintVar MethodName setDisplayName VariableName stringVar ReturnStatement return ThisExpression this
ReturnStatement return ThisExpression this VariableName gpathresultVar
IfStatement if StringLiteral stringLiteral MethodName equals VariableName stringVar ReturnStatement return MethodName parent VariableName elementVar IfStatement if StringLiteral stringLiteral MethodName equals VariableName stringVar ReturnStatement return MethodName depthFirst VariableName elementVar IfStatement if VariableName stringVar MethodName startsWith StringLiteral stringLiteral ReturnStatement return VariableName elementVar MethodName getAttribute VariableName stringVar MethodName substring NumberLiteral numberLiteral ReturnStatement return MethodName getChildElements VariableName elementVar VariableName stringVar
SimpleType Attr VariableName attrVar SimpleType Attr VariableName namednodemapVar MethodName getNamedItem VariableName stringVar ReturnStatement return VariableName attrVar MethodName getValue
MethodName fireBinding
VariableName intVar Operator = VariableName tablelayoutVar MethodName nextRowIndex ForStatement for SimpleType Iterator VariableName iteratorVar VariableName listVar MethodName iterator VariableName iter MethodName hasNext SimpleType TableLayoutCell VariableName tablelayoutcellVar SimpleType TableLayoutCell VariableName iter MethodName next SimpleType GridBagConstraints VariableName gridbagconstraintsVar VariableName cell MethodName getConstraints VariableName c VariableName gridy Operator = VariableName intVar VariableName tablelayoutVar MethodName addCell VariableName cell
SimpleType AST VariableName astVar VariableName astVar MethodName getFirstChild ReturnStatement return VariableName astVar Operator != NullLiteral null VariableName astVar MethodName getText NullLiteral null
ReturnStatement return VariableName booleanVar Operator || VariableName statementmetaVar Operator == NullLiteral null Operator || Operator ! VariableName statementmetaVar VariableName optimize Operator || VariableName writercontrollerVar MethodName isFastPath
ThrowStatement throw New new SimpleType NullPointerException StringLiteral stringLiteral Operator + VariableName stringVar StringLiteral stringLiteral
ThrowStatement throw New new SimpleType NullPointerException StringLiteral stringLiteral Operator + VariableName stringVar StringLiteral stringLiteral
ReturnStatement return VariableName collectionVar MethodName contains VariableName objectVar
IfStatement if VariableName listVar MethodName isEmpty ThrowStatement throw New new SimpleType NoSuchElementException StringLiteral stringLiteral ReturnStatement return VariableName listVar MethodName remove VariableName listVar MethodName size Operator - NumberLiteral numberLiteral
ReturnStatement return New new SimpleType Double Operator - VariableName numberVar MethodName doubleValue
ReturnStatement return MethodName toBigDecimal VariableName numberVar MethodName negate
ReturnStatement return MethodName toBigInteger VariableName numberVar MethodName negate
SimpleType String VariableName stringVar VariableName stringVar MethodName trim SimpleType File VariableName fileVar New new SimpleType File VariableName stringVar ArrayType String[] VariableName string[]Var ArrayInitializer arrayInitializer PrimitiveType int VariableName intVar NumberLiteral numberLiteral WhileStatement while VariableName intVar Operator < VariableName string[]Var VariableName length Operator && Operator ! VariableName fileVar MethodName exists VariableName fileVar Operator = New new SimpleType File VariableName stringVar Operator + VariableName string[]Var VariableName intVar VariableName intVar Operator ++ IfStatement if Operator ! VariableName fileVar MethodName exists VariableName fileVar Operator = New new SimpleType File VariableName stringVar ReturnStatement return VariableName fileVar
IfStatement if ThisExpression this VariableName booleanVar Operator != NullLiteral null ReturnStatement return ThisExpression this VariableName booleanVar MethodName booleanValue ReturnStatement return BooleanLiteral false
IfStatement if VariableName booleanVar ThrowStatement throw New new SimpleType IllegalStateException StringLiteral stringLiteral ReturnStatement return New new SimpleType RenderURLImpl VariableName responseContext VariableName copyVar
ParameterizedType Set VariableName setVar New new ParameterizedType HashSet IfStatement if VariableName stringVar Operator != NullLiteral null ArrayType String[] VariableName string[]Var VariableName stringVar MethodName split StringLiteral stringLiteral EnhancedForStatement for SimpleType String VariableName stringVar VariableName rawValues VariableName setVar MethodName add VariableName rawValue MethodName trim ReturnStatement return VariableName setVar
ParameterizedType Map VariableName mapVar New new ParameterizedType HashMap VariableName concurrentmapVar SimpleType URL VariableName urlVar VariableName discoveryVar MethodName discover EnhancedForStatement for ParameterizedType Entry VariableName entryVar VariableName mapVar MethodName entrySet ParameterizedType ServiceReference VariableName servicereferenceVar VariableName entry MethodName getKey SimpleType RepositoryReplication VariableName repositoryreplicationVar VariableName entry MethodName getValue TryStatement try MethodName replicate VariableName urlVar VariableName ref VariableName repository CatchClause catch SimpleType Exception VariableName exceptionVar VariableName logserviceVar MethodName log VariableName LogService VariableName LOG_WARNING StringLiteral stringLiteral Operator + VariableName ref MethodName getProperty StringLiteral stringLiteral StringLiteral stringLiteral VariableName e
ThisExpression this VariableName stringVar Operator = VariableName stringVar ReturnStatement return ThisExpression this
ParameterizedType Map VariableName mapVar New new ParameterizedType HashMap IfStatement if VariableName listVar Operator != NullLiteral null EnhancedForStatement for SimpleType RepositoryProvider VariableName repositoryproviderVar VariableName listVar EnhancedForStatement for SimpleType RepositoryType VariableName repositorytypeVar VariableName provider MethodName provides VariableName mapVar MethodName put VariableName type VariableName provider ReturnStatement return VariableName mapVar
SimpleType BatchResult VariableName batchresultVar New new SimpleType BatchResult SynchronizedStatement synchronized VariableName objectVar MethodName updateDataBlockIterator IfStatement if VariableName dataBlockIterator Operator != NullLiteral null VariableName batchresultVar MethodName setRows VariableName dataBlockIterator MethodName next ReturnStatement return VariableName batchresultVar
IfStatement if Operator ! ThisExpression this VariableName isDimensionPresentInCurrentBlock NumberLiteral numberLiteral SimpleType CarbonDimension VariableName carbondimensionVar ThisExpression this VariableName dimColEvaluatorInfoList MethodName get NumberLiteral numberLiteral MethodName getDimension ArrayType byte[] VariableName byte[]Var VariableName dimension MethodName getDefaultValue IfStatement if NullLiteral null Operator != VariableName defaultValue ForStatement for PrimitiveType int VariableName intVar NumberLiteral numberLiteral VariableName k Operator < VariableName byte[][]Var VariableName length VariableName k Operator ++ PrimitiveType int VariableName intVar Name ByteUtil.UnsafeComparer.INSTANCE MethodName compareTo VariableName byte[][]Var VariableName k VariableName defaultValue IfStatement if VariableName maxCompare Operator < NumberLiteral numberLiteral VariableName booleanVar Operator = BooleanLiteral true BreakStatement break
IfStatement if Operator ! ThisExpression this VariableName isDimensionPresentInCurrentBlock NumberLiteral numberLiteral SimpleType CarbonDimension VariableName carbondimensionVar ThisExpression this VariableName dimColEvaluatorInfoList MethodName get NumberLiteral numberLiteral MethodName getDimension ArrayType byte[] VariableName byte[]Var VariableName dimension MethodName getDefaultValue IfStatement if NullLiteral null Operator != VariableName defaultValue ForStatement for PrimitiveType int VariableName intVar NumberLiteral numberLiteral VariableName k Operator < VariableName byte[][]Var VariableName length VariableName k Operator ++ PrimitiveType int VariableName intVar Name ByteUtil.UnsafeComparer.INSTANCE MethodName compareTo VariableName byte[][]Var VariableName k VariableName defaultValue IfStatement if VariableName maxCompare Operator > NumberLiteral numberLiteral VariableName booleanVar Operator = BooleanLiteral true BreakStatement break
IfStatement if Operator ! ThisExpression this VariableName isDimensionPresentInCurrentBlock NumberLiteral numberLiteral SimpleType CarbonDimension VariableName carbondimensionVar ThisExpression this VariableName dimColEvaluatorInfoList MethodName get NumberLiteral numberLiteral MethodName getDimension ArrayType byte[] VariableName byte[]Var VariableName dimension MethodName getDefaultValue IfStatement if NullLiteral null Operator != VariableName defaultValue ForStatement for PrimitiveType int VariableName intVar NumberLiteral numberLiteral VariableName k Operator < VariableName byte[][]Var VariableName length VariableName k Operator ++ PrimitiveType int VariableName intVar Name ByteUtil.UnsafeComparer.INSTANCE MethodName compareTo VariableName byte[][]Var VariableName k VariableName defaultValue IfStatement if VariableName maxCompare Operator <= NumberLiteral numberLiteral VariableName booleanVar Operator = BooleanLiteral true BreakStatement break
IfStatement if Operator ! ThisExpression this VariableName isDimensionPresentInCurrentBlock NumberLiteral numberLiteral SimpleType CarbonDimension VariableName carbondimensionVar ThisExpression this VariableName dimColEvaluatorInfoList MethodName get NumberLiteral numberLiteral MethodName getDimension ArrayType byte[] VariableName byte[]Var VariableName dimension MethodName getDefaultValue IfStatement if NullLiteral null Operator != VariableName defaultValue ForStatement for PrimitiveType int VariableName intVar NumberLiteral numberLiteral VariableName k Operator < VariableName byte[][]Var VariableName length VariableName k Operator ++ PrimitiveType int VariableName intVar Name ByteUtil.UnsafeComparer.INSTANCE MethodName compareTo VariableName byte[][]Var VariableName k VariableName defaultValue IfStatement if VariableName maxCompare Operator >= NumberLiteral numberLiteral VariableName booleanVar Operator = BooleanLiteral true BreakStatement break
IfStatement if VariableName byteVar Operator == NullLiteral null ReturnStatement return NumberLiteral numberLiteral PrimitiveType int VariableName intVar NumberLiteral numberLiteral ForStatement for PrimitiveType int VariableName intVar VariableName intVar VariableName i Operator < VariableName intVar Operator + VariableName intVar VariableName i Operator ++ VariableName intVar Operator = NumberLiteral numberLiteral Operator * VariableName intVar Operator + VariableName byteVar VariableName i ReturnStatement return VariableName intVar
IfStatement if VariableName pairVar MethodName getFirst Operator == NullLiteral null VariableName pairVar MethodName setFirst VariableName integerVar VariableName pairVar MethodName setSecond VariableName integerVar IfStatement if VariableName pairVar MethodName getFirst Operator > VariableName integerVar VariableName pairVar MethodName setFirst VariableName integerVar IfStatement if VariableName pairVar MethodName getSecond Operator < VariableName integerVar VariableName pairVar MethodName setSecond VariableName integerVar
ReturnStatement return BooleanLiteral true
ReturnStatement return VariableName booleanVar
Name TestPhoenixIndexRpcSchedulerFactory MethodName reset
ReturnStatement return New new SimpleType AutowireBeanFactoryObjectPostProcessor VariableName autowirecapablebeanfactoryVar
ParameterizedType List VariableName listVar MethodName execute VariableName stringVar IfStatement if VariableName listVar MethodName size Operator < NumberLiteral numberLiteral ThrowStatement throw New new SimpleType IncorrectResultSizeDataAccessException NumberLiteral numberLiteral ReturnStatement return VariableName listVar MethodName get NumberLiteral numberLiteral
ParameterizedType List VariableName listVar New new ParameterizedType ArrayList TryStatement try SimpleType FindJobInstancesByJobNameReq VariableName findjobinstancesbyjobnamereqVar Name JobRepositoryRpcFactory MethodName buildFindJobInstancesByJobNameReq VariableName stringVar VariableName intVar VariableName intVar SimpleType FindJobInstancesByJobNameRes VariableName findjobinstancesbyjobnameresVar SimpleType FindJobInstancesByJobNameRes MethodName getAppmasterScOperations MethodName doMindRequest VariableName findjobinstancesbyjobnamereqVar EnhancedForStatement for SimpleType JobInstanceType VariableName jobinstancetypeVar VariableName findjobinstancesbyjobnameresVar VariableName listVar VariableName listVar MethodName add Name JobRepositoryRpcFactory MethodName convertJobInstanceType VariableName j CatchClause catch SimpleType Exception VariableName exceptionVar ThrowStatement throw MethodName convertException VariableName e ReturnStatement return VariableName listVar
ThisExpression this VariableName stringVar Operator = Name StringUtils MethodName arrayToCommaDelimitedString VariableName stringVar ReturnStatement return ThisExpression this
VariableName intVar Operator ++
Name LOGGER MethodName info StringLiteral stringLiteral Modifier final ParameterizedType Collection VariableName collectionVar Name PatientViewUtil MethodName getDocumentViews VariableName jcasVar IfStatement if VariableName collectionVar MethodName isEmpty MethodName processDocument VariableName jcasVar Name LOGGER MethodName info StringLiteral stringLiteral ReturnStatement return TryStatement try SimpleType DotLogger VariableName dotloggerVar New new SimpleType DotLogger EnhancedForStatement for SimpleType JCas VariableName jcasVar VariableName collectionVar MethodName processDocument VariableName view CatchClause catch SimpleType IOException VariableName ioexceptionVar Name LOGGER MethodName error VariableName ioE MethodName getMessage Name LOGGER MethodName info StringLiteral stringLiteral
ReturnStatement return StringLiteral stringLiteral Operator + StringLiteral stringLiteral
IfStatement if VariableName log MethodName isTraceEnabled VariableName log MethodName trace StringLiteral stringLiteral Operator + VariableName serversessionVar StringLiteral stringLiteral VariableName filehandleVar MethodName getFile StringLiteral stringLiteral VariableName longVar StringLiteral stringLiteral VariableName intVar
IfStatement if VariableName booleanVar Operator == NullLiteral null SimpleType String VariableName stringVar Name System MethodName getProperty VariableName stringVar IfStatement if Name GenericUtils MethodName isEmpty VariableName propValue TryStatement try MethodName getKeyPairGenerator VariableName KeyUtils VariableName EC_ALGORITHM VariableName booleanVar Operator = VariableName Boolean VariableName TRUE CatchClause catch SimpleType Throwable VariableName throwableVar VariableName booleanVar Operator = VariableName Boolean VariableName FALSE SimpleType Logger VariableName loggerVar Name LoggerFactory MethodName getLogger TypeLiteral class VariableName logger MethodName info StringLiteral stringLiteral Operator + VariableName propValue VariableName booleanVar Operator = Name Boolean MethodName valueOf VariableName propValue ReturnStatement return VariableName booleanVar
ReturnStatement return MethodName parse VariableName byte[]Var
ReturnStatement return
VariableName booleanVar Operator = BooleanLiteral false VariableName booleanVar Operator = BooleanLiteral false VariableName booleanVar Operator = BooleanLiteral false VariableName booleanVar Operator = BooleanLiteral true
SimpleType TransformSnapshotImpl VariableName transformsnapshotVar MethodName apply ThisExpression this
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName instructionVar
ReturnStatement return VariableName instructionVar
IfStatement if VariableName vectorVar Operator == NullLiteral null VariableName vectorVar Operator = New new SimpleType Vector NumberLiteral numberLiteral VariableName vectorVar MethodName insertElementAt VariableName syntaxtreenodeVar NumberLiteral numberLiteral
ReturnStatement return VariableName DTM VariableName NULL
MethodName error VariableName XPATHErrorResources VariableName ER_CANT_CONVERT_TO_NODELIST ArrayType Object[] ArrayInitializer arrayInitializer ReturnStatement return NullLiteral null
ReturnStatement return VariableName intVar
ReturnStatement return VariableName DTM VariableName NULL
SimpleType DTM VariableName dtmVar VariableName xpathcontextVar MethodName createDocumentFragment VariableName dtmVar MethodName appendTextChild MethodName str ReturnStatement return VariableName dtmVar MethodName getDocument
ReturnStatement return VariableName futureVar Operator == NullLiteral null Operator || VariableName futureVar MethodName isDone
ParameterizedType List VariableName listVar VariableName vmsnapshotdaoVar MethodName listByInstanceId VariableName longVar VariableName VMSnapshot VariableName State VariableName Creating VariableName VMSnapshot VariableName State VariableName Expunging VariableName VMSnapshot VariableName State VariableName Reverting VariableName VMSnapshot VariableName State VariableName Allocated ReturnStatement return VariableName listVar MethodName size Operator > NumberLiteral numberLiteral
ReturnStatement return VariableName ipaddressVar Operator != NullLiteral null Operator && VariableName ipaddressVar MethodName getVpcId Operator != NullLiteral null Operator && VariableName ipaddressVar MethodName isOneToOneNat Operator || Operator ! VariableName firewallrulesdaoVar MethodName listByIp VariableName ipaddressVar MethodName getId MethodName isEmpty
ParameterizedType SearchCriteria VariableName searchcriteriaVar Name AllFieldsSearch MethodName create VariableName searchcriteriaVar MethodName setParameters StringLiteral stringLiteral VariableName longVar ParameterizedType List VariableName listVar MethodName search VariableName searchcriteriaVar NullLiteral null ParameterizedType Map VariableName mapVar New new ParameterizedType HashMap VariableName listVar MethodName size EnhancedForStatement for SimpleType R VariableName rVar VariableName listVar VariableName mapVar MethodName put VariableName result MethodName getName VariableName result MethodName getValue ReturnStatement return VariableName mapVar
ParameterizedType SearchCriteria VariableName searchcriteriaVar Name AllFieldsSearch MethodName create VariableName searchcriteriaVar MethodName setParameters StringLiteral stringLiteral VariableName longVar ParameterizedType List VariableName listVar MethodName search VariableName searchcriteriaVar NullLiteral null ReturnStatement return VariableName listVar
IfStatement if VariableName listVar MethodName isEmpty ReturnStatement return SimpleType TransactionLegacy VariableName transactionlegacyVar Name TransactionLegacy MethodName currentTxn VariableName transactionlegacyVar MethodName start ParameterizedType SearchCriteria VariableName searchcriteriaVar Name AllFieldsSearch MethodName create VariableName searchcriteriaVar MethodName setParameters StringLiteral stringLiteral VariableName listVar MethodName get NumberLiteral numberLiteral MethodName getResourceId MethodName expunge VariableName searchcriteriaVar EnhancedForStatement for SimpleType R VariableName rVar VariableName listVar MethodName persist VariableName detail VariableName transactionlegacyVar MethodName commit
ReturnStatement return VariableName booleanVar
ParameterizedType SearchCriteria VariableName searchcriteriaVar Name AllFieldsSearch MethodName create VariableName searchcriteriaVar MethodName setParameters StringLiteral stringLiteral VariableName longVar VariableName searchcriteriaVar MethodName setParameters StringLiteral stringLiteral VariableName serviceVar MethodName getName VariableName searchcriteriaVar MethodName setParameters StringLiteral stringLiteral VariableName providerVar MethodName getName IfStatement if MethodName findOneBy VariableName searchcriteriaVar Operator != NullLiteral null ReturnStatement return BooleanLiteral true ReturnStatement return BooleanLiteral false
ParameterizedType SearchCriteria VariableName searchcriteriaVar Name AllFieldsSearch MethodName create VariableName searchcriteriaVar MethodName setParameters StringLiteral stringLiteral VariableName longVar ReturnStatement return MethodName listBy VariableName searchcriteriaVar
ReturnStatement return BooleanLiteral false
SimpleType String VariableName stringVar Name VnmcXml.ASSIGN_ASA1000V MethodName getXml SimpleType String VariableName stringVar Name VnmcXml.ASSIGN_ASA1000V MethodName getService VariableName stringVar Operator = MethodName replaceXmlValue VariableName stringVar StringLiteral stringLiteral VariableName stringVar VariableName stringVar Operator = MethodName replaceXmlValue VariableName stringVar StringLiteral stringLiteral MethodName getDnForEdgeFirewall VariableName stringVar Operator + StringLiteral stringLiteral VariableName stringVar Operator = MethodName replaceXmlValue VariableName stringVar StringLiteral stringLiteral VariableName stringVar SimpleType String VariableName stringVar MethodName sendRequest VariableName stringVar VariableName stringVar ReturnStatement return MethodName verifySuccess VariableName stringVar
SimpleType String VariableName stringVar Name VnmcXml.UNASSIGN_ASA1000V MethodName getXml SimpleType String VariableName stringVar Name VnmcXml.UNASSIGN_ASA1000V MethodName getService VariableName stringVar Operator = MethodName replaceXmlValue VariableName stringVar StringLiteral stringLiteral VariableName stringVar VariableName stringVar Operator = MethodName replaceXmlValue VariableName stringVar StringLiteral stringLiteral MethodName getDnForEdgeFirewall VariableName stringVar Operator + StringLiteral stringLiteral VariableName stringVar Operator = MethodName replaceXmlValue VariableName stringVar StringLiteral stringLiteral VariableName stringVar SimpleType String VariableName stringVar MethodName sendRequest VariableName stringVar VariableName stringVar ReturnStatement return MethodName verifySuccess VariableName stringVar
Modifier final SimpleType XenServerStorageProcessor VariableName xenserverstorageprocessorVar New new SimpleType XenServerStorageProcessor ThisExpression this ReturnStatement return New new SimpleType StorageSubsystemCommandHandlerBase VariableName xenserverstorageprocessorVar
VariableName booleanVar Operator = VariableName booleanVar
ReturnStatement return VariableName stringVar
ReturnStatement return NullLiteral null
ReturnStatement return NullLiteral null
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
MethodName startActivity New new SimpleType Intent MethodName getActivity TypeLiteral class MethodName getActivity MethodName finish
SimpleType ShellTable VariableName shelltableVar New new SimpleType ShellTable VariableName shelltableVar MethodName column StringLiteral stringLiteral ParameterizedType List VariableName listVar MethodName getJmsService MethodName connectionFactories EnhancedForStatement for SimpleType String VariableName stringVar VariableName listVar VariableName shelltableVar MethodName addRow MethodName addContent VariableName connectionFactory VariableName shelltableVar MethodName print VariableName System VariableName out ReturnStatement return NullLiteral null
MethodName getJmsService MethodName delete VariableName stringVar ReturnStatement return NullLiteral null
Name System.out MethodName println MethodName getJmsService MethodName consume VariableName connectionFactory VariableName stringVar VariableName stringVar VariableName username VariableName password Operator + StringLiteral stringLiteral ReturnStatement return NullLiteral null
Name System.out MethodName println MethodName getJmsService MethodName move VariableName connectionFactory VariableName stringVar VariableName stringVar VariableName stringVar VariableName username VariableName password Operator + StringLiteral stringLiteral ReturnStatement return NullLiteral null
SimpleType ShellTable VariableName shelltableVar New new SimpleType ShellTable VariableName shelltableVar MethodName column StringLiteral stringLiteral VariableName shelltableVar MethodName column StringLiteral stringLiteral ParameterizedType Map VariableName mapVar MethodName getJmsService MethodName info VariableName connectionFactory VariableName username VariableName password EnhancedForStatement for SimpleType String VariableName stringVar VariableName mapVar MethodName keySet VariableName shelltableVar MethodName addRow MethodName addContent VariableName key VariableName mapVar MethodName get VariableName key VariableName shelltableVar MethodName print VariableName System VariableName out ReturnStatement return NullLiteral null
SimpleType ShellTable VariableName shelltableVar New new SimpleType ShellTable VariableName shelltableVar MethodName column StringLiteral stringLiteral VariableName shelltableVar MethodName addRow MethodName addContent MethodName getJmsService MethodName count VariableName connectionFactory VariableName stringVar VariableName username VariableName password VariableName shelltableVar MethodName print VariableName System VariableName out ReturnStatement return NullLiteral null
MethodName getJmsService MethodName send VariableName connectionFactory VariableName stringVar VariableName stringVar VariableName stringVar VariableName username VariableName password ReturnStatement return NullLiteral null
SimpleType ShellTable VariableName shelltableVar New new SimpleType ShellTable VariableName shelltableVar MethodName column StringLiteral stringLiteral EnhancedForStatement for SimpleType String VariableName stringVar MethodName getJmsService MethodName topics VariableName connectionFactory VariableName username VariableName password VariableName shelltableVar MethodName addRow MethodName addContent VariableName topic VariableName shelltableVar MethodName print VariableName System VariableName out ReturnStatement return NullLiteral null
SimpleType ShellTable VariableName shelltableVar New new SimpleType ShellTable VariableName shelltableVar MethodName column StringLiteral stringLiteral EnhancedForStatement for SimpleType String VariableName stringVar MethodName getJmsService MethodName queues VariableName connectionFactory VariableName username VariableName password VariableName shelltableVar MethodName addRow MethodName addContent VariableName queue VariableName shelltableVar MethodName print VariableName System VariableName out ReturnStatement return NullLiteral null
MethodName doExecute VariableName repositoryadminVar ReturnStatement return NullLiteral null
MethodName findResource ReturnStatement return NullLiteral null
IfStatement if VariableName booleanVar MethodName checkDuplicateExports MethodName showExports ReturnStatement return NullLiteral null
ThisExpression this MethodName getJdbcService MethodName execute VariableName stringVar VariableName stringVar ReturnStatement return NullLiteral null
VariableName session MethodName put VariableName JAAS_REALM NullLiteral null VariableName session MethodName put VariableName JAAS_ENTRY NullLiteral null VariableName session MethodName put VariableName JAAS_CMDS New new ParameterizedType LinkedList ReturnStatement return NullLiteral null
SimpleType JaasRealm VariableName jaasrealmVar SimpleType JaasRealm VariableName session MethodName get VariableName JAAS_REALM SimpleType AppConfigurationEntry VariableName appconfigurationentryVar SimpleType AppConfigurationEntry VariableName session MethodName get VariableName JAAS_ENTRY IfStatement if VariableName jaasrealmVar Operator == NullLiteral null Operator || VariableName appconfigurationentryVar Operator == NullLiteral null Name System.err MethodName println StringLiteral stringLiteral ReturnStatement return NullLiteral null SimpleType BackingEngine VariableName backingengineVar MethodName getBackingEngine VariableName appconfigurationentryVar IfStatement if VariableName backingengineVar Operator == NullLiteral null Name System.err MethodName println StringLiteral stringLiteral ReturnStatement return NullLiteral null ReturnStatement return MethodName doExecute VariableName backingengineVar
SimpleType JaasRealm VariableName jaasrealmVar SimpleType JaasRealm VariableName session MethodName get VariableName JAAS_REALM SimpleType AppConfigurationEntry VariableName appconfigurationentryVar SimpleType AppConfigurationEntry VariableName session MethodName get VariableName JAAS_ENTRY IfStatement if VariableName jaasrealmVar Operator == NullLiteral null Operator || VariableName appconfigurationentryVar Operator == NullLiteral null Name System.err MethodName println StringLiteral stringLiteral ReturnStatement return NullLiteral null SimpleType BackingEngine VariableName backingengineVar MethodName getBackingEngine VariableName appconfigurationentryVar IfStatement if VariableName backingengineVar Operator == NullLiteral null Name System.err MethodName println StringLiteral stringLiteral ReturnStatement return NullLiteral null ReturnStatement return MethodName doExecute VariableName backingengineVar
ThisExpression this VariableName stringVar Operator = VariableName stringVar
Name System.out MethodName println StringLiteral stringLiteral ReturnStatement return NullLiteral null
VariableName logserviceVar MethodName log MethodName toLevel VariableName stringVar MethodName toUpperCase VariableName stringVar ReturnStatement return NullLiteral null
Modifier final SimpleType Component VariableName componentVar MethodName findComponent VariableName stringVar IfStatement if VariableName componentVar Operator != NullLiteral null VariableName componentVar MethodName disable Name LOGGER MethodName warn StringLiteral stringLiteral Operator + VariableName stringVar
Name System.out MethodName printf VariableName stringVar VariableName collectionVar MethodName toArray ReturnStatement return NullLiteral null
ParameterizedType Set VariableName setVar New new ParameterizedType HashSet EnhancedForStatement for SimpleType String VariableName stringVar VariableName listVar MethodName addFeatures VariableName feature VariableName setVar BooleanLiteral true ReturnStatement return VariableName setVar
VariableName webcontainerserviceVar MethodName start VariableName listVar ReturnStatement return NullLiteral null
VariableName webcontainerserviceVar MethodName stop VariableName listVar ReturnStatement return NullLiteral null
ReturnStatement return VariableName listVar MethodName stream MethodName findFirst MethodName orElse NullLiteral null
MethodName setContent VariableName mainviewVar
ReturnStatement return Name INTEGER_SERIALIZER MethodName fromByteBuffer MethodName getNext
ReturnStatement return Name BYTES_ARRAY_SERIALIZER MethodName fromByteBuffer MethodName getNext
ReturnStatement return Name BYTE_SERIALIZER MethodName fromByteBuffer MethodName getNext
SimpleType GsonBuilder VariableName gsonbuilderVar New new SimpleType GsonBuilder VariableName gsonbuilderVar MethodName registerTypeAdapter TypeLiteral class New new SimpleType EncryptionKeyAdapter VariableName gsonbuilderVar MethodName registerTypeAdapter TypeLiteral class New new SimpleType PrincipalNameAdapter VariableName gsonbuilderVar MethodName registerTypeAdapter TypeLiteral class New new SimpleType KerberosTimeAdapter VariableName gsonbuilderVar MethodName enableComplexMapKeySerialization VariableName gsonbuilderVar MethodName setPrettyPrinting VariableName gsonVar Operator = VariableName gsonbuilderVar MethodName create
ReturnStatement return MethodName tag MethodName typeStr Operator + StringLiteral stringLiteral StringLiteral stringLiteral MethodName tag StringLiteral stringLiteral MethodName getOffset StringLiteral stringLiteral MethodName getHeaderLength StringLiteral stringLiteral MethodName getBodyLength StringLiteral stringLiteral
VariableName orderedconfigurationVar MethodName add StringLiteral stringLiteral VariableName requestfilterVar
ParameterizedType LazyFunction VariableName lazyfunctionVar New new ParameterizedType LazyFunction ParameterizedType LazyContinuation MethodName next ReturnStatement return New new ParameterizedType LazyContinuation VariableName tVar MethodName toLazyFunction VariableName tVar VariableName mapperVar ReturnStatement return MethodName lazy VariableName lazyfunctionVar
ParameterizedType List VariableName listVar New new ParameterizedType ArrayList VariableName intVar ForStatement for PrimitiveType int VariableName intVar NumberLiteral numberLiteral VariableName i Operator < VariableName intVar VariableName i Operator ++ VariableName listVar MethodName add VariableName t[]Var VariableName intVar Operator + VariableName i ReturnStatement return VariableName listVar
ParameterizedType List VariableName listVar MethodName findServiceIdsForInterface VariableName classVar IfStatement if VariableName listVar Operator == NullLiteral null VariableName listVar Operator = Name Collections MethodName emptyList SwitchStatement switch VariableName listVar MethodName size SwitchCase case NumberLiteral numberLiteral ThrowStatement throw New new SimpleType RuntimeException Name IOCMessages MethodName noServiceMatchesType VariableName classVar SwitchCase case NumberLiteral numberLiteral SimpleType String VariableName stringVar VariableName listVar MethodName get NumberLiteral numberLiteral ReturnStatement return MethodName getService VariableName serviceId VariableName classVar SwitchCase default Name Collections MethodName sort VariableName listVar ThrowStatement throw New new SimpleType RuntimeException Name IOCMessages MethodName manyServiceMatches VariableName classVar VariableName listVar
VariableName objectcreatorVar Operator = New new ParameterizedType ObjectCreator SimpleType T MethodName createObject ThrowStatement throw New new SimpleType IllegalStateException Name ServiceMessages MethodName registryShutdown VariableName stringVar VariableName tVar Operator = NullLiteral null
SimpleType MethodAdvice VariableName methodadviceVar New new SimpleType LoggingAdvice VariableName loggerVar VariableName exceptiontrackerVar VariableName methodadvicereceiverVar MethodName adviseAllMethods VariableName methodadviceVar
ReturnStatement return VariableName methodinvocationbundleVar MethodName getMethod MethodName getInstance
VariableName mapVar MethodName clear
VariableName urlchangetrackerVar MethodName clear VariableName mapVar MethodName clear VariableName plasticproxyfactoryVar MethodName clearCache MethodName initializeService
VariableName strategyregistryVar MethodName clearCache
VariableName strategyregistryVar MethodName clearCache VariableName mapVar MethodName clear
SimpleType TreeNode VariableName treenodeVar VariableName treemodelVar MethodName getById VariableName stringVar VariableName treeexpansionmodelVar MethodName markExpanded VariableName treenodeVar ReturnStatement return New new SimpleType RenderNodes VariableName treenodeVar MethodName getChildren
VariableName treeexpansionmodelVar MethodName markExpanded VariableName treemodelVar MethodName getById VariableName stringVar ReturnStatement return New new SimpleType JSONObject
VariableName treeexpansionmodelVar MethodName markCollapsed VariableName treemodelVar MethodName getById VariableName stringVar ReturnStatement return New new SimpleType JSONObject
SimpleType TreeNode VariableName treenodeVar VariableName treemodelVar MethodName getById VariableName stringVar SimpleType String VariableName stringVar IfStatement if VariableName booleanVar VariableName treeselectionmodelVar MethodName select VariableName treenodeVar VariableName stringVar Operator = VariableName EventConstants VariableName NODE_SELECTED VariableName treeselectionmodelVar MethodName unselect VariableName treenodeVar VariableName stringVar Operator = VariableName EventConstants VariableName NODE_UNSELECTED ParameterizedType CaptureResultCallback VariableName captureresultcallbackVar Name CaptureResultCallback MethodName create VariableName componentresourcesVar MethodName triggerEvent VariableName stringVar ArrayType Object[] ArrayInitializer arrayInitializer VariableName captureresultcallbackVar Modifier final SimpleType Object VariableName objectVar VariableName captureresultcallbackVar MethodName getResult IfStatement if VariableName objectVar Operator != NullLiteral null ReturnStatement return VariableName objectVar ReturnStatement return New new SimpleType JSONObject
ReturnStatement return VariableName booleanVar Operator != VariableName booleanVar
ReturnStatement return Operator ! VariableName booleanVar
VariableName strategyregistryVar MethodName clearCache
IfStatement if VariableName threadpoolworkmanagerVar Instanceof instanceof SimpleType ThreadPoolWorkManager Name AccessController MethodName doPrivileged New new ParameterizedType PrivilegedAction SimpleType Object MethodName run SimpleType ThreadPoolWorkManager VariableName threadpoolworkmanagerVar MethodName destroy ReturnStatement return NullLiteral null
TryStatement try ReturnStatement return VariableName documentbuilderfactoryVar MethodName newDocumentBuilder CatchClause catch SimpleType ParserConfigurationException VariableName parserconfigurationexceptionVar ThrowStatement throw New new SimpleType IllegalArgumentException VariableName e
SimpleType Transformer VariableName transformerVar NullLiteral null TryStatement try VariableName transformerVar Operator = VariableName transformerfactoryVar MethodName newTransformer CatchClause catch SimpleType TransformerConfigurationException VariableName transformerconfigurationexceptionVar ThrowStatement throw New new SimpleType IllegalArgumentException VariableName e ReturnStatement return VariableName transformerVar
IfStatement if VariableName stringVar Operator == NullLiteral null ReturnStatement return NullLiteral null SimpleType String VariableName stringVar VariableName xmlstreamwriterVar MethodName getPrefix VariableName stringVar IfStatement if VariableName stringVar Operator != NullLiteral null ReturnStatement return NullLiteral null SimpleType NamespaceContext VariableName namespacecontextVar VariableName xmlstreamwriterVar MethodName getNamespaceContext ForStatement for PrimitiveType int VariableName intVar NumberLiteral numberLiteral VariableName i Operator ++ VariableName stringVar Operator = StringLiteral stringLiteral Operator + VariableName i IfStatement if VariableName nsc MethodName getNamespaceURI VariableName stringVar Operator == NullLiteral null BreakStatement break VariableName xmlstreamwriterVar MethodName setPrefix VariableName stringVar VariableName stringVar ReturnStatement return VariableName stringVar
IfStatement if Operator ! VariableName componentVar Instanceof instanceof SimpleType RuntimeComponent ReturnStatement return SimpleType RuntimeComponent VariableName runtimecomponentVar SimpleType RuntimeComponent VariableName componentVar EnhancedForStatement for SimpleType Reference VariableName referenceVar VariableName runtimecomponentVar MethodName getReferences IfStatement if MethodName getReference VariableName reference MethodName getName Operator == NullLiteral null MethodName getReferences MethodName add MethodName createReference VariableName reference EnhancedForStatement for SimpleType Property VariableName propertyVar VariableName runtimecomponentVar MethodName getProperties IfStatement if MethodName getProperty VariableName property MethodName getName Operator == NullLiteral null MethodName getProperties MethodName add MethodName createProperty VariableName property
EnhancedForStatement for SimpleType Registry VariableName registryVar VariableName mapVar MethodName values TryStatement try Name UnicastRemoteObject MethodName unexportObject VariableName registry BooleanLiteral false CatchClause catch SimpleType NoSuchObjectException VariableName nosuchobjectexceptionVar VariableName e MethodName printStackTrace VariableName mapVar MethodName clear
EnhancedForStatement for SimpleType Plugin VariableName pluginVar VariableName hashmapVar MethodName values VariableName plugin MethodName shutDown
ThisExpression this VariableName lockVar MethodName lock TryStatement try IfStatement if MethodName isRunning Name LOGGER MethodName info StringLiteral stringLiteral ThisExpression this VariableName statusVar Operator = ThisExpression this VariableName myriaddriverVar MethodName abort Name LOGGER MethodName info StringLiteral stringLiteral ThisExpression this VariableName statusVar ThisExpression this VariableName lockVar MethodName unlock ReturnStatement return VariableName statusVar
ReturnStatement return MethodName getCopy
MethodName stop
ReturnStatement return VariableName mimemessageVar
ReturnStatement return New new SimpleType Builder
ReturnStatement return Name System MethodName currentTimeMillis
ReturnStatement return New new SimpleType Throwable MethodName getStackTrace NumberLiteral numberLiteral MethodName getClassName
ReturnStatement return Name Class MethodName forName New new SimpleType Throwable MethodName getStackTrace NumberLiteral numberLiteral MethodName getClassName
ReturnStatement return New new SimpleType StringFormattedMessage StringLiteral stringLiteral VariableName randomintegerVar VariableName random
Modifier final ParameterizedType Constructor VariableName constructorVar TypeLiteral class MethodName getConstructor TypeLiteral class TypeLiteral class ReturnStatement return VariableName constructorVar MethodName newInstance StringLiteral stringLiteral ArrayType Object[] ArrayInitializer arrayInitializer
ReturnStatement return Name STR MethodName getBytes
ReturnStatement return Name PATTERN_M MethodName toByteArray VariableName logeventVar
ReturnStatement return Name PATTERN_SPACE MethodName toByteArray VariableName logeventVar
ReturnStatement return Name PATTERN_M_C MethodName toByteArray VariableName logeventVar
ReturnStatement return Name PATTERN_M_C_D MethodName toByteArray VariableName logeventVar
ReturnStatement return Name PATTERN_M_D MethodName toByteArray VariableName logeventVar
ReturnStatement return Name PATTERN_M_D_EX MethodName toByteArray VariableName logeventVar
ReturnStatement return Name PATTERN_M_EX MethodName toByteArray VariableName logeventVar
ReturnStatement return Name PATTERN_M_C_D_EX MethodName toByteArray VariableName logeventVar
ReturnStatement return Name LOGMSG MethodName getBytes
ReturnStatement return Name LOGMSG MethodName getBytes VariableName stringVar
ReturnStatement return Name LOGMSG MethodName getBytes VariableName charsetVar
ReturnStatement return Name LOGMSG MethodName getBytes VariableName stringVar
ReturnStatement return Name LOGMSG MethodName getBytes VariableName charsetVar
ReturnStatement return Name LOGMSG MethodName getBytes VariableName stringVar
ReturnStatement return Name LOGMSG MethodName getBytes VariableName charsetVar
ReturnStatement return Name LOGMSG MethodName getBytes VariableName stringVar
ReturnStatement return Name LOGMSG MethodName getBytes VariableName charsetVar
Modifier final PrimitiveType int VariableName intVar MethodName formatCharArrayBitFiddling Name System MethodName currentTimeMillis VariableName bufferstateVar VariableName charArray NumberLiteral numberLiteral ReturnStatement return New new SimpleType String VariableName bufferstateVar VariableName charArray NumberLiteral numberLiteral VariableName intVar
VariableName state.stringBuilder MethodName setLength NumberLiteral numberLiteral MethodName formatStringBuilder Name System MethodName currentTimeMillis VariableName bufferstateVar VariableName stringBuilder ReturnStatement return New new SimpleType String VariableName bufferstateVar VariableName stringBuilder
VariableName augmentationsitemscontainerVar MethodName clear
IfStatement if VariableName intVar Operator < NumberLiteral numberLiteral Operator || VariableName intVar Operator >= VariableName intVar ReturnStatement return NullLiteral null ReturnStatement return VariableName xsobject[]Var VariableName intVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName shortVar Operator & VariableName shortVar Operator != NumberLiteral numberLiteral
ReturnStatement return VariableName shortVar Operator & VariableName shortVar Operator != NumberLiteral numberLiteral
ReturnStatement return BooleanLiteral false
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName shortVar Operator & VariableName shortVar Operator != NumberLiteral numberLiteral
ReturnStatement return VariableName shortVar Operator & VariableName shortVar Operator != NumberLiteral numberLiteral
ReturnStatement return VariableName shortVar Operator & VariableName shortVar Operator != NumberLiteral numberLiteral
MethodName setOrdered MethodName setNumeric MethodName setBounded MethodName setCardinality
ReturnStatement return VariableName shortVar Operator & VariableName shortVar Operator != NumberLiteral numberLiteral
VariableName shortVar Operator = PrimitiveType short VariableName booleanVar VariableName shortVar Operator | VariableName shortVar VariableName shortVar Operator & Operator ~ VariableName shortVar
ReturnStatement return MethodName isIdAttribute
ReturnStatement return MethodName ownerDocument MethodName getImplementation MethodName hasFeature VariableName stringVar VariableName stringVar
ReturnStatement return VariableName shortVar Operator & VariableName shortVar Operator != NumberLiteral numberLiteral
VariableName shortVar Operator = PrimitiveType short VariableName booleanVar VariableName shortVar Operator | VariableName shortVar VariableName shortVar Operator & Operator ~ VariableName shortVar
ReturnStatement return VariableName shortVar Operator & VariableName shortVar Operator != NumberLiteral numberLiteral
VariableName shortVar Operator = PrimitiveType short VariableName booleanVar VariableName shortVar Operator | VariableName shortVar VariableName shortVar Operator & Operator ~ VariableName shortVar
ReturnStatement return VariableName shortVar Operator & VariableName shortVar Operator != NumberLiteral numberLiteral
VariableName shortVar Operator = PrimitiveType short VariableName booleanVar VariableName shortVar Operator | VariableName shortVar VariableName shortVar Operator & Operator ~ VariableName shortVar
ReturnStatement return VariableName shortVar Operator & VariableName shortVar Operator != NumberLiteral numberLiteral
VariableName shortVar Operator = PrimitiveType short VariableName booleanVar VariableName shortVar Operator | VariableName shortVar VariableName shortVar Operator & Operator ~ VariableName shortVar
ReturnStatement return VariableName shortVar Operator & VariableName shortVar Operator != NumberLiteral numberLiteral
VariableName shortVar Operator = PrimitiveType short VariableName booleanVar VariableName shortVar Operator | VariableName shortVar VariableName shortVar Operator & Operator ~ VariableName shortVar
ReturnStatement return VariableName shortVar Operator & VariableName shortVar Operator != NumberLiteral numberLiteral
VariableName shortVar Operator = PrimitiveType short VariableName booleanVar VariableName shortVar Operator | VariableName shortVar VariableName shortVar Operator & Operator ~ VariableName shortVar
ReturnStatement return VariableName shortVar Operator & VariableName shortVar Operator != NumberLiteral numberLiteral
VariableName shortVar Operator = PrimitiveType short VariableName booleanVar VariableName shortVar Operator | VariableName shortVar VariableName shortVar Operator & Operator ~ VariableName shortVar
Name LOG MethodName error VariableName stringVar ThrowStatement throw New new SimpleType RuntimeException VariableName stringVar
ReturnStatement return VariableName characterVar Operator == NullLiteral null VariableName charVar VariableName characterVar MethodName charValue
ReturnStatement return VariableName intVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName stringVar Operator != NullLiteral null
IfStatement if VariableName longVar Operator < NumberLiteral numberLiteral ThrowStatement throw New new SimpleType IllegalArgumentException StringLiteral stringLiteral Operator + VariableName longVar ThisExpression this VariableName longVar Operator = VariableName longVar
PrimitiveType int VariableName intVar VariableName intVar Operator - NumberLiteral numberLiteral MethodName formatUnsignedOctalString VariableName longVar VariableName byte[]Var VariableName intVar VariableName intVar VariableName byte[]Var VariableName intVar Operator + VariableName intVar Operator ++ Operator = PrimitiveType byte CharacterLiteral charLiteral VariableName byte[]Var VariableName intVar Operator + VariableName intVar Operator = NumberLiteral numberLiteral ReturnStatement return VariableName intVar Operator + VariableName intVar
PrimitiveType int VariableName intVar VariableName intVar Operator - NumberLiteral numberLiteral MethodName formatUnsignedOctalString VariableName longVar VariableName byte[]Var VariableName intVar VariableName intVar VariableName byte[]Var VariableName intVar Operator + VariableName intVar Operator ++ Operator = NumberLiteral numberLiteral VariableName byte[]Var VariableName intVar Operator + VariableName intVar Operator = PrimitiveType byte CharacterLiteral charLiteral ReturnStatement return VariableName intVar Operator + VariableName intVar
ReturnStatement return SimpleType ServletWebContext ThisExpression this MethodName getBaseContext
ReturnStatement return SimpleType WebContext ThisExpression this MethodName getBaseContext
SimpleType StringBuffer VariableName stringbufferVar New new SimpleType StringBuffer StringLiteral stringLiteral IfStatement if Operator ! ThisExpression this MethodName isXhtml Operator && ThisExpression this VariableName booleanVar VariableName stringbufferVar MethodName append StringLiteral stringLiteral IfStatement if ThisExpression this VariableName stringVar Operator != NullLiteral null VariableName stringbufferVar MethodName append StringLiteral stringLiteral Operator + VariableName stringVar StringLiteral stringLiteral VariableName stringbufferVar MethodName append StringLiteral stringLiteral ReturnStatement return VariableName stringbufferVar MethodName toString
IfStatement if VariableName urlconnectionVar Instanceof instanceof SimpleType HttpURLConnection Operator && VariableName stringVar MethodName startsWith VariableName httpservletrequestVar MethodName getContextPath VariableName httpservletrequestVar MethodName getRequestedSessionId Operator != NullLiteral null VariableName httpservletrequestVar MethodName isRequestedSessionIdFromCookie SimpleType StringBuffer VariableName stringbufferVar New new SimpleType StringBuffer StringLiteral stringLiteral VariableName sb MethodName append VariableName httpservletrequestVar MethodName getRequestedSessionId VariableName urlconnectionVar MethodName setRequestProperty StringLiteral stringLiteral VariableName sb MethodName toString
ReturnStatement return VariableName fileVar MethodName canRead
Name LOG MethodName debug StringLiteral stringLiteral Operator + MethodName getAbsolutePath IfStatement if VariableName userVar MethodName authorize New new SimpleType WriteRequest MethodName getAbsolutePath Operator == NullLiteral null Name LOG MethodName debug StringLiteral stringLiteral ReturnStatement return BooleanLiteral false Name LOG MethodName debug StringLiteral stringLiteral IfStatement if VariableName fileVar MethodName exists Name LOG MethodName debug StringLiteral stringLiteral Operator + VariableName fileVar MethodName canWrite ReturnStatement return VariableName fileVar MethodName canWrite Name LOG MethodName debug StringLiteral stringLiteral ReturnStatement return BooleanLiteral true
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName booleanVar
ReturnStatement return VariableName setVar MethodName size
ReturnStatement return VariableName mapVar MethodName size
ReturnStatement return VariableName intVar
ReturnStatement return VariableName hashmapVar MethodName getCount
ReturnStatement return New new SimpleType BufferingClientHttpRequestFactory VariableName clienthttprequestfactoryVar
TryStatement try ReturnStatement return VariableName jdbctemplateVar MethodName queryForObject MethodName selectFromUserConnection Operator + StringLiteral stringLiteral VariableName connectionMapper VariableName stringVar VariableName connectionkeyVar MethodName getProviderId VariableName connectionkeyVar MethodName getProviderUserId CatchClause catch SimpleType EmptyResultDataAccessException VariableName emptyresultdataaccessexceptionVar ThrowStatement throw New new SimpleType NoSuchConnectionException VariableName connectionkeyVar